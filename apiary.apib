FORMAT: 1A
HOST: http://www.csast.csas.cz/webapi/api/v2

# EXT-1\_CSAS\_Netbanking

Last update: **21.08.2015 14:21**

## Data Structures

### ACCOUNT (ACCOUNT_LIGHT)

This object represents account in bank.

#### Properties

- overdraft (AMOUNT, optional) - Overdraft value. Exists only for current accounts.
- overdraftDueDate: `2015-07-31` (DATE, optional) - Due date of overdraft. Only for overdrafts where automatic prolongation is not set.
- description: Tonda Paleček (string, optional) - Account description. Currently account owner name is returned.
- flags (array[string], optional) - Array of flags for messages.
    - Sample
        - accountQueryAllowed
        - domesticTransferAllowed
        - internationalTransferAllowed
        - ownTransferAllowed
        - urgentTransferAllowed
    - Items
        - accountQueryAllowed - User may see the transaction list for this account.
        - ownTransferAllowed - Account may be used for transfer between own accounts.
        - domesticTransferAllowed - Account may be used for domestic payments.
        - collectiveSigning - Indicates if orders sended from this account have to be signed by at least two users.
        - internationalTransferAllowed - Account may be used for foreign payments.
        - urgentTransferAllowed - Account may be used for urgent transfers.
        - offline - Account is offline (no transactions can be requested), but still visible to the user. e.g. account is currently closing.
        - owner - Current user is owner of the account.
        - dcsAllowed - Account is enabled for "Data Carrier Service".
        - electronicStatementAllowed - User may see the electronic statements list and download statement for this account.
- subaccounts (array[SUBACCOUNT], optional) - Possible list of subaccounts. Currently only linked saving accounts are returned.
- creditInterestRate: 0.5 (number, optional) - Basic credit interest rate, used for current and saving accounts. Value in percentage, e.g. 0.5 will be dispayed as 0,5 %.
- debitInterestRate: 11.5 (number, optional) - Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11.5 will be dispayed as 11,5 %.
- penaltyInterestRate: 19.5 (number, optional) - For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19.5 will be dispayed as 19,5 %.
- loan (LOAN_ACCOUNT_DATA, optional) - Object holding specific data for loans.
- saving (SAVING_ACCOUNT_DATA, optional) - Object holding specific data for savings.
- ownTransferReceivers (array[OWN_TRANSFER_RECEIVER], optional) - Array of allowed receivers. If this array is empty you can transfer funds to all possilbe accounts. Otherwise transfer is restricted to given list of accounts.

### ACCOUNT_BALANCE (object)

Account balance.

#### Properties

- balance (AMOUNT, required) - Account balance for Current account, Saved amount for Saving, Principal Outstanding for Loan/Mortgage.
- disposable (AMOUNT, optional) - Disposable balance for Current account.
- overdraft (AMOUNT, optional) - Overdraft amount for Current amount.

### ACCOUNT_LIGHT (object)

Account Light version.

#### Properties

- id: CCA4F9863D686D04 (string, required) - Unique product id.
- accountno (ACCOUNTNO_FULL, required) - Account number of this account.
- alias: Toto je moje osobní pojmenování tohoto produktu (string, optional) - User defined account name.
- balance (AMOUNT, required) - Actual account balance. For loans this field contains outstanding principal.
- disposable (AMOUNT, optional) - Disposable account balance.
- type: CURRENT (ACCOUNT_TYPE, required) - Product type.
- subtype: CURRENT_ACCOUNT (ACCOUNT_SUBTYPE, required) - Subtype type.
- productI18N: Osobní účet ČS II (string, required) - Product name.
- product: 54 (string, required) - Product code.
- subaccounts (array[SUBACCOUNT_LIGHT], optional) - Possible list of subaccounts. Currently only linked saving accounts are returned.
- loan (LOAN_ACCOUNT_LIGHT_DATA, optional) - Object holding specific data for loans.

### ACCOUNT_SERVICE (object)

Service object for accounts.

#### Properties

- id: CCA4F9863D686D04 (string, required) - Service identificator.
- nameI18N: Všechny platby v KČ (string, required) - Service name.
- iconGroup: DEFAULT (SERVICE_ICON_GROUP, required) - Icon Group.
- dateFrom: `2014-07-31+0100` (DATE, optional) - Service validity from.
- dateTo: `2014-08-31+0100` (DATE, optional) - Service validity to.

### ACCOUNT_TYPE (enum)

Enum which describes type of the account.

#### Members

- CURRENT - Current account.
- SAVING - Saving account.
- LOAN - Loan.

### ACCOUNT_SUBTYPE (enum)

Enum which describes subtype of the account.

#### Members

- CURRENT_ACCOUNT - Current account.
- GIRO_ACCOUNT - Giro account.
- FOREIGN_ACCOUNT - Foreign account.
- SAVING_ACCOUNT - Saving account.
- TERM_DEPOSIT - Term deposit.
- SAVING_PLUS - Saving plus.
- LOAN_ACCOUNT - Loan account.
- MORTGAGE - Mortgage

### ACCOUNTNO (enum)

Account number. Account number consists of IBAN (IBAN plus optional BIC) identification or local account number (BBAN) plus mandatory bank code plus optional country code. This is due to fact, that using of IBAN format was not adopted in all the Erste group countries. Some applications of ACCOUNTNO are restricted to one of the two flavors only. F.i. when posting new SEPA payment orders sender and receiver accounts must be specified by IBAN format only, or when posting new Domestic payment in CSAS BBAN format should be used. However when requesting existing transactions the receiver account may be returned in format BBAN or IBAN (for SEPA payments). Therefore the ACCOUNTNO object may in some cases only contain IBAN, only local BBAN, or both.

#### Members

- ACCOUNTNO_BBAN
- ACCOUNTNO_IBAN

### ACCOUNTNO_BBAN (object)

Domestic account number format.

#### Properties

- number: 1019382023 (string, required) - Account number with possible prefix. Format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros.
- bankCode: 0800 (BANKCODE, required) - Bank code.
- countryCode: CZ (COUNTRYCODE, optional) - Code of the country. Mandatory for international orders.

### ACCOUNTNO_IBAN (object)

Account number represented by iban.

#### Properties

- iban: CZ0708000000001019382023 (IBAN, required) - International account number.
- bic: GIBACZPX (BIC, optional) - Business identification code.

### ACCOUNTNO_FULL (object)

Full account number. Consists of IBAN (IBAN plus optional BIC) identification and local account number (BBAN) plus mandatory bank code plus optional country code.

#### Properties

- `cz-iban`: CZ0708000000001019382023 (IBAN, optional) - International account number.
- `cz-bic`: GIBACZPX (BIC, optional) - Business identification code.
- Include ACCOUNTNO_BBAN

### ADDITIONAL_INFO (object)

Structure for payment additional info

#### Properties

- text4x35: poznamka pro prijemce (array[string], required) - Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.

### ADDRESS (object)

Object represents postal address.

#### Properties

- street: Antala Staška (string, required) - Street part of the address.
- streetNumber: 32 (string, optional) - Number which is unique in street. Not all localities have streets.
- buildingApartment: 1292 (string, required) - Number which is unique in locality/town/village.
- zipCode: 140 00 (string, required) - Zip code of the address.
- city: Praha (string, required) - City where card should be sent.
- country: CZ (COUNTRYCODE, required) - Country of the address.

### ADDRESS_WITH_DESCRIPTION (ADDRESS)

Object represents postal address (with description).

#### Properties

- description (string, optional) - Additional description to address.

### AMOUNT

Amounts are objects that include the value, the precision and the currency. 
If the precision is omitted, the value is considered to be 2. If the currency is omitted, it is to be considered to be `CZK`.

When AMOUNT is used as input value, maximum expected precision is 2. If other restriction is used for given resource it would be stated in it's description.

#### Properties

- value: 242600 (number, required) - Value of an amount.
- precision: 2 (number, optional) - If the precision is omitted, the value is considered to be 2.
    - Default: 2
- currency: CZK (CURRENCY, optional) - Amount currency. If is is omitted, it is to be considered to be CZK.
    - Default: CZK

### APPLICATION_ID (enum)

Application Id

#### Members

- GEORGE
- BRANCH_FE
- POST_OFFICE
- INTERNET_BANKING
- TELEPHONE_BANKER
- VIDEO_BANKER
- COLLECTION_BOX
- GSM
- ATM_OTHER
- ATM_PAYMENT
- UKNOWN

### APPLICATION_ID_LIMIT (enum)

Limit application id enum.

#### Members

- GEORGE
- INTERNET_BANKING
- BUSINESS24
- UNKNOWN

### AUTHORIZATION_LIMIT (object)

Authorization limit object.

#### Properties

- id: 934872973982 (string, required) - Internal ID for limit definition for authorization type, channel, application.
- authorizationType: TAC (AUTHORIZATION_TYPE, required) - Authorization method type for which is limit defined.
- channelId: NET_BANKING (CHANNEL_ID_LIMIT, required) - ID of the channel for which is limit defined.
- applicationId: GEORGE (APPLICATION_ID_LIMIT, required) - ID of the application for which is limit defined.
- dailyLimit (AMOUNT, optional) - Daily limit for particular authorization method.
- transactionLimit (AMOUNT, optional) - Transaction limit for particular authorization method.
- maxBankLimit (AMOUNT, optional) - Maximal limit for authorization method defined by bank.

### AUTHORIZATION_TYPE (enum)

Payment limit authorization type enum.

#### Members

- TAC
- TAN
- SMS
- PKI
- GRID_CARD
- EOK
- VOICE
- DISPLAY_CARD
- M_TOKEN

### BANKCODE (string)

Local bank code used in local bank clearing system, e.g. 5-digit bank code in AT, 4-digit bank code in CZ, SK.

#### Sample

- 0800

### BIC (string)

Business Identifier Code (also know as SWIFT ID/code) standard format (based on **ISO 9362**) has 8 or 11 characters, made up of:

* 4 letters: Institution Code or bank code
* 2 letters: ISO 3166-1 alpha-2 country code
* 2 letters or digits: location code
* 3 letters or digits: branch code, optional (possible default 'XXX' for primary office)

#### Sample

- GIBACZPX

### BUILDING (object)

Building object.

#### Properties

- id: df4fda87fda5f7 (string, required) - Unique product identifier.
- accountno (ACCOUNTNO_FULL, required) - Building saving account number.
- alias: test alias (string, optional) - User defined account name.
- type: BUILD_SAVING (BUILDING_TYPE, required) - Type of the account.
- product: SS (string, required) - Product code.
- productI18N: Stavební spoření (string, required) - Product name.
- balance (AMOUNT, required) - Building saving account balance. For loans outstanding debt is served.
- status: ACTIVE (BUILDING_STATUS, required) - Status of the contract.
- contractHolders: Tomáš Spořitelný (array[string], optional) - Debtor. Will only set for loans.
    - Sample
        - Tomáš Spořitelný
- creditInterestRate: 2.3 (number, optional) - Basic credit interest rate, used for building saving deposits. Value in percentage.
- debitInterestRate: 4.3 (number, optional) - Basic debit interest rate, used for building loan. Value in percentage.
- saving (BUILDING_SAVING, optional) - Object which holds data for building saving.
- loan (BUILDING_LOAN, optional) - Object which holds data for building saving loan. 
- flags (array[string], optional) - Array of flags for building saving contract.
    - Sample
        - notRequestedBonus
    - Items
        - notRequestedBonus

### BUILDING_LOAN (object)

Building loan object.

#### Properties

- loanAmount (AMOUNT, optional) - Loan amount.
- loanInstallment (AMOUNT, required) - Installment part of the loan monthly repayment.
- additionalSavings (AMOUNT, optional) - Saving part of the loan monthly repayment.
- paymentInsurance (AMOUNT, optional) - Insurance part of the loan monthly repayment.
- interestRateFromDate: `2012-02-14` (DATE, optional) - Current interest rate is valid from this date.
- interestRateToDate: `2016-02-14` (DATE, optional) - Current interest rate is valid to this date. If this field is not empty, then interest rate is considered to be variable otherwise it is fixed.

### BUILDING_SAVING (object)

Building saving object.

#### Properties

- targetAmount (AMOUNT, optional) - Target amount. Will not be set for loans.
- agreedMonthlySavings (AMOUNT, optional) - Agreed monthly savings amount for building savings. Will not be set for loans.
- expiryDate: `2017-02-14T00:00:00Z` (DATETIME, optional) - Notice period expiry date. Not set for loans.
- bonusBearingDepositToPay (AMOUNT, optional) - Remaining deposit to be paid to Building Savings till the end of this year to get annual Maximal Bonus.

### BUILDING_SERVICE (object)

Building service object.

#### Properties

- id: s54sdf756dfhm52879sdf23xd8744Fsdf5 (string, required) - Service identifier.
- nameI18N: Uver k stavebnimu sporeni (string, required) - Service name.
- iconGroup: DEFAULT (SERVICE_ICON_GROUP, required) - Icon Group.

### BUILDING_STATUS (enum)

Building status enum.

#### Members

- ACTIVE
- CLOSED

### BUILDING_TYPE (enum)

Building type enum.

#### Members

- BUILD_SAVING - For building savings.
- BUILD_LOAN - For building loans.

### CARD (object)

Card object.

#### Properties

- id: 38338227 (string, required) - Card identifier.
- alias: moje zlata (string, optional) - User defined name of card.
- owner: NOVÁKOVÁ JANA (string, required) - Product/card owner.
- number: 895632XXXXXX5501 (string, required) - Card number.
- sequenceNumber: 09 (string, required) - Card sequence number.
- productI18N: Visa Gold (string, required) - Localized product name.
- productCode: 49 (string, optional) - Internal product code.
- expiryDate: `2014-07-31` (DATE, optional) - Expiration date of particular plastic card is valid.
- validFromDate: `2011-07-01` (DATE, optional) - Date from which this particular plastic card is valid.
- state: ACTIVE (CARD_STATE, required) - Current state of card.
- type: CREDIT (CARD_TYPE, required) - Card type.
- provider: ERSTE_BANK (CARD_PROVIDER, required) - Credit card provider/issuer.
- lockReason: THEFT (CARD_LOCK_REASON, optional) - Indicates reason for locking the card.
- characteristic: MAIN (CARD_CHARACTERISTIC, optional) - Card characteristic.
- balance (AMOUNT, optional) - Card balance.
- limit (AMOUNT, optional) - Card limit.
- outstandingAmount (AMOUNT, optional) - Card outstanding amount.
- minimalMonthlyAmount (AMOUNT, optional) - Card minimal monthly amount.
- installmentDueDate: `2011-07-08` (DATE, optional) - Installment reapyment due date.
- mainAccount (CARD_MAIN_ACCOUNT, optional) - Card main account.
- `cz-overallCardAccountLimits` (CARD_OVERALL_CARD_ACCOUNT_LIMITS, optional) - Card account limits.
- cardDeliveryMode: HOME (CARD_DELIVERY_MODE, optional) - Indicates how a client receives their card and PIN.
- features (array[string], optional) - Card features.
    - Sample
        - contactless
    - Items
        - contactless - Indicates whether contactless technology is available for this card.
        - reissuePin - Indicates whether reissuing a PIN is possible.
        - reissueCard - Indicates whether reissuing a card is possible.
        - limitChange - Indicates that card limits could be changed for this card.
        - temporaryLimitChange - Indicates that card temporary limits could be changed for this card.
        - secureOnlineShopping - Indicates whether secure online shopping is available for this card.
        - cardDelivery - Indicates whether card delivery mode could be changed for this card.
        - onlineLocking - Indicates whether a card can be locked online.
- flags (array[string], optional) - Card flags.
    - Sample
        - automaticReplacementOn
    - Items
        - notAccountOwner - User is only holder of the card not owner of card account.
        - contactlessEnabled - Indicates whether contactless functionality is active for given card.
        - secureOnlineShoppingEnabled - Indicates that 3D secure online shopping functionality is active for this card.
        - automaticReplacementOn - Indicates whether automatic card replacement is active for given card.
        - cardDeliveryChangeEnabled - Indicates whether card delivery mode could be changed for this card.
        - electronicStatementAllowed - User may see the electronic statements list and download statement for credit card (shadow account).

### CARD_3D_SECURE (object)

Card 3D secure.

#### Properties

- status: OK (CARD_3D_SECURE_STATUS, optional) - 3D secure functionality status.
- pam: Personal salutation (string, optional) - Personal Assurance Message (PAM) that user chose when activate 3D secure.
- phoneNumber: `+420 433974932` (string, optional) - Phone (used fot OTP authentification).
- language: cs (LANGUAGE, optional) - 3D secure language

### CARD_3D_SECURE_STATUS (enum)

Card 3D secure status.

#### Members

- OK
- NOT_ACTIVATED

### CARD_ACTION (object)

Card action object.

#### Properties

- action: LOCK_CARD (CARD_ACTION_ENUM, required) - Action on the card.
- lockReason: LOSS (CARD_ACTION_LOCK_REASON, optional) - Reason why card should be locked. Mandatory for action "LOCK_CARD".
- confirmations (array[CARD_ACTION_CONFIRMATION], optional) - Settings for confirmation mail for current action.

### CARD_ACTION_CONFIRMATION (object)

Card action confirmation.

#### Properties

- email: ard.holder@master.cz (string, required) - Email address where confirmation should be sent.
- language: cs (LANGUAGE, required) - Language of the confirmation email. Possible values are "en" and "cs".

### CARD_ACTION_ENUM (enum)

Card action enum.

#### Members

- REISSUE_PIN
- LOCK_CARD
- ACTIVATE_CARD
- SET_AUTOMATIC_REPLACEMENT_ON
- SET_AUTOMATIC_REPLACEMENT_OFF

### CARD_ACTION_LOCK_REASON (enum)

Card action lock reasons.

#### Members

- THEFT
- LOSS

### CARD_CHARACTERISTIC (enum)

Card characteristics.

#### Members

- MAIN
- AUTHORISED

### CARD_DELIVERY (object)

This structure is used to change card delivery method for particular payment card.

#### Properties

- cardDeliveryMode: BRANCH (CARD_DELIVERY_MODE, required) - Card delivery mode for given payment card.
- branchId: HR0_50000328 (string, optional) - Identification of the branch where card will be ready to takeover.
- address (ADDRESS_WITH_DESCRIPTION, optional) - Address for card/pin sending.
- deliveryPassword: hesielko (string, optional) - Password used when card is delivered.
- deliveryPhone: +420608457421 (string, optional) - Phone number of the client used when card is being delivered abroad.

### CARD_DELIVERY_MODE (enum)

Enumeration of possible values for card delivery.

#### Members

- BRANCH - New card will be delivered to issuing branch.
- OTHER_BRANCH - New card will be delivered to selected branch. Branch identifier should be set.
- HOME - New card will be delivered via post to home address.
- ADDRESS_ABROAD - New card will be delivered via post to address which is abroad.

### CARD_LIMIT (object)

Card limit object.

#### Properties

- limitType: ATM (CARD_LIMIT_TYPE, required) - Limit type.
- period: 5D (CARD_LIMIT_PERIOD, required) - Bank limit's period in days defined for limit type.
- limit (AMOUNT, optional) - Current limit amount fot limit's type and period.
- temporaryLimit (AMOUNT, optional) - Temporary limit amount valid for limit's type and period.
- temporaryLimitExpiration: `2014-12-12T00:00:00+02:00` (DATETIME, optional) - Temporary limit amount valid for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future.
- bankLimit (AMOUNT, optional) - Maximum limit amount expiration defined by bank valid for limit's type and period.

### CARD_LIMIT_PERIOD (enum)

Card limit period.

#### Members

- 1D - 1 day.
- 2D - 2 days.
- 3D - 3 days.
- 5D - 5 days.
- 7D - 7 days.
- 10D - 10 days.
- 15D - 15 days.
- 30D - 30 days.

### CARD_LIMIT_TYPE (enum)

Card limit types.

#### Members

- ATM
- POS
- INTERNET

### CARD_LOCK_REASON (enum)

Card lock reasons.

#### Members

- THEFT
- LOSS
- FRAUD
- OTHER

### CARD_MAIN_ACCOUNT (object)

Card main account.

#### Properties

- Include ACCOUNTNO_FULL
- holderName: Frany BeeOne (string, required) - Name of account owner.

### CARD_OVERALL_CARD_ACCOUNT_LIMITS (object)

Card overall account limits.

#### Properties

- limitATM (AMOUNT, optional) - ATM limit.
- limitPOS (AMOUNT, optional) - POS limit.

### CARD_PROVIDER (enum)

Card provider.

#### Members

- ERSTE_BANK
- EXTERNAL

### CARD_STATE (enum)

Card states.

#### Members

- ACTIVE - Card is active.
- INACTIVE - Card is issued but not activated yet.
- LOCKED - Card is locked.

### CARD_TYPE (enum)

Card type.

#### Members

- CREDIT - Credit card.
- BANK_CARD - Debit card.

### CHANNEL_ID (enum)

Channel Id

#### Members

- NET_BANKING
- ATM
- MOBILE_BANKING
- BRANCH
- POST_OFFICE
- CALL_CENTRE
- VIDEO_BANKING
- UNKNOWN

### CHANNEL_ID_LIMIT (enum)

Limit channel id enum.

#### Members

- NET_BANKING
- MOBILE_BANKING
- UNKNOWN

### CODETABLE (object)

Codetable items object.

#### Properties

- key: 0710 (string, required) - Codetable item key.
- values (array[string], required) - Array of string values which are set to given key.
    - Items
        - Česká národní banka
        - `Česká národní banka , se sídlem: Na Příkopě 28, Praha 1, PSČ 115 03`

### CONFIRMATION_EMAIL (object)

Object which is used to properly send confirmation email.

#### Properties

- email: john.doe@test.com (EMAIL, required) - Email address where confirmation should be sent.
- language: cs (LANGUAGE, required) - Language of the confirmation email.

### CONFIRMATION_EMAILS (object)

List of confirmation emails.

#### Properties

- confirmations (array[CONFIRMATION_EMAIL], optional) - List of confirmation emails which will be sent.

### COUNTRYCODE (enum)

Country codes are in **ISO 3166-1** format, subtype ALPHA-2. This means two letters in uppercase.

#### Sample

- CZ

### CURRENCY (string)

Currency is in **ISO 4217** format (3 capital letters code).

#### Sample

- CZK

### DATE (string)

Date format without time (yyyy-MM-dd).

#### Sample

- `2011-07-14`

### DATETIME (string)

Dates are returned as **ISO 8601** dates and are used for both dates, times and timestamps. Using timezones is mandatory.

All dates returned by the API are in the corresponding time zone a record/data object is for. For Austrian dates (e.g. transfer timestamps) this means Central European Standard Time (CEST). Austria is UTC+1 in winter and UTC+2 in summer, so times usually read `+0100` or `+0200`. Should, at a later time, the API be applied to other countries, the corresponding time zone for a given data object has to be used.

**Note:** Returning dates as UTC is discouraged because a client would not know what the intended target time zone is that a date has to be displayed in (e.g. an Austrian transaction still has to be shown with the correct Austrian execution time, even if the caller is using the API from e.g. the USA.)

All dates provided by the client (e.g. a date for a future payment order) can be in any timezone. They will be converted to CEST on the server and this CEST version is used for all further processing - including storing or returning this now converted date to the client.

#### Sample

- `2011-07-14T19:43:37+0100`

### DIRECT_DEBIT (object)

Direct Debit.

#### Properties

- number: 2 (string, required) - Order number of the direct debit approval. It is unique per approval. Several versions of an approval have the same order number.
- type: DIRECT_DEBIT (DIRECT_DEBIT_TYPE, required) - Type of the approval. Possible values are DIRECT_DEBIT or SIPO.
- receiver (ACCOUNTNO, required) - Account number of the receiver.
- alias (string, optional) - Approval name chosen by the user.
- limit (AMOUNT, optional) - Limit for the single direct debit.
- limitSum (AMOUNT, optional) - Limit for the whole period.
- limitNumber: 5 (number, required) - Limit for the number of direct debits for the period.
- startDate: `2011-07-14` (DATE, required) - Beginning date for the approval.
- endDate: `2013-07-14` (DATE, optional) - End date for the approval.
- symbols (SYMBOLS, required) - Symbols structure for VS, SS, KS.
- dueMonth: 1 (number, optional) - The order of the month in the period when direct debits are acceptable. This must he null for period at least one month.
- dayFrom: 1 (number, optional) - The number of the day in month. From this day direct debits are acceptable. This can be not null only for period longer then one month.
- dayTo: 10 (number, optional) - The number of the day in month. To this day direct debits are acceptable.
- versionId: 1 (number, required) - Unique identifier for version of the direct debit approval.
- versionValidityDate: `2012-01-08` (DATE, required) - Date when the version comes into use.
- periodicity: 1 (number, required) - Number of period cycles in one period.
- periodCycle: MONTHLY (DIRECT_DEBIT_PERIOD_CYCLE, required) - Unit of the period cycle. Possible values are HALFYEARLY, MONTHLY, QUARTERLY, YEARLY, DAILY, WEEKLY, OTHER.

### DIRECT_DEBIT_PERIOD_CYCLE (enum)

Standing order execution interval.

#### Members

- DAILY
- WEEKLY
- Include FREQUENCY
- OTHER

### DIRECT_DEBIT_TYPE (enum)

Enumeration of possible valuer for direct debit type.

#### Members

- DIRECT_DEBIT - Direct debit.
- SIPO - SIPO.

### EDITABLE_TRANSACTION (object)

Object contains fields of the transaction which are editable by client.

#### Properties

- id: E5CAB598638E8AD0A (string, required) - Transaction identifier.
- note: New client's personal note for transaction (string, optional) - Client's transaction note. If left empty then existing note is deleted.
- flags (array[string], optional) - Editable transaction flags.
    - Sample
        - hasStar
    - Items
        - hasStar - Indication that transaction is marked as important for client.
        - hasNote - Not editable flag. But if note is saved/deleted then this flag would appear/disappear.

### EMAIL (string)

Email address. Validated against pattern: ".+@(.+)$"

#### Sample

- john.doe@test.com

### FREQUENCY (enum)

Enumeration with possible frequencies.

#### Members

- MONTHLY - Monthly frequency.
- QUARTERLY - Quarterly frequency.
- HALFYEARLY - Halfyearly frequency.
- YEARLY - Yearly frequency.

### IBAN (string)

International bank account number. Based on **ISO 13616-1:2007**. A valid IBAN consists of all three of the following components: 

* Country Code (2 capital letters)
* Check digits (2 digits)
* BBAN (local Basic Bank Account Number consisting of 1-30 characters)

#### Sample

- CZ0708000000001019382023

### INSURANCE (object)

Insurance object.

#### Properties

- id: 0000000000519638 (string, required) - Unique product identifier.
- type: LIFE (INSURANCE_TYPE, required) - Product type of insurance.
- product: 12 (string, required) - Code of the product.
- productI18N: Životní pojištění (string, required) - Name of the product.
- description (string, optional) - Additional description of insurance product, additional charges, index appliet to insurance contract.
- alias: Moje životko (string, optional) - `User-specific` alias of the contract.
- insurancePolicyHolder: Kamper Manfred (string, required) - The primary holder of the specific insurance contract.
- policyNumber: 12354821556535445 (string, required) - Agreement number.
- status: ACTIVE (INSURANCE_STATUS, required) - Insurance status.
- life (INSURANCE_LIFE, optional) - Life insurance.

### INSURANCE_LIFE (object)

Insurance life.

#### Properties

- premiumPaymentInterval: MONTHLY (INSURANCE_LIFE_PREMIUM_PAYMENT_INTERVAL, required) - Insurance premium payment interval frequency.
- premium (AMOUNT, required) -  The agreed premium for the specific insurance.
- contractEndDate: `2015-02-28` (DATE, required) - The agreed end date of the insurance contract.
- contractStartDate: `2011-02-28` (DATE, required) - The contract start date.
- insuredAmount (AMOUNT, required) - The agreed amount insured or risk covered by the insurance.
- currentCapitalValue (AMOUNT, required) - Capital value of the insurance. Amount of money in saving part of the insurance.
- expectedPayoffAmount (AMOUNT, optional) - Expected payoff amount value in the end of contract.

### INSURANCE_LIFE_PREMIUM_PAYMENT_INTERVAL (enum)

Insurance life premium payment interval frequency.

#### Members

- ONCE
- Include FREQUENCY
- UNKNOWN

### INSURANCE_STATUS (enum)

Insurance status.

#### Members

- ACTIVE
- CLOSED

### INSURANCE_TYPE (enum)

Insurance type.

#### Members

- LIFE

### LANGUAGE (enum)

List of possible languages used by netbanking api.

#### Members

- cs - Czech
- en - English

### LOAN_ACCOUNT_DATA (object)

Object holding specific data for loans

#### Properties

- interestRateToDate: `2016-07-14` (DATE, optional) - For mortgages this is the date of interest rate validity.
- loanAmount (AMOUNT, optional) - For loans this is contracted value of the loan.
- maturityDate: `2026-11-18` (DATE, optional) - For mortgages this is its maturity date.
- remainingLoanAmount (AMOUNT, optional) - For loans this is remaining amount for utilization. Basically this is disposable balance for loans.
- drawdownToDate: `2017-11-17` (DATE, optional) - Last date when you can use money which are available.
- drawdownAmount (AMOUNT, optional) - For mortgages this is actual drawdown amount.
- outstandingDebt (AMOUNT, optional) - Value of the principal. Value which should be payed back to bank.
- `cz-lumpsumRepayment` (AMOUNT, optional) - Amount of money to onetime repay whole loan.
- installmentFrequency (FREQUENCY, optional) - Frequency of the repayment.
- installmentDay (number, optional) - Day of the month when repayment should be payed (f.e. 22)
- nextRateAmount (AMOUNT, optional) - Repayment amount.
- nextRateDate: `2015-05-25` (DATE, optional) - Next date of the repayment (for loans).

### LOAN_ACCOUNT_LIGHT_DATA (object)

Object holding specific data for loans (Account Light)

#### Properties

- loanAmount (AMOUNT, optional) - For loans this is contracted value of the loan.
- outstandingDebt (AMOUNT, optional) - Value of the principal. Value which should be payed back to bank.
- installmentFrequency (FREQUENCY, optional) - Frequency of the repayment.
- nextRateAmount (AMOUNT, optional) - Repayment amount.

### MESSAGE (object)

Message object.

#### Properties

- id: 131371121204 (string, required) - Message identifier.
- from: Internet banking (string, required) - Name of the message sender.
- subject: Planned service upgrade (string, required) - Message subject.
- date: `2013-05-17T00:00:00+02:00` (DATETIME, required) - Date when message was created/generated.
- body: There is service outage planed today. (string, required) - Body of the message.
- flags (array[string], optional) - Array of flags.
    - Sample
        - unread
        - warning
    - Items
        - mandatory - Flag for mandatory message.
        - unread - This message is unread.
        - unsigned - This message is unsigned yet.
        - warning - Type of the message is warning.
        - info - Type of the message is information.

### OWN_TRANSFER_RECEIVER (object)

Represents identification of the account which could be used as own transfer receiver.

#### Properties

- id: E7AA56C85D1B687A (string, required) - Account identifier.
- accountno (ACCOUNTNO_FULL, required) - Account number.

### PAGINATION (object)

Object which contains data with pagination information.

#### Properties

- pageNumber: 0 (number, optional) - Returned page number.
- pageCount: 1 (number, optional) - Number of pages calculated from page size and number of records.
- pageSize: 10 (number, optional) - The page size used. Either the number supplied by the client is returned here, or in case there was a limit and the valie is now smaller than the requested one, the actual size is given.
- nextPage: 1 (number, optional) - Page number of following page (provided only when exist)

### PAYMENT_BOOKING_DATE_REQUEST (object)

Payment booking date.

#### Properties

- receiver (ACCOUNTNO_FULL, required) - Receiver's account number.
- priority: STANDARD (PAYMENT_BOOKING_DATE_PRIORITY, optional) - Payment booking date priority.

### PAYMENT_BOOKING_DATE_PRIORITY (enum)

Payment booking date priority.

#### Members

- STANDARD
- URGENT

### PAYMENT_LIMIT (object)

Payment limit object.

#### Properties

- authorizationType: TAC (AUTHORIZATION_TYPE, required) - Authorization method type for which is limit defined.
- channelId: NET_BANKING (CHANNEL_ID_LIMIT, required) - ID of the channel for which is limit defined.
- applicationId: GEORGE (APPLICATION_ID_LIMIT, required) - ID of the application for which is limit defined.
- remainingAmount (AMOUNT, required) - Remaining Daily amount which can be transfered using particular authorization method and channel.

### PAYMENT_ORDER_CATEGORY (enum)

Payment order category

#### Members

- DOMESTIC
- OWN_TRANSFER
- INTERNATIONAL
- SEPA

### PAYMENT_ORDER_ENTRY (object)

Payment order entry object

#### Properties

- orderCategory: DOMESTIC (PAYMENT_ORDER_CATEGORY, required) - Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy).
- orderType: PAYMENT_OUT (PAYMENT_ORDER_TYPE, required) - Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE.
- senderName: George Sporitelni (string, required) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, required) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- cz-skipCnbPrefixValidation: true (boolean, optional) - Indicates if there is validation of mandatory prefix for payments to central bank.
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - urgent
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.

### PAYMENT_ORDER_ENTRY_FULL (object)

Complete payment order entry object, returned in response of POST and PUT call

#### Properties

- id: 84521478awd85441 (string, required) - Internal identifier of payment order. Note that after signing of the order the id could change.
- referenceId: 785485694578 (string, optional) - Transaction reference ID provided by BE when payment order was executed.
- hash: d1bc8d3ba4afc7e109612cb (string, optional) - Hash value calculated using common relevant payment order attributes to ensure the same unchanged logical object (payment order) every time during authorization signing process.
- orderCategory: DOMESTIC (PAYMENT_ORDER_CATEGORY, required) - Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy).
- orderType: PAYMENT_OUT (PAYMENT_ORDER_TYPE, required) - Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE.
- senderName: George Sporitelni (string, required) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, required) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- executionDate: `2014-02-12T00:00:00+02:00` (string, required) - Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).
- expirationDate: `2014-02-15T00:00:00+02:00` (string, optional) - Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.
- modificationDate: `2014-02-12T00:00:00+02:00` (string, optional) - Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).
- cz-description: mobilni platba (string, optional) - Description of payment order, transaction type.
- state: OPEN (PAYMENT_ORDER_STATE, required) - State of payment order presented to user on FE, value is mapped based on provided BE technical states.
- stateDetail: OPN (PAYMENT_ORDER_STATE_DETAIL, required) - State detail of payment order provided based on BE technical states. Mapping between technical BE states and predefined FE detail states should be specified by local API. Value is used in FE to display status description.
- stateOk: true (boolean, required) - Indicator whether state (stateDetail value) of payment order is OK from user point of view.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- cz-skipCnbPrefixValidation: true (boolean, optional) - Indicates if there is validation of mandatory prefix for payments to central bank.
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - urgent
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.

### PAYMENT_ORDER_FULL (object)

Complete payment order object

#### Properties

- id: 84521478awd85441 (string, required) - Internal identifier of payment order. Note that after signing of the order the id could change.
- referenceId: 785485694578 (string, optional) - Transaction reference ID provided by BE when payment order was executed.
- hash: d1bc8d3ba4afc7e109612cb (string, optional) - Hash value calculated using common relevant payment order attributes to ensure the same unchanged logical object (payment order) every time during authorization signing process.
- orderCategory: DOMESTIC (PAYMENT_ORDER_CATEGORY, required) - Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy).
- orderType: PAYMENT_OUT (PAYMENT_ORDER_TYPE, required) - Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE.
- senderName: George Sporitelni (string, optional) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, optional) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- executionDate: `2014-02-12T00:00:00+02:00` (string, required) - Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).
- expirationDate: `2014-02-15T00:00:00+02:00` (string, optional) - Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.
- modificationDate: `2014-02-12T00:00:00+02:00` (string, optional) - Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).
- cz-description: mobilni platba (string, optional) - Description of payment order, transaction type.
- state: OPEN (PAYMENT_ORDER_STATE, required) - State of payment order presented to user on FE, value is mapped based on provided BE technical states.
- stateDetail: OPN (PAYMENT_ORDER_STATE_DETAIL, required) - State detail of payment order provided based on BE technical states. Mapping between technical BE states and predefined FE detail states should be specified by local API. Value is used in FE to display status description.
- stateOk: true (boolean, required) - Indicator whether state (stateDetail value) of payment order is OK from user point of view.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- cz-skipCnbPrefixValidation: true (boolean, optional) - Indicates if there is validation of mandatory prefix for payments to central bank.
- receiverAddress: Jeremenkova 32 (array[string], optional) - Receiver's address. Array of 3x text fields with max 35 characters each. First text - Street, Second text - ZIP code and City, Third text - Country code, name. (Used only for International payments).
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - deletable
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.
        - editable - Flag indicating if payment order can be edited by client.
        - deletable - Flag indicating if payment order can be deleted by client.
        - cancelable - Flag indicating if future dated (already signed) payment order can be canceled by client.
        - signable - Flag indicating if payment order can be signed by client.
        - redoNotPossible - Flag indicating if payment order can be re-done.

### PAYMENT_ORDER_STATE (enum)

Payment order state

#### Members

- OPEN - Order state in an OpenState (OPN).
- SPOOLED - Order state in a SpoolState (NGD, TRM, PNR, INB).
- CANCELLED - Order state in a CancelState (STO).
- CLOSED - Order state in a ClosedState (FIH, FIN, ABG).
- DELETED - Order state in a DeleteState (order with deleted flag from BE).

### PAYMENT_ORDER_STATE_DETAIL (enum)

Payment order state detail

#### Members

- OPN - Open - not signed yet (stateOk=true).
- STO - Cancelled - storno (stateOk=false).
- NGD - Insufficient funds - no disposable balance (stateOk=false).
- TRM - Marked as scheduled payment (stateOk=true).
- FUS - Unknown - finalized unknown (stateOk=false).
- PNR - Payment Order from night register (stateOk=true).
- FIN - Forwarded - finalized neutral (stateOk=true).
- FIH - Forwarded - finalized today (current bankday).
- ABG - Rejected - rejected, ask advisor (stateOk=true).
- INB - Being processed - in process (stateOk=true).

### PAYMENT_ORDER_TYPE (enum)

Payment order type

#### Members

- PAYMENT_OUT
- DIRECT_DEBIT_IN

### PENSION (object)

Pension object.

#### Properties

- alias: moje penzijko (string, optional) - User defined account name.
- signingDate: `2013-06-12` (DATE, optional) - Signing date.
- validFrom: `2013-08-01` (DATE, optional) - Valid from date.
- validTo: `2019-08-01` (DATE, optional) - Valid to date.
- id: 1nw59tj98542vgt51 (string, required) - Pension identifier.
- agreementNumber: 123456789852 (string, required) - Agreement number.
- status: ACTIVE (PENSION_STATUS, required) - Status of the contract.
- productAccount (PENSION_PRODUCT_ACCOUNT, required) - Pension product account.
- productI18N: Penzijni sporeni (string, required) - Product description.
- product: 456 (string, required) - Product code.
- birthNumber: 9005087056 (string, required) - Birth number.
- paidBenefits (AMOUNT, required) - Paid benefits amount.
- strategy (PENSION_STRATEGY, optional) - Pension strategy.
- pensionAgreed (PENSION_AGREED, optional) - Pension agreed.
- savingTime (PENSION_SAVING_TIME, optional) - Pension saving time.
- contribution (PENSION_CONTRIBUTION, optional) - Pension contribution.
- supplementary (PENSION_SUPPLEMENTARY, optional) - Pension supplementary.
- persons (array[PENSION_PERSON], optional) - Array of persons.

### PENSION_AGREED (object)

Pension agreed.

#### Properties

- oldAge: true (boolean, optional) - Old-age pension.
- disability: false (boolean, optional) - Disability pension.
- earlyRetirement: 13 (number, optional) - Early-retirement pension.

### PENSION_CONTRIBUTION (object)

Pension contribution.

#### Properties

- employer: true (boolean, required) - Employer contribution.
- participantAmount (AMOUNT, required) - Participant amount.
- otherPersonAmount (AMOUNT, required) - Other person amount.

### PENSION_PERSON (object)

Person object in Pension.

#### Properties

- firstName: Franc (string, required) - Designed person first name.
- lastName: BeeOne (string, required) - Designed person last name.
- birthDate: `1950-06-30` (DATE, required) - Birth date.
- birthNumber: 500630192 (string, optional) - Birth number.
- address (ADDRESS, optional) - Address.
- proportion: 100 (number, required) - Proportion.
- contact: franc@yahoo.com (string, optional) - Contact.
- contactDetail: 2nd door from the left (string, optional) - Contact detail.
- entitlement: survival pension and termination settlement (string, required) - Entitlement.

### PENSION_PRODUCT_ACCOUNT (object)

Pension product account.

#### Properties

- amount (AMOUNT, required) - Account balance.
- date: `2015-01-18` (DATE, required) - Date balance.

### PENSION_SAVING_TIME (object)

Pension saving time.

#### Properties

- supplementary: 51 (number, optional) - Supplementary pension saving time.
- oldAge: 51 (number, optional) - Old-age pension saving time.
- earlyRetirement: 51 (number, optional) - Early retirement saving time.

### PENSION_STATUS (enum)

Profile contact type enum.

#### Members

- ACTIVE
- TERMINATED
- PENSION_PAYMENT
- INTERRUPTED
- PAYMENTS_SUSPENDED
- PAYMENTS_DEFFERED
- SETTLED
- REPEALED
- NEGOTIATED

### PENSION_STRATEGY (object)

Pension strategy.

#### Properties

- conservative: 10 (number, optional) - Conservative strategy.
- balanced: 80 (number, optional) - Balanced strategy.
- dynamic: 10 (number, optional) - Dynamic strategy.
- stateBonds: 0 (number, optional) - State bonds strategy.

### PENSION_SUPPLEMENTARY (object)

Pension supplementary.

#### Properties

- email: franz@beeone.cz (string, optional) - Email communication.
- sms: 778525968 (string, optional) - SMS communication.
- maxService: true (boolean, optional) - Maximum service.
- optService: true (boolean, optional) - Optimum service.

### PROFILE (object)

Profile object.

#### Properties

- firstname: Jan (string, required) - User's first name.
- lastname: Novak (string, required) - user's last name.
- customerId: ABC123 (string, optional) - Internal ID of the customer (CLUID).
- salutation: Jane (string, optional) - Customer name used for salutation.
- instituteId: 1 (number, required) - Number of institute.
- marketingInfoAcceptance: ACCEPTED (PROFILE_MARKETING_INFO_ACCEPTANCE, required) - Has the customer accepted marketing info receiving?
- gender: MALE (PROFILE_GENDER, required) - User's gender.
- lastlogin: `2013-11-28T16:18:10Z` (DATETIME, optional) - Date and time of the last login of customer.

### PROFILE_CONTACT (object)

Profile contact object.

#### Properties

- id: postaladdresspermanent (string, required) - Unique ID of contact information.
- type: ADDRESS (PROFILE_CONTACT_TYPE, required) - Type of contact.
- flags (array[string], optional) - Array of contact flags.
    - Default
        - mainContact
    - Items
        - mainContact
- One Of
    - address (PROFILE_CONTACT_ADDRESS) - Address object if contact type is ADDRESS.
    - phone (PROFILE_CONTACT_PHONE) - Phone object if contact type is PHONE. 
    - email (PROFILE_CONTACT_EMAIL) - Email object if contact type is EMAIL.

### PROFILE_CONTACT_ADDRESS (object)

Profile contact address object.

#### Properties

- type: PERMANENT_RESIDENCE (PROFILE_CONTACT_ADDRESS_TYPE, required) - Address type.
- typeI18N: Trvalé bydliště (string, optional) - Localized name of address type.
- description (string, optional) - More detailed description of address, company name or department
- street: V Celnici (string, required) - Address street.
- streetNumber: 1985 (string, optional) - Address house number.
- buildingApartment: 85 (string, optional) - Address land registry number.
- zipCode: 15000 (string, required) - Address ZIP code.
- city: Praha (string, required) - Address city.
- country: CZ (COUNTRYCODE, required) - Country code.

### PROFILE_CONTACT_ADDRESS_TYPE (enum)

Profile contact address type enum.

#### Default

- PERMANENT_RESIDENCE

#### Members

- PERMANENT_RESIDENCE - For permanent residence address type.

### PROFILE_CONTACT_EMAIL (object)

Profile contact email object.

#### Properties

- email: franz@george.cz (EMAIL, required) - Contact email address.
- type: PRIVATE (PROFILE_CONTACT_EMAIL_TYPE, required) - Email type.
- typeI18N: Osobní (string, optional) - Localized name of email type.

### PROFILE_CONTACT_EMAIL_TYPE (enum)

Profile contact email type enum.

#### Default

- PRIVATE

#### Members

- PRIVATE - For private type of email.

### PROFILE_CONTACT_PHONE (object)

Profile contact phone object.

#### Properties

- type: PRIVATE (PROFILE_CONTACT_PHONE_TYPE, required) - Phone type.
- typeI18N: Osobní (string, optional) - Localized name of phone type.
- countryCallingCode: 0420 (string, optional) - Country calling code as international phone number prefix. `E.g.: "0043" or "+43", "00420" or "+420", "00421" or "+421"`
- phoneNumber: 776123789 (string, required) - Contact phone number.

### PROFILE_CONTACT_PHONE_TYPE (enum)

Profile contact phone type enum.

#### Default

- PRIVATE

#### Members

- PRIVATE - For private type of phone.

### PROFILE_CONTACT_TYPE (enum)

Profile contact type enum.

#### Members

- ADDRESS - For address contact type.
- PHONE - For phone contact type.
- EMAIL - For email contact type.

### PROFILE_GENDER (enum)

Profile gender.

#### Members

- MALE
- FEMALE
- UNKNOWN

### PROFILE_LOGIN_INFO (object)

Profile login info.

#### Properties

- lastlogin (array)
    - channel: GEORGE (string, required) - Channel/Application identification for particular login.
    - lastlogin: `2014-01-23T11:38:52Z` (DATETIME, required) - Date of the last login.

### PROFILE_MARKETING_INFO_ACCEPTANCE (enum)

Profile marketing info acceptance.

#### Members

- ACCEPTED
- NOT_ACCEPTED
- UNKNOWN

### RESERVATION (object)

Object represents account reservation.

#### Properties

- type (string, optional) - Type of reservation.
- transactionDate: `2015-09-18T21:43:53Z` (DATETIME, required) - Transaction date and time.
- expirationDate: `2015-09-25T21:43:53Z` (DATETIME, optional) - Reservation expiration date.
- merchantName: Pizzeria Grosseto (string, optional) - Merchant Name / ATM.
- merchantAddress: Antala Staška 32, Praha (string, optional) - Merchant address.
- description: Platba kartou (string, required) - Reservation description, additional info.
- amount (AMOUNT, optional) - Amount in account currency.
- amountSender (AMOUNT, required) - Amount in transaction currency.

### SAVING_ACCOUNT_DATA (object)

Object which contains specific data for savings.

#### Properties

- interestRateOverLimit: 1.2 (number, optional) - In case of interest rate bands this is the interest rate which applies to value over limit.
- interestRateLimit (AMOUNT, optional) - Limit amount for basic credit interest rate used for some saving accounts.
- `cz-bonusInterestRate`: 0.6 (number, optional) - Bonus interest rates which can be gained if certain conditions are met.
- savingGoal: HOUSING (SAVING_GOAL, optional) - Saving purpose code (for some savings accounts).
- targetAmount (AMOUNT, optional) - For some savings accounts this is target amount of the saving.
- minimumBalance (AMOUNT, optional) - Minimum balance for some current and savings accounts.

### SAVING_GOAL (enum)

Enumeration of the possible saving goals for some saving accounts.

#### Members

- ELECTRONICS - Electronics
- WHITE_GOODS - White goods
- HOLIDAYS - Holidays
- SPORT - Sport equipment
- FURNITURE - Furniture
- CARS - Cars and accessories
- HOBBIES - Hobbies and garden
- GIFTS - Gifts and parties
- HEALTH - Health
- STUDIES - Studies
- HOUSING - Housing
- PERSONAL - Personal

### SECURITY (object)

Security object.

#### Properties

- id: 2f03203727596531303d17 (string, required) - Unique product identifier.
- accountno: 20031692500 (string, required) - "Account number" of security portfolio. The MUIN identifier.
- alias: Maximilian Mustermann TEST (string, optional) - User defined alias for security portfolio.
- description: Majetkový účet (string, required) - Additional information like account name, name of principal account holder.
- balance (AMOUNT, required) - Account balance value.
- subSecAccounts (array[SECURITY_SUB_SEC_ACCOUNT], optional) - Array of securities sub accounts.

### SECURITY_SUB_SEC_ACCOUNT (object)

Security sub account object.

#### Properties

- id: 20031692500 (string, required) - Sub securities internal identifier.
- titles (array[SECURITY_SUB_SEC_ACCOUNT_TITLE], optional) - Array of sub securities titles.

### SECURITY_SUB_SEC_ACCOUNT_TITLE (object)

Security sub account title object.

#### Properties

- title: RORENTO (string, required) - Title name of securitues investment.
- isin: ANN757371433 (string, required) - International Securities Identification Number (ISIN).
- numberOfShares: 498 (number, required) - Number of securities/shares.
- lastPrice (AMOUNT, required) - Last price of securities title.
- lastPriceDate: `2013-11-28T16:18:10Z` (DATETIME, required) - Date of securities last price evaluation.
- marketValue (AMOUNT, required) - Market value of securities title.
- securityType: UNKNOWN (enum, required) - Security product type.
    - Default
        - UNKNOWN
    - Members
        - UNKNOWN
- productGroup: UNKNOWN (enum, required) - Security product group.
    - Default
        - UNKNOWN
    - Members
        - UNKNOWN
- securityIndication: Reference quote (enum, required) - 
    - Default
        - Reference quote
    - Members
        - Reference quote

### SERVICE_ICON_GROUP (enum)

Service Icon Group.

#### Default

- DEFAULT

#### Members

- DEFAULT

### SIGN_AUTHORIZATION_TYPE (enum)

Authorization methods.

#### Default

- TAC

#### Members

- NONE - validation of user response as confirmation (e.g. confirm button click)
- TAC - validation of user response as randomly generated number/code sent to user personal device via SMS
- CASE\_MOBILE - validation of user response using mobile application

### SIGN_CHALLENGE_PARAMETERS (object)

Object for array of challenge parameters.

#### Properties

- challengeParameters (array, optional) - List of additional challenge parameters.
    - (object)
        - nameI18N: Suma (string, required) - Localized name of parameter.
        - value: 12459 (string, required) - Value of parameter.

### SIGN_IMMUTABLE_GET_RESPONSE (object)

Object for response of immutable GET signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- Include SIGN_SCENARIOS
- Include SIGNINFO

### SIGN_IMMUTABLE_POST_REQUEST (object)

Object for request of immutable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.

### SIGN_IMMUTABLE_POST_RESPONSE (object)

Object for response of immutable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- qrImage: `iVBORw0KGgoA...` (string, optional) - QR code in BASE64, only provided for Mobile authorization.
- challengeCode: L2DD789D (string, optional) - Challenge Code used instead of QR code in Mobile app.
- Include SIGN_CHALLENGE_PARAMETERS
- poll (SIGN_POLL_INFORMATION, optional) - Polling information for the requested order and selected Mobile authorization.
- Include SIGNINFO

### SIGN_IMMUTABLE_PUT_REQUEST (object)

Object for request of immutable PUT signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- tac: 12345 (string, optional) - In TAC mode, this field contains OTP from SMS.
- challengeOTP: 54321 (string, optional) - In MOBILE_CASE mode, this field contains OTP from CASEMobile, in other cases its OTP for any challenge request code.

### SIGN_IMMUTABLE_PUT_RESPONSE (object)

Object for response of immutable PUT signing method.

#### Properties

- Include SIGNINFO_DONE_STATE

### SIGN_MANAGEABLE_GET_RESPONSE (object)

Object for response of manageable GET signing method.

#### Properties

- hash: d1bc8d3ba4afc7e109612cb (string, required) - Must not be calculated using internal fields and be the same hash for the same unchanged logical object every time.
- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- Include SIGN_SCENARIOS
- state: OPEN (SIGN_STATE, required) - State of signing process, possible values: OPEN - Order should be signed. DONE - Order is already signed. NONE - Order should been executed without signing.

### SIGN_MANAGEABLE_POST_REQUEST (object)

Object for request of manageable POST signing method.

#### Properties

- hash: d1bc8d3ba4afc7e109612cb (string, optional) - Optional hash from previous GET response for the same unchanged logical object every time.
- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.

### SIGN_MANAGEABLE_POST_RESPONSE (object)

Object for response of manageable POST signing method.

#### Properties

- hash: d1bc8d3ba4afc7e109612cb (string, required) - Must not be calculated using internal fields and be the same hash for the same unchanged logical object every time.
- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- qrImage: `iVBORw0KGgoA...` (string, optional) - QR code in BASE64, only provided for Mobile authorization.
- challengeCode: L2DD789D (string, optional) - Challenge Code used instead of QR code in Mobile app.
- Include SIGN_CHALLENGE_PARAMETERS
- poll (SIGN_POLL_INFORMATION, optional) - Polling information for the requested order and selected Mobile authorization.
- state: OPEN (SIGN_STATE, required) - State of signing process, possible values: OPEN - Order should be signed. DONE - Order is already signed. NONE - Order should been executed without signing.

### SIGN_MANAGEABLE_PUT_REQUEST (object)

Object for request of manageable PUT signing method.

#### Properties

- hash: d1bc8d3ba4afc7e109612cb (string, required) - The hash value obtained by a previous POST `*/sign` call response. This will be used to verify if the signing is done for the yet unmodified resource.
- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values TAC), method have to be listed in scenarios as the first one in case of sign chain.
- tac: 12345 (string, required) - In TAC mode, this field contains OTP from SMS.
- challengeOTP: 54321 (string, optional) - In MOBILE_CASE mode, this field contains OTP from CASEMobile, in other cases its OTP for any challenge request code.

### SIGN_MANAGEABLE_PUT_RESPONSE (object)

Object for response of manageable PUT signing method.

#### Properties

- state: DONE (SIGN_STATE, required) - State of signing process, possible values: OPEN - Order should be signed. DONE - Order is already signed. NONE - Order should been executed without signing.
- `cz-skipSenderReceiverNameBypassing`: false (boolean, required) - This is George specific flag. It is indication for George whether sender and receiver name should be send to George backend or not.

### SIGN_POLLING_RESPONSE (object)

Object for polling resource response.

#### Properties

- state: DONE (SIGN_STATE_POLLING, required) - State of the CASEMobile signing process (values: PROCESSING, DONE, FALLBACK - alternative authorization on FE should be activated).
- pollInterval: 5000 (number, required) - Polling interval in [ms].

### SIGN_POLL_INFORMATION (object)

Object for poll information using in signing.

#### Properties

- url: `http://www.csast.csas.cz/webapi/api/v2/sign/poll/46879` (string, required) - Polling URL to retrieve state of the sign process (typically if is sign done by Mobile app on smartphone).
- id: 46879 (number, required) - Polling ID generated for Mobile authorization using PUSH notification to user device.
- interval: 5000 (number, required) - Polling interval in [ms].

### SIGN_SCENARIOS (object)

Authorization scenarios.

#### Properties

- scenarios (array, optional) - Array of possible more signing scenarios (list of scenarios and their methods in predefined order). If there is only one scenario with one step then scenarios array isn't returned and only authorizationType property is used.
    - (array)
        - TAC (string)

### SIGNINFO (object)

Object which contains information needed to sign changes which where made by current action.

#### Properties

- signInfo (object,required) - Object which contains information needed to sign changes which were made by current action.
    - state: OPEN (SIGN_STATE, required) - Flag which controls whether signing is needed for current change.
    - signId: fde367favcz89fra (string, optional) - Identifier of the change which should be signed. Available only if state is "OPEN".

### SIGNINFO_DONE_STATE (object)

Object which contains information needed to sign changes which where made by current action.

#### Properties

- signInfo (object,required) - Object which contains information needed to sign changes which were made by current action.
    - state: DONE (SIGN_STATE, required) - Flag which controls whether signing is needed for current change.
    - signId: fde367favcz89fra (string, optional) - Identifier of the change which should be signed. Available only if state is "OPEN".

### SIGN_STATE (enum)

Enum of sign states.

#### Members

- OPEN - Change should be signed.
- NONE - Change has been executed without signing.

### SIGN_STATE_POLLING (enum)

Enum of sign states polling.

### Sample

- DONE

#### Members

- PROCESSING
- DONE
- FALLBACK

### STANDING_ORDER_ENTRY (object)

Standing order entry. Only subset of STANDING_ORDER_FULL object

#### Properties

- type: STANDING_ORDER (STANDING_ORDER_TYPE, required) - Type of order. Possible values: STANDING_ORDER.
- alias (string, optional) - Alias name of standing order entered by user for his better orientation in standing order list.
- receiverName: Greenpeace (string, optional) - Name of the beneficiary.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver.
- senderReference: pro prijemce (string, optional) - An external reference identification of the payer.
- amount (AMOUNT, required) - Standing order amount.
- nextExecutionDate: `2015-04-09` (string, required) - Date when the next order will be processed.
- lastExecutionDate: `2016-04-09` (string, optional) - Date when the last order will be processed. Only applicable in combination with executionMode UNTIL_DATE
- executionMode: UNTIL_DATE (STANDING_ORDER_EXECUTION_MODE, required) - Execution mode. Possible values: UNTIL_DATE, UNTIL_CANCELLATION, AFTER_MAX_ITERATION_EXCEEDED or AFTER_MAX_AMOUNT_EXCEEDED.
- executionDueMode: DUE_LAST_DAY_OF_MONTH (STANDING_ORDER_EXECUTION_DUE_MODE, required) - Execution due mode. Possible values: DUE_DAY_OF_MONTH or DUE_LAST_DAY_OF_MONTH.
- executionInterval: MONTHLY (STANDING_ORDER_EXECUTION_INTERVAL, required) - Execution interval. Possible values: DAILY, WEEKLY, MONTHLY, BI_MONTHLY QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR. **NOTE** that only DAILY, MONTHLY, QUARTERLY, HALFYEARLY and YEARLY intervals are supported when entering new standing order. Other intervals are only for display of existing standing orders.
- intervalDueDay: 5 (number, optional) - Due day of month, day of month when the standing order will be reqularly executed.
- intervalDueMonth: 2 (number, optional) - Due date month in execution interval of standing order processing. Possible values: N/A for DAILY, WEEKLY, MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- flags (array[string], optional) - Array of flags for messages.
    - Sample
        - editable
    - Items
        - editable - Flag indicating if standing order can be edited by client.
        - deletable - Flag indicating if standing order can be deleted by client.

### STANDING_ORDER_EXECUTION_DUE_MODE (enum)

Standing order execution due mode.

#### Members

- DUE_DAY_OF_MONTH - Due day of a month
- DUE_LAST_DAY_OF_MONTH - Due last day of a month

### STANDING_ORDER_EXECUTION_INTERVAL (enum)

Standing order execution interval.

#### Members

- DAILY
- WEEKLY
- BI_MONTHLY
- Include FREQUENCY
- IRREGULAR

### STANDING_ORDER_EXECUTION_MODE (enum)

Standing order execution mode.

#### Members

- UNTIL_DATE - Last execution date is already preset.
- UNTIL_CANCELLATION - Until cancellation. Last execution date not set.
- AFTER_MAX_AMOUNT_EXCEEDED - Until the predefined maximum amount to be transferred using the standing order is exceeded.
- AFTER_MAX_ITERATION_EXCEEDED - Until the predefined number of iterations is exceeded.

### STANDING_ORDER_FULL (object)

Full set of standing order atributes

#### Properties

- standingOrder (STANDING_ORDER_ENTRY, required) - Standing order entry object (only subset of STANDING_ORDER_FULL).
    - number: 1016 (string, required) - Internal number of the standing order respectively sweep order.
    - status: OK (STANDING_ORDER_STATUS, required) - Represents the status of the order. Possible value: OK.
    - startDate: `2015-03-09T05:21:00+02:00` (string, required) - Date and time when the order was created.
    - realExecutionDate: `2015-04-09` (string, optional) - Real date when the standing order will be processed the next time, taking into account holidays and weekends and local BE processing for SO.
    - stopDateFrom: `2015-02-10` (string, optional) - Date since when the validity of the standing order is suspended.
    - stopDateTo: `2015-02-12` (string, optional) - Date until the validity of the standing order is suspended.
    - maxIterations: 12 (number, optional) - Maximum number of iterations - processing of the standing order. Only applicable in combination with executionMode AFTER_MAX_ITERATION_EXCEEDED.
    - maxAmount (AMOUNT, optional) - Maximum amount to be transferred using the standing order. Only applicable in combination with executionMode AFTER_MAX_AMOUNT_EXCEEDED.

### STANDING_ORDER_STATUS (enum)

Standing order status.

#### Members

- OK - Ok

### STANDING_ORDER_TYPE (enum)

Type of standing order.

#### Members

- STANDING_ORDER - Standing Order

### STATEMENT (object)

Statement.

#### Properties

- id: 201302520130621161819 (string, required) - Statement identifier.
- number: 25 (number, required) - Statement sequence number.
- statementDate: `2013-06-21T14:18:19Z` (string, required) - Date and time of statement creation.
- periodicity: MONTHLY (STATEMENT_PERIODICITY, required) - Periodicity of account statement creation.
- format: PDF_A4 (string, optional) - Format of account statement.
- language: cs (LANGUAGE, required) - Language od account statement.

### STATEMENT_PERIODICITY (enum)

Periodicity enum values for statements.

### Members

- ONCE - Statement will be send only once.
- DAILY - Daily frequency.
- WEEKLY - Weekly frequency.
- Include FREQUENCY

### SUBACCOUNT (object)

Subaccount of the current account.

#### Properties 

- id: BCA4H6885D176E78 (string, required) - Subaccount identifier.
- accountno (ACCOUNTNO_FULL, required) - Subaccount account number.
- type: SAVING (ACCOUNT_TYPE, required) - Type of the subaccount product.
- subtype: SAVING_ACCOUNT (ACCOUNT_SUBTYPE, required) - Subtype type.
- product: 52 (string, required) - Subaccount product code.
- productI18N: Peníze stranou (string, required) - Localized subaccount product name.
- balance (AMOUNT, required) - Subaccount balance.
- creditInterestRate: 0.5 (number, required) - Basic interest rate for subaccount. Value in percentage, e.g. 0.5 will be dispayed as 0,5 %.
- `cz-interestRateOverLimit`: 1.2 (number, optional) - In case of interest rate bands this is the interest rate which applies to value over limit.
- `cz-interestRateLimit` (AMOUNT, optional) - Limit amount for basic credit interest rate used for some saving accounts.

### SUBACCOUNT_LIGHT (object)

Subaccount of the current account light.

#### Properties

- id: BCA4H6885D176E78 (string, required) - Subaccount identifier.
- balance (AMOUNT, required) - Subaccount balance.

### SYMBOLS (object)

Structure for variable symbol, constant symbol and specific symbol.

#### Properties

- variableSymbol: 193460 (string, optional) - Variable symbol.
- constantSymbol: 0308 (string, optional) - Constant symbol.
- specificSymbol: 7853154453 (string, optional) - Specific symbol.

### TEMPLATE (object)

Template object.

#### Properties

- id: C8430E000200B404 (string, required) - Template identifier.
- name: Jan Novák (string, optional) - Template name defined by user.
- orderCategory: DOMESTIC (TEMPLATE_ORDER_CATEGORY, required) - Order category.
- receiver (ACCOUNTNO_FULL, required) - Receiver account number.

### TEMPLATE_ORDER_CATEGORY (enum)

Template order categorry.

#### Members

- DOMESTIC - Domestic payment.
- INTERNATIONAL - International payment.

### USER_SETTINGS (object)

User settings object.

#### Properties

- language: cs (LANGUAGE, required) - Preferred language.
- landingAccountId: CZ3308000000001592286253 (string, required) - Landing account identification.
- tacPhoneNumbers (array[string], optional) - Array of available phone numbers to send a TAC to. Phone numbers are masked f. e. +420777xx777.
    - Items
        - `+420608XXXX77`
- authorizationType: TAN (AUTHORIZATION_TYPE, required) - Authorization type this user uses. Possible values are "TAN" and "TAC".
- passwordExpiresInDays (number, required) - How many days until password expires.
- flags (array[string], optional) - Array of flags.
    - Items
        - displayInsurances - Insurance contracts are displayed in online banking.
        - displayLeasings - Leasing contracts are displayed in online banking.
        - displayBuildings - Buildings society contracts are displayed in online banking.
        - displayCreditCards - Credit cards are displayed in online banking.

## Group Basic Mechanisms

This API is a HTTP-1.1 REST service that provides access to user and accounting data of Erste Bank customers. It is a general purpose API with no single predefined use in mind. The following requirements need to be met:

* highly secure, as sensitive userdata is provided
* fine granular access/permissions (e.g. allow read-only on certain business objects, or different permissions for different clients on the same account, ...)
* low protocol overhead, as it is may be used on smart phones with potentially low bandwidth or high base latency
* low payload overhead (e.g. JSON instead of XML)
* no special-purpose calls for a business case, but atomic, reusable calls

## Server Calls

Server calls are done via https by using one of the following HTTP methods:

| Method | Idempotent | Change State | Purpose |
| ------ | ------ | ------ | ------ |
| GET | yes | no | **select**: read-only call (e.g. get account list) |
| POST | no | yes | **create**: add a new resource (e.g. create a new transaction), call a function |
| PUT | yes | yes | **update**: change an existing resource (e.g. set a message read, lock a card) |
| DELETE | yes | yes | **delete**: remove an existing resource (e.g. delete a message) |

Resources are all URIs that deliver business data (e.g. accounts, transactions, messages, ...) while functions are calls that may or may not return data but do not operate on business data (e.g. login).

All data provided by the client has to be in UTF-8 encoding.

GET, PUT und DELETE calls are idempotent. It does not matter for the server state if this call is used only once or multiple times (with the same resource/payload). POST calls, usually creating new stuff, should not be repeated by clients, because they will result in duplicated data.

Successfull DELETE calls result in a "HTTP 204 - No content" reply and the resource being removed.

The server must support gzip'ed content and all clients are strongly recommendet to request gzip'ed content via the HTTP header:
```
Accept-Encoding: gzip
```

### Authentication and Authorization

This API is not responsible for authentication (i.e. validate if a user/client/principal is who he/she/it claims to be, e.g. by checking user&passwords) but only of authorization (i.e. validate if a user/client/principal can access a resource here and now). Therefore, it is based on a token security concept and only needs to check the validity of such tokens which a client provides for each call as proof it may access the requested data.

As far as this API is concerned, this token is a "black box" which is part of each client request. The API provides the received token to a server-side verification library or service, and if the token turns out to be valid for the specific requested call, the business logic is executed. The API does not have to parse the token itself.

This API can work with any type of token, as long as the following assumptions are valid:

* The token already is in a format/encoding allowed to be passed as HTTP 'Authorization' header field.
* The token is maximum 1024 bytes in length (as it has to be transferred with each request, and on mobile phones every ms counts). However, average tokens should be much shorter (e.g. 256 bytes) to reduce upload traffic for each and every request.
* It is possible (for a library) to verify the validity of the token.
* It is possible (for a library) to derive the user (Verfueger) from the token.
* It is possible (for a library) to derive the **fine granular permissions** from the token. This includes a separate read and write permission down to an individual **business object level** (e.g. one specific account, message or template). However, a token should alternatively refer permissions in larger units, especially on entities the User owns, e.g. "all my accounts".

**Note:** OAuth 2.0 bearer token will be used, which encapsulate SAML permissions. This match the above requirements.

The token in request is sent by the client as HTTP `Authorization:` header:
```
Authorization: Bearer ya29.AHES67zeEn-RDg9CA5gGKMLKuG4uVB7W4O4WjNr-NBfY6Dtad4vbIZ
```

The content of the token and how to generate/validate it is not part of this specification.

### Authentication in File Downloads in Old Browsers

In order to overcome the limitations in old browsers, some file download endpoints supports file downloads as a result of form post calls. These calls return the required file immediately. Authorization information is carried in the hidden field of the form post call.

```
<form action="/api/netbanking/my/cards/id/invoices/2014_02/pdf" method="post"  accept="application/pdf">
   <input type="hidden" name="access_token" value="<token>">
   <input type="submit" value="download" />
</form>
```

### Authentication in File Uploads in Old Browsers

For limitations similar in File downloads in old browsers, some upload endpoints support passing the authorization token in a hidden form field in multipart form posts.

```
<form action="/api/backoffice/donation/ngos/<id>/qlogo" method="post" enctype="multipart/form-data" accept="application/json">
   <input type="hidden" name="access_token" value="<token>">
   <input type="file" name="file">
   <input type="submit" value="upload" />
</form>
```

### Session Cookies

In theory, each server call could be stateless and only use the token to reconstruct state. However, this will probably result in a performance impact, can be a cost issue due increased backend/host requests, and also would render current load balancing infrastructure useless.

Therefore, each time an server call is done that does not provide a standard Java Session Cookie (JSESSIONID), the reply will contain a new such session cookie. It is in the interest of the client to re-provide this cookie with each follow up call to make use of server-side caching. If the cookie is not re-sent, the call still will work but a slower reply will be the result.

```
Set-Cookie: JSESSIONID=Zw4LQndKc2ffHXM7r9NY9r2nBVbJytpnh3lt6p2R9cTQLFNz5CG5!-2028444187;
```

The server will store the last-provided authentication token in the server-side session upon the first call. If the token and the session ID still match on a successive call, then it is not necessary for the server to re-validate the token as long as it is not expired. If however the token does not match to the session ID, which means the client is suddenly providing a new token, the session is immediately destroyed and a new one is created based on the new provided token. The resulting new `JSESSIONID` is sent to the client for re-use in successive calls.

Session Cookies are valid for 2 minutes or the validity of the authentication token, whichever is _shorter_.

### Content Types and Languages

The client has to specify what type of content it expects via ordinary HTTP headers:

```
GET /path/to/some/resource HTTP/1.1
Host: www.example.org
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0
Accept: application/json
Accept-Language: en-US
```

**Accept**: What type of content should be returned. Currently, only `application/json` is supported. This is also the default if no `Accept:` header is given.

**Accept-Language**: In case language-dependent content is in the reply (GUI texts, pre-formatted amounts or dates, ...), the language-dependent infos of this language should be used by the server to translate/pre-format. If no `Accept-Language:` is given, `cs-CZ` is assumed. The server may ignore this field in case the user has a server-side language setting which overrules any request setting.

### Server Side Pagination

All calls that return lists support pagination. The client can request the content in pages providing a **size** and a **page** number. Those are given as URL parameters like the following example: 

`GET /path/to/some/resource?size=25&page=1`

**Page** count starts at zero, so 0 is the first page, 1 the second and so forth. If **size** is given without any **page**, **page** = 0 is assumed. There is no predefined **size** limit. If it is omited, all records are returned in one large list. However, some calls might introduce a size limit due the fact that a certain backend would be overloaded by returning too many items in one call - in such a case, the individual call descriptions will state that clearly.

### Server Side Sorting

Some calls allow their output to be pre-sorted. This can be requested by giving the **sort** and **order** URI parameters, for example:

```
GET /path/to/some/resource?sort=date&order=desc
```

Each call description below states if and what fields it supports to sort. The optional **order** can be either **asc** or **desc** (case insensitive), with **asc** as default. If no **sort** is given, a random order has to be assumed that can change between calls.
Sorting multiple fields at the same time is possible by comma-separating the fields and their corresponding **sort** orders. Sort priorities are left to right, so within the first field it is sorted by the second etc. Missing corresponding **order** entries are considered to be **asc**. For example:

```
GET /path/to/some/resource?sort=date,title,name&order=desc,,desc
```

Sorting by optional attribute in response should be done that way that first will be provided items with value (in requested order) and then items without attribute value (null or missing attribute value).
For paginated output, sorting is done before pagination, so the whole list not only one single page is sorted. Resources/Lists requested without giving any sorting parameters should be considered to be in random order.

### Alternate Header Names

In some cases it might not be possible for an application to change certain HTTP headers. For example, a website calling this API via JavaScript from within an older browser might not be able to override the `Accept:` or `Accept-Language:` header. In such a case corresponding alternate header names prefixed with `X-ebsapi-` can be used. If the server receives such headers, they take precedence over any non-prefixed header that might also be included in the call.

```
X-ebsapi-Accept: application/json
X-ebsapi-Accept-Language: en-US
X-ebsapi-Authorization: Bearer ya29.AHES67zeEn-RDg9CA5gGKMLKuG4uVB7W4O4WjNr-NBfY6Dtad4vbIZ
```

**Note:** This is not a complete list. All HTTP headers mentioned in this document can be prefixed.

### Last Modified

Some calls support the HTTP last modified mechanism (this is stated in those calls that do). For such calls, the client may provide a standard RFC-complaint HTTP `If-Modified-Since` header, and resources delivered by that calls include a `Last-Modified` header.

```
GET /path/to/some/resource HTTP/1.1
Host: www.example.org
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0
If-Modified-Since: Wed, 19 Oct 2005 10:50:00 GMT
```

If the resource was not modified since the given timestamp, a `HTTP 304` is returned (means "not modified"). If the resource was updated on this time or thereafter, the resource is returned. Note: this does not do delta handling. If `If-Modified-Since` is used on a list, all or none items are returned, not only the part of the list that is newer.

Since HTTP's `If-Modified-Since` only supports seconds, but data on the server might be more precise, the following mechanism is in place: If a resource has a last modified date of a fraction of a second, and a client requests this resource within the very same second, the server returns the resource as `Last-Modified` with the second rounded down. E.g. for a resource that has a timestamp of 12:30:00.123, 12:30:00 is returned. If the request is done at a later point in time, the `Last-Modified` second is to be rounded up. This is done to avoid that the client might miss an update due the higher precision of time on the server than in the HTTP headers, at the cost that in the - rare - event, that if a resource is queried at the very same second it was changed, it might be queried twice due the rounded down timestamp.

As an alternative to `If-Modified-Since`, the API also supports a `X-ebsapi-Last-Modified`/`X-ebsapi-If-Modified-Since` header pair. Those accept an XML datetime format (`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`) with millisecond precision.

```
GET /path/to/some/resource HTTP/1.1
Host: www.example.org
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0
X-ebsapi-If-Modified-Since: 2013-06-05T16:42:22.709Z
```

## Server Request

### JSON

In case of POST / PUT / DELETE requests business data is accepted as JSON data (if it is not binary data). See [Wikipedia](http://en.wikipedia.org/wiki/JSON) for details on JSON.
Empty arrays `[]` and `null` values must be omitted from input data.

### Error Handling

JSR-303 validation is applied to the provided JSON input data according to the appropriate data model.

## Server Reply

All payload data returned by the server is in UTF-8 encoding.

If **no error** occurred, the server replies with a HTTP 200 status code and the payload contains the JSON with all relevant data, or a HTTP 204 status code and no body/payload if the call does not produce data. For **logical errors** like empty fields, field parsing errors, missing mandatory fields etc. the server replies with HTTP 400 and a JSON error object (see section below). For **framework** and **meta-errors** (authentication failed, wrong URL, ...) the corresponding HTTP Error codes are used and the payload contains a JSON error object. If a resource can't be found due to inactive products in BackEnd or wrong id ( e.g. `GET /netbanking/my/contracts/buildings/{id}` ) the server replies with HTTP 404 and a JSON error object describing the reason (e.g. ID\_NOT\_FOUND or PRODUCT\_NOT\_ACTIVATED) has to be returned.

| Code | Purpose |
| ------ | ------ |
| 200 | indicates no technical error happened |
| 204 | like 200, but no body/payload will be sent back |
| 400 * | logical error in parsing request (e.g. ID does not exist, mandatory field missing, ...) |
| 403 * | user not logged in, invalid token, etc. |
| 404 * | this kind of resource does not exist |
| 415 | unsupported media type (Accept/Accept-Language unsupported) |
| 500 | internal error happened (a Java exception happened) |

**Legend:** * - returns JSON error object

### JSON

Business data is returned as JSON data (if it is not binary data like images). See [Wikipedia](http://en.wikipedia.org/wiki/JSON) for details on JSON.
JSON data has no root object and it should look like

```
{
... do this ...
}
```

but **not like this**

```
"objectname" : {
... don't do this ...
}
```

Undefined or unused optional fields are omitted in the JSON output and must not be delivered as `null` nor as empty strings. If the distinction between empty and not available is necessary, of course an empty string is still a valid response.

Empty arrays `[]` and `null` values must be omitted from output data (response payload).

### WebAPI Error Communication

Errors are given as codes of `WORDS_AND_UNDERSCORES` (see also Naming Conventions). It is the responsibility of the FE client application to convert them using the language of the user and data from Error Codetable.

If a call fails with one of the 40x HTTP codes, the payload will contain a top-level `error` JSON array. It contains one entry per logical error that describes more in detail what happened. Errors come in two flavors, as following example output shows:

```
"errors": [
    {
        "error":"SOME_ERROR_CODE"           // error code
    },
    {
        "error":"ANOTHER_ERROR_CODE",       // error code
        "scope":"account.amount.currency"   // optional attribute indicating JSON parameter name that caused the error. Provided by WebAPI logic/validation when applicable
    },
    {
        "error":"OTHER_ERROR_CODE",         // error code
        "parameters": {                     // list of named parameters for current message
            "AMOUNT_ENTERED": 10000,        // named parameter "AMOUNT_ENTERED" and its value
            "CURRENCY": "EUR",              // named parameter "CURRENCY" and its value
            "LIMIT": 500,                   // named parameter "LIMIT" and its value
        }
        "scope":"orders[3].amount.value"    // scope can use array index for identification of particular field
]
```

Simple errors only contain an error key with some textual error code, for example `SESSION_EXPIRED`. Validation errors contain in addition to the error key a scope key that refers to the input element that cause this error. The scope is fully qualified within the JSON input using dots, array items are qualified via `[123]`.

For HTTP status codes errors (e.g. PUT resource returning 404 - Not Found), error code will be returned in "xAPI\_ERROR\_CODE" header attribute. All message parameters will be also returned as header attributes, prefixed by "xAPI\_" (so that AMOUNT\_ENTERED error attribute will be returned as "xAPI\_AMOUNT\_ENTERED").
The following common error codes are defined:

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 403 | TOKEN\_NOT\_ALLOWED | The provided token does not allow this call. |
| 403 | TOKEN\_EXPIRED | The provided token is expired. |
| 403 | TOKEN\_INVALID | The provided token not a valid token (syntax error). |
| 400 | FIELD\_NOSORT | The field (given in the "scope" field of the error) can not be used for sorting (does not exist, does not support sorting). |
| 400 | RESOURCE\_NOSORT | Resource does not support sorting. |
| 500 | INTERNAL\_SERVER\_ERROR | A technical exception occurred. |

If a call can produce additional errors, they are listed in each call separately.

## Pagination

If a request requires paginated output (see Server calls/Server side Pagination above), the reply will contain in addition to the array with a page's items the following fields:

```
{
    "pageNumber": (INTEGER),
    "pageCount": (INTEGER),
    "nextPage": [INTEGER],
    "pageSize": (INTEGER),
    "page": [
        { ...item...},
        { ...item...},
        { ...item...}
    ]
}
```

**pageNumber**: The page number of provided list items from total query result set.
**pageCount**: The total count of pages as result of calculation using the requested page size and total records in query result set.
**nextPage**: Optional page number of the next page, if exists the nextPage value equals pageNumber+1, if current pageNumber is the last page of result set then nextPage field is not provided.
**pageSize**: The page size used. Either the number supplied by the client in request is returned here, or in case there is a page size limit for call and its value is less than the requested one, the actual size is returned.
**page**: The page's items. Note that `page` can be any name, e.g. `accounts`, `cards`, `transactions`.

## Naming Conventions

### JSON Fields

* Field names are in English.
* Field names are written camelCase.
* The first letter is always lowercase.
* Arrays have plural names and end with **s** or **es**.
* Abbreviations are always written with first letter uppercase (IBAN -> Iban).
* The main ID of an object is called just **id**.
* All other referred ids are given via the name of the referred object plus 'Id'.
* Field names do not have a prefix of the object type, so it's not **accountName** but just **name**.

Examples:

```
{
    "id": 1,
    "anotherId": 5,
    "remoteIds": [ 7, 8, 9 ],
    "flyingWalruses": [ "walrus 1", "walrus 2" ],
    "iban": "some IBAN",
    "someOtherIban": "other IBAN",
    "flags": [ ... array ... ]
}
```

### Error Codes

* Error codes are English.
* Error codes are given all uppercase.
* Underscores separate multi-word codes.
* Error codes are self-explanatory descriptions, not internal codes or strings without obvious meaning.
* Error codes follow a NOUN or NOUN\_ADJECTIVE pattern.
* Error codes are **not** UI-Texts and need a mapping first.
* Error codes may get long if that helps to increase clarity.

Examples:

```
ID_NOT_FOUND
SYNTAX_ERROR
DAILY_LIMIT_EXCEEDED
WALRUS_FLEW_AWAY
CLARITY_INCREASED_BY_VERY_LONG_ERROR_CODES
```

### Flags

Entries for the (FLAG) datatype (definition below) follow the same conventions as JSON-Fields. In addition the following rules apply:

* Flags follow a "noun" or "nounAdjective" pattern.

Examples:

```
defaultAccount
domesticPaymentAllowed
```

### API Versioning

It is important to present API version of the endpoint, which is used in WebAPI in user call. If an endpoint is marked to use certain version of API then please use the given version when calling the given endpoint. If no version is used in request call, then the most current version of API is used.

## Group Signing of Resources

Most of create/update/delete active calls done by the user/application need to be signed by using particular authorization method, to confirm user intention to execute active operation and authorize user with some security tools in the same time. Following list enumerates some of the possible authorization methods used in FE:

*  **NONE** - validation of user response as confirmation (e.g. confirm button click)
*  **TAC** - validation of user response as randomly generated number/code sent to user personal device via SMS
*  **CASE\_MOBILE** - validation of the user response using mobile application, this method have three forms (user can choose which he'll use)
**  **ONLINE** - mobile application receives PUSH notification with relevant data for authorization and user just clicks confirmation button in mobile application (data are sent over internet to bank)
**  **QR** - mobile application retrieves relevant data for authorization by reading QR code displayed in frontend application, generates onetime password and user inserts this OTP into frontend application to authorize operation
**  **CODE** - frontent application displays relevant data for authorization to user, he inserts it to mobile application, application generates onetime password and user inserts this OTP into frontend application to authorize operation

Depending on the business defined characteristic of an entity/resource, creating/updating/deleting action requires an optional signing process. There are two different types of action orders:

* **Immutable orders** - active calls which create/change resource (stored in local BE system) only after succesful signing by user
* **Manageable orders** - active calls which allow to create/update/deleate particular order (temporarily stored in local BE system) and only after user signing this order is sent to BE processing

### Signing Immutable orders [/netbanking/my/{+resourcePart}/sign/{signId}]

It's not possible to read/update/delete an already existing order (request to execute active operation with resource). Existing orders/requests are only persisted for a 6 months, afterwards the orders get automatically cleaned (deleted). 

These orders (to create/modify particular resource) should be stored in local system and signId should be generated as identificator of particular order/request. This signId then will be used in signing process steps as reference ID. 

Therefore response payload of every POST | PUT | DELETE request for particular signable resource must include the signId. The real resource object is not created, updated, deleted as long as the signing process is not succesfully finished.

A signable resource has an URI identifying the resource, for example (this is not a taxative list):

```
.../netbanking/my/profile
.../netbanking/my/contacts       // for POST there is not generated ID yet
.../netbanking/my/contacts/{id}  // for PUT and DELETE we already know ID
.../netbanking/my/accounts/{id}
.../netbanking/my/cards/{id}
```

If a signable resource is created (POST) or updated (PUT) or removed (DELETE), local system has to store this active request and generate signID and provide it in response payload of call as part of SIGNINFO structure. Then FE application needs to call the ...`*/sign/{signId}` endpoint for original resource to apply signing process (with signId reference to temporary order request), for example:

```
.../netbanking/my/profile/sign/{signId}
.../netbanking/my/contacts/sign/{signId}        // different signing endpoint for POST
.../netbanking/my/contacts/{id}/sign/{signId}   // different signing endpoint for PUT, DELETE
.../netbanking/my/accounts/{id}/sign/{signId}
.../netbanking/my/cards/{id}/sign/{signId}
```

Signing process has three steps **GET**, **POST**, **PUT**. Following chapters will describe consecutive signing steps GET, POST and PUT.

#### Signing - step 1 - GET [GET]

First step is to obtain all information to enable the client to sign this request (allowed authorization methods, phones/devices to use) represented by **"signId"**.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    + resourcePart: contacts (string, required) - Part of the url which defines resource which will be signed.
    + signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

#### Signing - step 2 - POST [POST]

Second step to start real signing process. When the client is ready to do an actual signing, he selects authorization method (if more scenarios are available in GET response) then /sign/ endpoint is POSTed with preferred authorization method and serverside generation of challenge is done.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    + resourcePart: contacts (string, required) - Part of the url which defines resource which will be signed.
    + signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

#### Signing - step 3 - PUT [PUT]

Third step to confirm signing process (e.g. send received SMS). The PUT call finalizes a previous POST request. The client provides the proper OTP to confirm authorization. If the authorization check is OK, the resource update/change is executed. Since different resources can have different things that can go wrong, the call returns the whole business object including all updated states/flags, so the client can check, if the signing did what it was supposed to do. If the authorization is OK, the call returns a 200 HTTP code as it would have been GETed without the /sign/ postfix. If the signing fails error is returned.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    + resourcePart: contacts (string, required) - Part of the url which defines resource which will be signed.
    + signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Signing Manageable orders [/netbanking/my/{+resourcePart}/sign]

Manageable orders means that is possible to read/update an already existing order. Orders are stored immediately when active operation with resource was called (valid approach only for payment orders so far). 
There is no signId generated, because payment order ID is as identificator of particular order/request. 
Therefore response payload of every POST | PUT request for payment order resource doesn't include the signId.
Only when signing process is succesfully finished then order is sent to BE system to process it.

A signable order resource has an URI identifying the resource, for example:
```
    .../netbanking/my/orders/payments/{id}
```
   
Then FE application needs to call the ...`*/sign/` endpoint for original resource to apply signing process, for example:
```
    .../netbanking/my/orders/payments/{id}/sign
```

Signing process has three steps **GET**, **POST**, **PUT**. Following chapters will describe consecutive signing steps GET, POST and PUT for manageable orders.

#### Signing Orders - step 1 - GET [GET /netbanking/my/{+resourcePart}/sign{?hash}]

First step is to obtain all information to enable the client to sign this order.
Some resources also provide additional information what the consequences of signing would be, and have to be provided to the user, such calls may include resource-specific fields or flags that are described along with the datatypes of the resources.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    + hash: d1bc8d3ba4afc7e109612cb (string, required) - Hash of the object which should be signed. Must not be calculated using internal fields and be the same hash for the same unchanged logical object every time.
    + resourcePart: orders/payments/143234 (string, required) - Part of the url which defines resource which will be signed.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Attributes (SIGN_MANAGEABLE_GET_RESPONSE)

#### Signing Orders - step 2 - POST [POST]

Second step to start real signing process. When the client is ready to do an actual signing, he selects authorization method (if more scenarios are available in GET response) then /sign endpoint is POSTed with preferred authorization method and serverside generation of challenge is done.
Optionally, the client can provide the hash from Step 1 - GET. In this case the hash is re-validated to see if the object is still unchanged. If no hash is provided, no error occurs.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    + resourcePart: orders/payments/143234 (string, required) - Part of the url which defines resource which will be signed.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_MANAGEABLE_POST_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_MANAGEABLE_POST_RESPONSE)

#### Signing Orders - step 3 - PUT [PUT]

Third step to confirm signing process (e.g. send received SMS). 
The PUT call finalizes a previous POST request. The client provides the proper OTP to confirm authorization. 
If the authorization check is OK, the payment order is sent for processing in BE system. Since different resources can have different things that can go wrong, the call returns the whole business object including all updated states/flags, so the client can check, if the signing did what it was supposed to do.
If the authorization is OK, the call returns a 200 HTTP code and the individual resource that was just signed, as it would have been GETed without the /sign/ postfix.
If the signing fails error is returned.

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    + resourcePart: orders/payments/143234 (string, required) - Part of the url which defines resource which will be signed.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_MANAGEABLE_PUT_RESPONSE)

### Sign Polling [/netbanking/my/sign/poll/{id}]

Endpoint to retrieve state of the sign process (typically if is sign done by CASEMobile only via smartphone).

#### Sign Polling [GET]

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Attributes (SIGN_POLLING_RESPONSE)

### Group Authorization Methods and Scenarios Examples

**Authorization method** is process which is used to authorize active operation. Examples of the methods are in [Sigining of Resources](#/reference/signing-of-resources) chapter.
These methods could be chained into scenarios. **Authorization scenario** is a list of methods (with given order) which should be successfully accomplished in order to sign active operation.
In following chapters we'll try to show some of the examples how signing process could look. Complexity of the signing process is controlled by bank and depends on estimated risk level of the operation. Simply more risky the operation is the more complex signing process must be used (scenario with more methods, methods with higher security level).
Which scenarios/methods can be used to sign operation is available in response of the GET signing call (see [Signing - step 1 - GET](#reference/signing-of-resources/signing-immutable-orders/signing-step-1-get) or [Signing Orders - step 1 - GET](#reference/signing-of-resources/signing-manageable-orders/signing-orders-step-1-get))

#### Examples with one authorization method

This is the simplest way how to sign order. We assume that the bank requires the signing process which consists of one scenario with only one authorization method. In this case, scenario is not present in response of GET signing resource and only one authorization method is available in attribute `authorizationType`. For this example we use authorization method **TAC** and we use **[Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders)**.

**GET**

response:
```
{
    "authorizationType": "TAC",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

You can see from response only **TAC** method is required. Since `state` of the order is OPEN we have to go through signing process. If state is NONE signing process is not neccessary. In case of DONE state signing process has been already successfully finished.

**POST**

request:
```
{
    "authorizationType": "TAC"
}
```

response:
```
{
    "authorizationType": "TAC",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

SMS with onetime password was sent to user during this call. This password should be returned by PUT call (in `tac` field).

**PUT**

request:
```
{
    "authorizationType": "TAC",
    "tac": "12345"
}
```

response:
```
{
    "signInfo": {
        "state": "DONE",
        "signId": "fde367favcz89fra"
    }
}
```

Next example shows another authorization method - method **NONE**. This method represents simple confirmation of the order by clicking on confirmation button on the screen. As in example before we use **[Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders)**.

**GET**

response:
```
{
    "authorizationType": "NONE",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

**POST**

request:
```
{
    "authorizationType": "NONE"
}
```

response:
```
{
    "authorizationType": "NONE",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

**PUT**

request:
```
{
    "authorizationType": "NONE"
}
```

response:
```
{
    "signInfo": {
        "state": "DONE",
        "signId": "fde367favcz89fra"
    }
}
```

#### Examples with one scenario

In this example we assume that the bank requires the signing process which consists of one scenario with more than one authorization method. For this example we use scenario with authorization methods **TAC** and **CASE\_MOBILE** and we use **[Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders)**.

**GET**

response:
```
{
    "authorizationType": "TAC",
    "scenarios": [
        [
            "TAC",
            "CASE_MOBILE"
        ]
    ],
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

`authorizationType` property now represents preferred method. Since there is only one scenario which starts with **TAC** method only this can be preferred method.
In POST call we send TAC in `authorizationType` attribute to inform which method will be used (in this case we have no other option).

**POST**

request:
```
{
    "authorizationType": "TAC"
}
```

response:
```
{
    "authorizationType": "TAC",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Onetime password was sent to client again and it should be returned via PUT call.

**PUT**

request:
```
{
    "authorizationType": "TAC",
    "tac": "12345"
}
```

Because this is not last authorization method in scenario (scenario wasn't finished) a `state` attribute value is **OPEN**, not DONE.

response:
```
{
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Next we use following authorization method in scenario - **CASE\_MOBILE** method. This GET call is not neccessary.

**GET**

response:
```
{
    "authorizationType": "CASE_MOBILE",
    "scenarios": [
        [
            "CASE_MOBILE"
        ]
    ],
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```
As you can see there is TAC method missing in scerio. It was successfully accomplished and it is no longer needed to appear in scenario. By calling POST method we launch **CASE\_MOBILE** authorization method.

**POST**

request:
```
{
    "authorizationType": "CASE_MOBILE"
}
```

In case of **CASE\_MOBILE*** authorization method all information is sent to client application to visualize it for user. It is up to user to choose form of the method will be used.

response:
```
{
    "authorizationType": "CASE_MOBILE",
    "qrImage": "iHUIDFuihsfd8878sdfSDFsfd...",
    "challengeCode": "L245L2DD",
    "challengeParameters": [
        {
            "nameI18N": "Suma",
            "value": 12785
        },
        {
            "nameI18N": "Datum splatnosti",
            "value": "21.7.2015 15:45"
        }
    ],
    "poll": {
        "url": "http://www.csast.csas.cz/webapi/api/v2/sign/poll/46879",
        "id": 46879,
        "interval": 5000
    },
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Polling process should be started at this point if **CASE\_MOBILE** authorization method is used. By calling given url you can check whether CASE_MOBILE method was already finished externally (by using smartphone application - online form of CASE_MOBILE). See [Sign Polling](#reference/signing-of-resources/sign-polling/sign-polling) resource for more info.

**PUT**

In this case it was really online form of the CASE_MOBILE method which was used. If application frontend finds out that order was sucessfully authorized by mobile phone then frontend calls PUT resource without payload (only mandatory `authorizationType` is filled).

request:
```
{
    "authorizationType": "CASE_MOBILE"
}
```

Because this is last authorization method in scenario a `state` attribute value is **DONE** (if order was successfully authorized).

response:
```
{
    "signInfo": {
        "state": "DONE",
        "signId": "fde367favcz89fra"
    }
}
```

#### Examples with two ore more scenarios

We assume that the bank offers two possible scenarios for the signing process. Every scenario contains more then one authorization method. In this example first scenario contains authorization methods **NONE** and **CASE\_MOBILE** and second scenario **TAC** and **CASE\_MOBILE**. For all examples in this section we use **[Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders)**.

**GET**

response:
```
{
    "authorizationType": "TAC",
    "scenarios": [
        [
            "NONE",
            "CASE_MOBILE"
        ],
        [
            "TAC",
            "CASE_MOBILE"
        ]
    ],
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Preferred authorization method is TAC. Nevertheless user decides to use authorization method **NONE**. In POST call we send NONE in `authorizationType` attribute.

**POST**

request:
```
{
    "authorizationType": "NONE"
}
```

response:
```
{
    "authorizationType": "NONE",
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

**PUT**

request:
```
{
    "authorizationType": "NONE"
}
```
Because this is not last authorization method in scenario a `state` attribute value is **OPEN**, not DONE.

response:
```
{
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Next we will use following authorization method in scenario - **CASE\_MOBILE** method because we have no other option. If both scenarios had the same first method then user could choose second method according to the scenarios. In such a case `scenarios` field would contain two scenarios with the tail methods of everyone. But for now we have only one option so only one scenario is available in next GET call.

**GET**

response:
```
{
    "authorizationType": "CASE_MOBILE",
    "scenarios": [
        [
            "CASE_MOBILE"
        ]
    ],
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

**POST**

request:
```
{
    "authorizationType": "CASE_MOBILE"
}
```

In case of **CASE\_MOBILE*** authorization method all information is sent to client application to visualize it for user. It is up to user to choose form of the method will be used.

response:
```
{
    "authorizationType": "CASE_MOBILE",
    "qrImage": "iHUIDFuihsfd8878sdfSDFsfd...",
    "challengeCode": "L245L2DD",
    "challengeParameters": [
        {
            "nameI18N": "Suma",
            "value": 12785
        },
        {
            "nameI18N": "Datum splatnosti",
            "value": "21.7.2015 15:45"
        }
    ],
    "poll": {
        "url": "http://www.csast.csas.cz/webapi/api/v2/sign/poll/46879",
        "id": 46879,
        "interval": 5000
    },
    "signInfo": {
        "state": "OPEN",
        "signId": "fde367favcz89fra"
    }
}
```

Polling process should be started at this point if **CASE\_MOBILE** authorization method is used. By calling given url you can check whether CASE_MOBILE method was already finished externally (by using smartphone application - online form of CASE_MOBILE). See [Sign Polling](#reference/signing-of-resources/sign-polling/sign-polling) resource for more info.

**PUT**

In this case code form of the CASE_MOBILE method will be used. The application frontend should retrieve onetime password generated by mobile application and send it back to bank via PUT signing call.

request:
```
{
    "authorizationType": "CASE_MOBILE",
    "challengeOTP": "123456"
}
```

Because this is last authorization method in scenario a `state` attribute value is **DONE** (if order was successfully authorized).

response:
```
{
    "signInfo": {
        "state": "DONE",
        "signId": "fde367favcz89fra"
    }
}
```

## Group Basic Data Types

The individual call descriptions below reuse the following common data types. If a datatype has a maximum length, the length is appended to the datatype, e.g. (TEXT100). If a field has a minimum and a maximum, both values are given and separated via a minus, e.g. (TEXT6-32).

If data types (see below) define error codes, those have to be returned whenever an object using such a field is POSTed or PUTed. In addition, the following generic errors can occur:

### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | FIELD\_MISSING | The field is missing in the JSON input. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | FIELD\_TOO\_SHORT | The field minimum length is not given. |

If one check fails, a HTTP 403 plus an error object is returned, with the `scope` defining the source/field of the error.

## Text (TEXT)

Text is given in UTF-8 encoding. All text fields and types derived from TEXT are validated against set of allowed characters:

```
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz áßäčďéěíĺľňóöôřŕšťúůüýžÁÄČĎÉĚÍĹĽŇÓÖÔŘŔŠŤÚŮÜÝŽ,.;:!?@&+-*/()_#"
```

In the case there is any exception in this validation rule it will be noted.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | TEXT\_INVALID | Not a string. |

## HTML-Fragment (HTML)

Text with HTML tags for formatting.

## Integer (INTEGER)

Integers are variable-length numbers (positive or negative). They do not have an upper size limit (like 32 or 64 bit).

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | INTEGER\_INVALID | Not an integer (float, ...). |

## Number (NUMBER)

Number is in format based on JSON number specification. Number can be positive or negative, integer or decimal.

Example: (NUMBER4)

```
{
    "institute": 188
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NUMBER\_INVALID | Not a string only consisting of digits. Not the correct length. |

## Boolean (BOOLEAN)

Logical data type with two values: **true** or **false**.

## Universally unique identifier (UUID)

A 36-digit string containing a standard [universally unique identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier).

```
"uuid": "550e8400-e29b-41d4-a716-446655440000"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | UUID\_INVALID | Not a correct uuid string. |

## Currency (CURRENCY)

Currency is in **ISO 4217** format (3 capital letters code).

Example:

```
{
    "currency":"EUR"
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CURRENCY\_UNKNOWN | Not an ISO 4217 currency. |

## Country Code (COUNTRYCODE)

Country codes are in **ISO 3166-1** format, subtype ALPHA-2. This means two letters in uppercase.

Example:

```
{
    "country":"AT"
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | COUNTRY\_CODE\_UNKNOWN | Not an ISO 3166 country code. |

## Hashes (HASH)

All hashes are generated as **SHA256**.

## Amount (AMOUNT)

Amounts are objects that include the value, the precision and the currency. 
If the precision is omitted, the value is considered to be 2. If the currency is omitted, it is to be considered to be local currency parameter (`EUR` for AT, SK, `CZK` for CZ

When amount is used as input value, maximum expected precision is 2. If other restriction is used for given resource it would be stated in it's description.

| Attribute | Type | Description |
| ------ | ------ | ------ |
| value | NUMBER | Value of an amount. |
| precision | NUMBER | If the precision is omitted, the value is considered to be 2. |
| currency | CURRENCY | If the currency is omitted, it is to be considered to be EUR. For Ceska that means the currency need to be specified for the default 'CZK'. |

Example: 

```
"amountExample" : {
    "value":12345678900,
    "precision":2,
    "currency":"EUR"
}
```

Also, "currency" has to be checked according to (CURRENCY) rules.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | INVALID\_PRECISION | Precision not an integer or not >= 0. |
| 400 | VALUE\_INVALID | Value is not an integer. |

## Amount (AMOUNT:EUR)

This data type is derived from (AMOUNT). It is only allowed to contain EUR as currency, either by explicitly stating that in the "currency", or by omitting the currency (which defaults to EUR).

```
"amountExample" : {
    "value":12345678900,       // (INTEGER)
    "precision":2,             // [INTEGER]
    "currency":"EUR"           // [CURRENCY]
}
```

### Checks & Error Codes

In addition to all (AMOUNT) checks, (AMOUNT:EUR) can produce:

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CURRENCY\_NOT\_EUR | The currency is not "EUR" or defaulting to "EUR". |

## Date (DATE)

Date format without time (yyyy-MM-dd).

```
{
    "aDate":"2011-07-14"
}
```

## Date and time (DATETIME)

Dates are returned as **ISO 8601** dates and are used for both dates, times and timestamps. Using timezones is mandatory.

```
{
    "aDate":"2011-07-14T19:43:37+0100",
    "yetAnotherDate":"2001-10-26T19:32:52Z"
}
```

All dates returned by the API are in the corresponding time zone a record/data object is for. For Austrian dates (e.g. transfer timestamps) this means Central European Standard Time (CEST). Austria is UTC+1 in winter and UTC+2 in summer, so times usually read `+0100` or `+0200`. Should, at a later time, the API be applied to other countries, the corresponding time zone for a given data object has to be used.

**Note:** Returning dates as UTC is discouraged because a client would not know what the intended target time zone is that a date has to be displayed in (e.g. an Austrian transaction still has to be shown with the correct Austrian execution time, even if the caller is using the API from e.g. the USA.)

All dates provided by the client (e.g. a date for a future payment order) can be in any timezone. They will be converted to CEST on the server and this CEST version is used for all further processing - including storing or returning this now converted date to the client.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | DATE\_INVALID | String does not contain a valid ISO 8601 date string. |
| 400 | TIMEZONE\_MISSING | a date without a timezone information was provided. |
| 400 | TIME\_NOT\_ZERO | The client should have provided a time, that (after CEST conversion) should have been 00:00, but isn't. |

## Enum (ENUM)

Variables where the actual value is one of a predefined list (a.k.a. enums). The range of values are given as comma-separated list right in the datatype definition, e.g. (ENUM:GI,WP,SP,KA). Domain values are keys used in sIT's internal Domain Database, that provides company-wide reusable keys, short- and longtexts for them.

```
"some_domain_value":"SP"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ENUM\_UNKNOWN | Given element is not part of this (ENUM). |

## Flag (FLAG)

Flags/Tags/Roles that an object can have. To avoid adding a lot of case-specific boolean values, things that an object is nor not is are represented by flagging the object. Flags are an array of strings representing one aspect, e.g. one permission, one attribute or one role. The existence of a certain string in a Flag-List can be considered to be a "true" on this aspect, the absence of a certain string as a "false". The possible flags are listed on a case-by-case basis at each data type/call as comma-separated list within the brackets.

```
"flags": [
    "hidden", "transactionsHidden"
]
```

Empty flag arrays can be omitted.

## International bank account numbers (IBAN)

Based on **ISO 13616-1:2007**. A valid IBAN consists of all three of the following components: 

* Country Code (2 capital letters)
* Check digits (2 digits)
* BBAN (local Basic Bank Account Number consisting of 1-30 characters)

```
"iban": "CZ172099900000005603"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | FLAG\_UNKNOWN | Given element is not possible/allowed as (FLAG). |

## Business Identifier Code (BIC)

BIC code (also know as SWIFT ID/code) standard format (based on **ISO 9362**) has 8 or 11 characters, made up of:

* 4 letters: Institution Code or bank code
* 2 letters: ISO 3166-1 alpha-2 country code
* 2 letters or digits: location code
* 3 letters or digits: branch code, optional (possible default 'XXX' for primary office)

Example:

```
"bic": "GIBACZPX"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | BIC\_INVALID | The given BIC is not syntactically correct. |

## Bank Code (BANKCODE)

Local bank code used in local bank clearing system, e.g. 5-digit bank code in AT, 4-digit bank code in CZ, SK.

```
"bankCode": "20111"     //Erste Bank der oesterreichischen Sparkassen AG
"bankCode": "0800"      //Česká spořitelna, a.s.
"bankCode": "0900"      //Slovenská sporiteľňa, a.s.
```

## Account Number (ACCOUNTNO)

Account number comes in two flavors 
* IBAN (IBAN plus optional BIC) identification
* local account number (BBAN) plus mandatory bank code plus optional country code (in case iban is available along with the local account number optional fields cz-iban and cz-bic are provided)

This is due to fact, that using of IBAN format was not adopted in all the Erste group countries. Some applications of ACCOUNTNO are restricted to one of the two flavors only. F.i. when posting new SEPA payment orders sender and receiver accounts must be specified by IBAN format only, or when posting new Domestic payment in CSAS BBAN format should be used. However when requesting existing transactions the receiver account may be returned in format BBAN or IBAN (for SEPA payments). Therefore the ACCOUNTNO object may in some cases only contain IBAN, only local BBAN, or both.

IBAN version:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| iban | IBAN | IBAN |
| bic | BIC | BIC |

BBAN version:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| number | TEXT | Account number with possible prefix. Format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros. |
| bankCode | BANKCODE | Bank Code |
| countryCode | COUNTRYCODE | Code of the Country - 2 characters; mandatoryfor international orders. |
| cz-iban | IBAN | IBAN |
| cz-bic | BIC | BIC |

Account attribute `number` and `bankCode` are not padded with zeros. Account attribute `number` in CZ consists of optional account prefix (TEXT6) and account number (TEXT10) and format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros.

## Address (ADDRESS)

Description of **address** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| street | TEXT | Street of the address. |
| buildingApartment | TEXT | Number which is unique in locality/town/village. |
| streetNumber | TEXT | Number which is unique in street. Not all localities have streets. |
| city | TEXT | City where card should be sent. |
| zipCode | TEXT | Zip code of the address. |
| country | COUNTRYCODE | Address country. |
| description | TEXT | More detailed description of address, company name or department. |

## Base64 File (BASE64FILE)

Represents a binary file with the (base64) encoded content and content type.

```
{
    "contentBase64": (XS:base64Binary), // Encoded file content (base64Binary is defined in XML Schema)
    "contentType": (TEXT)              // MIME type, e.g., "image/png", "image/gif"
}
```

## Sign Info (SIGNINFO)

Represents signing information for the requested order.

```
{
    "state": (ENUM:OPEN,NONE), // OPEN: Order should be signed. NONE: Order has been executed without signing.
    "signId": (STAMP24ID)      // Available when state is OPEN. Used for next signing calls.
}
```

## Database Stamp Id (STAMPID)

Represents a (TEXT36) id.

```
eg:  db1fa43e-07f6-8240-8330-ed20c8307240
```

## Id (ID)

Holds an id from a created entity.

```
{
    id: (STAMPID)
}
```

## DVR (DVR)

7-digit integer.

```
"dvr": "4711815"
```

## Email (EMAIL)

Represents an email.

```
{
    "emailExample": "john.doe@test.com"
}
```

## Array (ARRAY)

Represents a collection of elements/items.

Example:

```
{
    "field",
    "arrayName": [
        { ...item... },
        { ...item... },
        { ...item... }
    ],
    "field"
}
```

## Contact Address (CONTACTADDRESS)

**Contact address** is entity which inherits all fields from ADDRESS entity. In addition there are these fields:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | ENUM | Address type. ENUM values: PERMANENT\_RESIDENCE, SECONDARY\_RESIDENCE, COMPANY\_RESIDENCE, UNKNOWN |
| typeI18N | TEXT | Localized name of address type. |

## Contact Phone (CONTACTPHONE)

Description of **contact phone** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | ENUM | Phone type. ENUM: PRIVATE, COMPANY, UNKNOWN |
| typeI18N | TEXT | Localized name of phone type. |
| countryCallingCode | TEXT | Country calling code as international phone number prefix. E.g.: "0043" or "+43", "00420" or "+420", "00421" or "+421" |
| phoneNumber | TEXT | Phone number |

## Group Data Types

## Account

Description of **account** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | unique product id |
| accountno | ACCOUNTNO | Account number of this account. |
| alias | TEXT | User defined account name. |
| description | TEXT | Account description. Currently account owner name is returned. |
| balance | AMOUNT | Actual account balance. For loans this field contains outstanding principal. |
| disposable | AMOUNT | Disposable account balance. |
| type | ENUM | Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans) |
| subtype | ENUM | Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, GIRO_ACCOUNT, FOREIGN_ACCOUNT), SAVING (SAVING_ACCOUNT, TERM_DPOSIT, SAVING_PLUS), LOAN (LOAN_ACCOUNT, MORTGAGE). |
| productI18N | TEXT | Product description localized. |
| product | TEXT | Product code. |
| overdraft.value | NUMBER | Exists only for current accounts. |
| overdraft.precision | TEXT | Overdraft precision. |
| overdraft.currency | TEXT | Overdraft currency. |
| overdraftDueDate | DATE | Due date of overdraft. Only for overdrafts where automatic prolongation is not set. |
| flags | ARRAY | Array of flags for messages. |
| subaccounts.id | TEXT | Subaccount identifier. Currently only saving account linked to current account is returned. |
| subaccounts.accountno | ACCOUNTNO | Subaccount account number. |
| subaccounts.type | ENUM | Type of the subaccount product. Possible values are CURRENT, SAVING, LOAN. |
| subaccounts.subtype | ENUM | Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, GIRO_ACCOUNT, FOREIGN_ACCOUNT), SAVING (SAVING_ACCOUNT, TERM_DPOSIT, SAVING_PLUS), LOAN (LOAN_ACCOUNT, MORTGAGE). |
| subaccounts.product | TEXT | Subaccount product code. |
| subaccounts.productI18N | TEXT | Localized subaccount product code. |
| subaccounts.balance | AMOUNT | Subaccount balance. |
| subaccounts.creditInterestRate | NUMBER | Basic interest rate for subaccount. Value in percentage, e.g. 0,5 will be dispayed as 0,5 %. |
| subaccounts.cz-interestRateOverLimit | NUMBER | In case of interest rate bands this is the interest rate which applies to value over limit. |
| subaccounts.cz-interestRateLimit | AMOUNT | Limit amount for basic credit interest rate used for some saving accounts. |
| creditInterestRate | NUMBER | Basic credit Interest rate, used for Current and Saving account. Value in percentage, e.g. 0,5 will be dispayed as 0,5 %. |
| debitInterestRate | NUMBER | Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11,5 will be dispayed as 11,5 %. |
| penaltyInterestRate | NUMBER | For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19,5 will be dispayed as 19,5 %. |
| loan.interestRateToDate | DATE | For mortgages this is the date of interest rate validity. |
| loan.loanAmount | AMOUNT | For loans this is contracted value of the loan. |
| loan.maturityDate | DATE | For mortgages this is its maturity date. |
| loan.remainingLoanAmount | AMOUNT | For loans this is remaining amount for utilization. Basically this is disposable balance for loans. |
| loan.drawdownToDate | DATE | For loans and morgages this is last date when you can use money. |
| loan.drawdownAmount | AMOUNT | For mortgages this is actual drawdown amount. |
| loan.outstandingDebt | AMOUNT | For loans and mortgages this is value of the principal. Value which should be payed back to bank. |
| loan.cz-lumpsumRepayment | AMOUNT | Amount of money to onetime repay whole loan. |
| loan.installmentFrequency | ENUM | Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, WEEKLY. |
| loan.installmentDay | NUMBER | Day of the month when repayment should be payed (f.e. 22) |
| loan.nextRateAmount | AMOUNT | Loans and mortgages repayment amount. |
| loan.nextRateDate | DATE | Next date of the repayment (for loans). |
| saving.interestRateOverLimit | NUMBER | In case of interest rate bands this is the interest rate which applies to value over limit. |
| saving.interestRateLimit | AMOUNT | Limit amount for basic credit interest rate used for some saving accounts. |
| saving.cz-bonusInterestRate | NUMBER | Bonus interest rates which can be gained if certain conditions are met. |
| saving.savingGoal | TEXT | Saving purpose code (for some savings accounts) |
| saving.targetAmount | AMOUNT | For some savings accounts this is target amount of the saving. |
| saving.minimumBalance | AMOUNT | Minimum balance for some current and savings accounts. |
| ownTransferReceivers.id | TEXT | Identifier of the account which is allowed as a transfer receiver. If id is specified then you can find it among other accounts in GET /netbanking/my/accounts response. |
| ownTransferReceivers.accountno | ACCOUNTNO | Account number which is allowed as a transfer receiver. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| accountQueryAllowed | User may see the transaction list for this account. |
| ownTransferAllowed | Account may be used for transfer between own accounts. |
| domesticTransferAllowed | Account may be used for domestic payments. |
| collectiveSigning | Indicates if orders sended from this account have to be signed by at least two users. |
| internationalTransferAllowed | Account may be used for foreign payments. |
| urgentTransferAllowed | Account may be used for urgent transfers. |
| offline | Account is offline (no transactions can be requested), but still visible to the user. e.g. account is currently closing. |
| owner | Current user is owner of the account. |
| dcsAllowed | Account is enabled for "Data Carrier Service". |
| electronicStatementAllowed | User may see the electronic statements list and download statement for this account. |

## Account Light

Description of **account light** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | unique product id |
| accountno | ACCOUNTNO | Account number of this account. |
| alias | TEXT | User defined account name. |
| currency | TEXT | Account currency. |
| balance | AMOUNT | Actual account balance. For loans this field contains outstanding principal. |
| disposable | AMOUNT | Disposable account balance. |
| type | ENUM | Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans). |
| subtype | ENUM | Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, GIRO_ACCOUNT, FOREIGN_ACCOUNT), SAVING (SAVING_ACCOUNT, TERM_DPOSIT, SAVING_PLUS), LOAN (LOAN_ACCOUNT, MORTGAGE). |
| productI18N | TEXT | Product description localized. |
| product | TEXT | Product code. |
| subaccounts.id | TEXT | Linked savings account identifier. Linked savings account makes sense only for current accounts. |
| subaccounts.balance | AMOUNT | Current account balance. |
| loan.loanAmount | AMOUNT | For loans this is value of the loan. |
| loan.outstandingDebt | AMOUNT | For loans and mortgages this is value of the principal. Value which should be payed back to bank. |
| loan.installmentFrequency | ENUM | Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY. |
| loan.nextRateAmount | AMOUNT | Loans and mortgages repayment amount. |

## Account Balance

Description of **account balance** entity attributes:

| Attribute | Type | Description |
| ------ | ------- | ------ |
| balance | AMOUNT | Account balance for Current, Saved amount for Saving, Principal Outstanding for Loan/Mortgage. |
| disposable | AMOUNT | Disposable balance for Current account. |
| overdraft | AMOUNT | Overdraft amount for Current account. |

## Template

Description of **template** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | template ID |
| name | TEXT | name defined by user |
| orderCategory | TEXT | Order category. Possible values: DOMESTIC, INTERNATIONAL |
| receiver | ACCOUNTNO | Receiver account number. |

## Pension Contract

Description of **pension contract** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| alias | TEXT | User defined account name |
| signingDate | DATE | signing date |
| validFrom | DATE | valid from date |
| validTo | DATE | valid to date |
| id | TEXT | contract number, agreement number encrypted |
| agreementNumber | TEXT | non encrypted agreement number |
| status | TEXT | Contract status. Possible values: ACTIVE, TERMINATED, PENSION_PAYMENT, INTERRUPTED, PAYMENTS_SUSPENDED, PAYMENTS_DEFFERED, SETTLED, REPEALED, NEGOTIATED |
| productAccount.amount | AMOUNT | account balance |
| productAccount.date | DATE | date balance |
| productI18N | TEXT | product description |
| product | TEXT | product code |
| birthNumber | TEXT | birth number |
| paidBenefits | AMOUNT | benefits paid |
| strategy.conservative | NUMBER | conservative strategy |
| strategy.balanced | NUMBER | balanced strategy |
| strategy.dynamic | NUMBER | dynamic strategy |
| strategy.stateBonds | NUMBER | state bonds strategy |
| pensionAgreed.oldAge | BOOLEAN |old-age pension |
| pensionAgreed.disability | BOOLEAN | disability pension |
| pensionAgreed.earlyRetirement | NUMBER | early-retirement pension |
| savingTime.supplementary | NUMBER | supplementary pension saving time |
| savingTime.oldAge | NUMBER | old-age pension saving time |
| savingTime.earlyRetirement | NUMBER | early-retirement saving time |
| contribution.employer | BOOLEAN | employer contribution |
| contribution.participantAmount | AMOUNT | participant contribution value |
| contribution.otherPersonAmount | AMOUNT | other person contribution value |
| supplementary.email | EMAIL | email |
| supplementary.sms | TEXT | sms communication |
| supplementary.maxService | BOOLEAN | maximum service |
| supplementary.optService | BOOLEAN | optimum service |
| persons.firstName | TEXT | designed person first name|
| persons.lastName | TEXT | designed person last name |
| persons.birthDate | DATE | birth date |
| persons.birthNumber | TEXT | birth number |
| persons.address | ADDRESS | designed person address |
| persons.proportion | NUMBER | proportion |
| persons.contact | TEXT | contact |
| persons.contactDetail | TEXT | contact detail |
| persons.entitlement | TEXT | entitlement |

## Card

Description of **card** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | unique product id |
| alias | TEXT | users product name |
| owner | TEXT | product owner |
| number | TEXT | card number |
| sequenceNumber | TEXT | Card sequence number. The number distinguishing between separate cards (different plastic cards) with the same Primary Account Number (PAN) |
| productI18N | TEXT | Localized product name. |
| productCode | TEXT | Internal product code. |
| expiryDate | DATE | Expiration date of particular plastic card |
| validFromDate | DATE | Date from which this particular plastic card is valid |
| state | ENUM | Current state of card. Possible values: ACTIVE, INACTIVE (issued card not activated yet), LOCKED |
| type | ENUM | Type of card: credit, debit/bankcard. Possible Values: BANK_CARD (used for debit card too), CREDIT |
| provider | ENUM | Credit card provider/issuer: Erste Bank or external bank. Possible Values: ERSTE_BANK, EXTERNAL |
| lockReason | ENUM | Indicates reason for locking the card. Possible Values: THEFT, LOSS, FRAUD, OTHER |
| characteristic | ENUM | Card characteristics. Possible values: MAIN, AUTHORIZED |
| balance | AMOUNT | Disposable balance of current account linked to debit/bank card or Available balance of credit card (disposable balance of shadow account). Not available for all cards or states (locked, closed, unknown). |
| limit | AMOUNT | For credit card: Loan limit for card (shadow) account. |
| outstandingAmount | AMOUNT | Total outstanding/owed amount for credit card (the last known value). |
| minimalMonthlyAmount | AMOUNT | Minimal installment repayment amount for credit card (at previous cycle end date). |
| installmentDueDate | DATE | Installment repayment due date. |
| mainAccount.id | TEXT | Internal ID as reference for account provided by BE |
| mainAccount.accountno | ACCOUNTNO | Main account is credit card shadow account for credit card or linked main current account for bank/debit card. |
| mainAccount.holderName | TEXT | Full name of the main account's holder. |
| cz-overallCardAccountLimits.limitATM | AMOUNT | Daily ATM limit on credit line. Daily ATM limit for all credit cards issued to mainAccount |
| cz-overallCardAccountLimits.limitPOS | AMOUNT | Daily POS limit on credit line. Daily POS limit for all credit cards issued to mainAccount |
| cardDeliveryMode | TEXT | Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD |
| features | ARRAY | Array of optional features valid for given card. |
| flags | ARRAY | Array of optional Flag values depends on Card type. |

Possible features:

| Feature | Description |
| ------ | ------ |
| contactless | Indicates whether contactless technology is available for this card |
| secureOnlineShopping | Indicates whether secure online shopping is available for this card |
| reissuePin | Indicates whether reissuing a PIN is possible. |
| reissueCard | Indicates whether reissuing a card is possible. |
| limitChange | Indicates that card limits could be changed for this card. |
| temporaryLimitChange | Indicates that card temporary limits could be changed for this card. |
| onlineLocking | Indicates whether a card can be locked online. |
| cardDelivery | Indicates whether card delivery mode could be changed for this card |

Possible flags:

| Flag | Description |
| ------ | ------ |
| notAccountOwner | User is only holder of the card not owner of mainAccount |
| locked | indicates if card is blocked |
| contactlessEnabled | Indicates whether contactless functionality is active for given card |
| secureOnlineShoppingEnabled | Indicates that 3D secure online shopping functionality is active for this card |
| automaticReplacementOn | Indicates whether automatic card replacement is active for given card |
| cardDeliveryChangeEnabled | Indicates whether card delivery mode could be changed for this card. |

## Card Limits

Description of **card limits** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| limitType | ENUM | Limit type defines ATM, POS, internet/eCommerce, total limits. Possible Values: ATM, POS, INTERNET |
| limitPeriod | ENUM | Bank limit's period in days defined for limit type (default daily - 1D). Possible Values: 1D, 2D, 3D, 5D, 7D, 10D, 15D, 30D |
| limit | AMOUNT | Current limit amount valid for limit's type and period |
| temporaryLimit | AMOUNT | Temporary limit amount valid for limit's type and period |
| temporaryLimitExpiration | DATETIME | Temporary limit expiration date for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future. |
| bankLimit | AMOUNT | Maximum limit amount for card defined by bank valid for limit's type and period. |

## Card 3D Secure

Description of **card limits** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| status | ENUM | 3D secure functionality status. Possible Values: OK, NOT\_ACTIVATED |
| pam | TEXT | Personal Assurance Message (PAM) that user chose when activate 3D secure |
| phoneNumber | TEXT | Phone (used for OTP authentification) number Id coming from Contacts |
| language | TEXT | 3D Secure language |

## Profile

Description of **profile** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| firstname | TEXT | user's first name |
| lastname | TEXT | user's last name |
| salutation | TEXT | user's name used for salutation |
| customerId | TEXT | cluid |
| instituteId | NUMBER | number of institute |
| marketingInfoAcceptance | ENUM | Has the customer approved §107 telecommunication act. Possible values: ACCEPTED, NOT_ACCEPTED, UNKNOWN. |
| gender | ENUM | user's gender. Possible values: MALE, FEMALE, UNKNOWN. |
| lastlogin | DATETIME | Date and time of the last login of customer. Common last login for all client applications - George, QC, etc. |
Note: lastlogin field is exception in camel case usage.

## Profile Login Info

Description of **profile login info** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| lastlogin.channel | TEXT | Channel of the last login. |
| lastlogin.lastlogin | DATETIME | Date of the last login. |
Note: lastlogin field is exception in camel case usage. Even plural form of the field name is not used for array in this case.

## Payment

Description of **payment** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Internal identifier of payment order. Note that after signing of the order the id could change. |
| hash | HASH | Hash value calculated using common relevant payment order attributes to ensure the same unchanged logical object (payment order) every time during authorization signing process. |
| referenceId | TEXT | Transaction reference ID provided by BE when payment order was executed |
| orderCategory | ENUM | Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy). Possible values: DOMESTIC, OWN_TRANSFER, SEPA, INTERNATIONAL |
| orderType | ENUM | Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE. Values: PAYMENT\_OUT, DIRECT\_DEBIT\_IN |
| senderName | TEXT | sender name |
| sender | CZ-ACCOUNTNO | sender account number. |
| receiverName | TEXT | receiver name |
| receiver | IBAN | Receiver IBAN in case of international payments. |
| receiver | CZ-ACCOUNTNO | receiver account number. |
| amount | AMOUNT | payment amount |
| additionalInfo.text4x35 | ARRAY | Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35 |
| senderReference| TEXT | Message for me set during payment order creation. |
| executionDate | DATETIME | Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request) |
| transferDate | DATE | payment transfer date |
| expirationDate | DATETIME | Datetime till when payment order will be repeated on BE in the case of insufficient funds on account. |
| modificationDate | DATETIME | Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE) |
| applicationId | ENUM | ID of the application via which this payment order was entered/modified the last time. Possible values: GEORGE, ATM_PAYMENT, ATM_OTHER, GSM, BRANCH_FE, POST_OFFICE, INTERNET_BANKING, TELEPHONE_BANKER, COLLECTION_BOX, VIDEO_BANKER and UNKNOWN |
| channelId | ENUM | ID of the channel via which this payment order was entered/modified the last time. Possible values: NET_BANKING, ATM, MOBILE_BANKING, ATM, BRANCH, POST_OFFICE, CALL_CENTRE, VIDEO_BANKING and UNKNOWN | 
| state | ENUM | status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED |
| stateDetail | ENUM | State detail of payment order provided based on BE technical states. |
| stateOk | BOOLEAN | Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below. |
| cz-description | TEXT | description of payment order, transaction type |
| symbols.variableSymbol | TEXT | variable symbol |
| symbols.constantSymbol | TEXT | constant symbol |
| symbols.specificSymbol | TEXT | specific symbol |
| receiverAddress | ARRAY | Receiver's address. Array of 3x text fields with max 35 characters each. First text - Street, Second text - ZIP code and City, Third text - Country code, name. (Used only for International payments) |
| flags | ARRAY | Array of optional Flag values depends on Payment order category, type. |

Possible stateDetail values used to display relevant status info in FE are defined in following table (local API spec should define mapping to BE technical statuses):

| stateDetail | Meaning | StateOk |
| ------ | ------ |------ |
| OPN | Open - not signed yet | true |
| STO | Cancelled - storno | false |
| NGD | Insufficient funds - no disposable balance | false |
| TRM | Marked as scheduled payment | true |
| FUS | Unknown - finalized unknown | false |
| PNR | Payment Order from night register | true |
| FIN | Forwarded - finalized neutral | true |
| FIH | Forwarded - finalized today (current bankday) | true |
| ABG | Rejected - rejected, ask advisor | true |
| INB | Being processed - in process | true |

API Mapping of stateDetail values to state values is in following table (local API spec could define mapping to BE technical status):

| stateDetail | Meaning |
| ------ | ------ |
| OPEN | Order state in an OpenState (OPN) |
| SPOOLED | Order state in a SpoolState (NGD, TRM, PNR, INB) |
| CANCELLED | Order state in a CancelState (STO) |
| CLOSED | Order state in a ClosedState (FIH, FIN, ABG) |
| DELETED | Order state in a DeleteState (order with deleted flag from BE) |

Possible flags:

| Flag | Description |
| ------ | ------ |
| urgent | Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client. |
| editable | Flag indicating if payment order can be edited by client. |
| deletable | Flag indicating if payment order can be deleted by client. |
| cancelable | Flag indicating if future dated (already signed) payment order can be canceled by client |
| signable | Flag indicating if payment order can be signed by client. |
| redoNotPossible | Flag indicating if payment order can be re-done |

Description of **payment booking date** entity attributes:

| Attribute | Type | Description
| ------ | ------ | ------ |
| receiver | ACCOUNTNO | receiver's account number |
| priority | ENUM |  Payment order priority selected by user, ENUM values: URGENT (for express payments), STANDARD |
| bookingDate | DATETIME | booking date value for provided account ID and payment order |

## Payment Domestic

Description of **payment domestic** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Internal identifier of payment order. Note that after signing of the order the id could change. |
| hash | HASH | Hash value calculated using common relevant payment order attributes to ensure the same unchanged logical object (payment order) every time during authorization signing process. |
| orderCategory | ENUM | Payment order category determines whether payment is domestic, SEPA, international or inside the bank or between accounts of the same user. Possible values: DOMESTIC, SEPA, INTERNATIONAL, OWN\_TRANSFER (should be used instead of flags in current George AT), maybe INTRA\_BANK. |
| orderType | ENUM | Payment order type. Possible values: PAYMENT\_OUT (default value), DIRECT\_DEBIT\_OUT (not used so far), DIRECT\_DEBIT\_IN (incoming DD from partner's account bank) |
| senderName | TEXT | Name of the transferor |
| sender | CZ-ACCOUNTNO | Account number of transferor. |
| receiverName | TEXT | Name of the payee |
| receiver | CZ-ACCOUNTNO | Account number of payee |
| amount | AMOUNT | Payment order amount. |
| transferDate | DATE | Optional date (in the future) when this payment has to be done |
| executionDate | DATETIME | Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request) |
| modificationDate | DATETIME | Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE) |
| additionalInfo.text4x35 | ARRAY | Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35 |
| senderReference| TEXT | Message for me set during payment order creation. |
| symbols.variableSymbol | TEXT | Payment variable symbol |
| symbols.constantSymbol | TEXT | Payment constant symbol |
| symbols.specificSymbol | TEXT | Payment specific symbol |
| cz-skipCnbPrefixValidation | BOOLEAN | Indicates if there is validation of mandatory prefix for payments to central bank. |
| state | ENUM | State of payment order |
| stateDetail | ENUM | State detail of payment order |
| stateOk | Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table for stateDetail in Payment-object description. |
| channelId | ENUM | ID of the channel via which this payment order was entered/modified the last time. (This channel ID could be used for filtering in payment list in future). Possible values: NET_BANKING, MOBILE_BANKING, CALL_CENTRE, VIDEO_BANKING, BRANCH |
| applicationId | ENUM | ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future). Possible values: GEORGE, INTERNET_BANKING, TELEPHONE_BANKER, VIDEO_BANKER, BRANCH_FE, DONATION, GSM, ATM_PAYMENT and UNKNOWN
| flags | ARRAY | Array of optional Flag values depends on Payment order category, type. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| urgent | Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client |

## Reservation

Description of **reservation** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | TEXT | Type of reservation. |
| transactionDate | DATETIME | Transaction date and time. |
| expirationDate | DATETIME | Reservation expiration date. |
| merchantName | TEXT | Merchant Name / ATM. |
| merchantAddress | TEXT | Merchant address. |
| description | TEXT | Reservation description, additional info. |
| amount.value | NUMBER | Amount value. |
| amount.precision | NUMBER | Amount precision. |
| amount.currency | TEXT | Amount currency. |
| amountSender.value | NUMBER | Amount value. |
| amountSender.precision | NUMBER | Amount precision. |
| amountSender.currency | TEXT | Amount currency. |

## Standing Orders

Description of **standing order** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| number | TEXT | Internal number of the standing order respectively sweep order. |
| type | ENUM | Either STANDING\_ORDER or SWEEP\_ORDER. |
| status | TEXT | Represents the status of the order. |
| alias | TEXT | Alias name of standing order entered by user for his better orientation in standing order list. |
| receiverName | TEXT | Name of the beneficiary. |
| receiver | ACCOUNTNO | Receiver account number. |
| senderReference | TEXT | Message for payee set during payment order creation. It is used to identify transaction on receiver side. |
| amount | AMOUNT | The amount of the order. |
| startDate | DATETIME | Date when the order was created (readonly). |
| maxIterations | NUMBER | Maximum number of iterations - processing of the standing order. Only applicable in combination with executionMode AFTER_MAX_ITERATION_EXCEEDED. |
| maxAmount | AMOUNT | Maximum amount to be transferred using the standing order. Only applicable in combination with executionMode AFTER_MAX_AMOUNT_EXCEEDED. |
| nextExecutionDate | DATETIME | Date when the next order will be processed. |
| realExecutionDate | DATE | Date when the next order will be executed taking into account weekends and holidays. |
| stopDateFrom |DATE | Date since when the validity of the standing order is suspended. |
| stopDateTo | DATE | Date until the validity of the standing order is suspended. |
| lastExecutionDate | DATETIME | Date when the last order will be processed. Only applicable in combination with executionMode UNTIL\_DATE. |
| executionMode | ENUM | Execution mode. Possible values: UNTIL\_DATE or UNTIL\_CANCELLATION, AFTER\_MAX\_ITERATION\_EXCEEDED, MAX\_AMOUNT\_EXCEEDED |
| executionDueMode | ENUM | Execution due mode. Possible values: DUE\_DAY\_OF\_MONTH or DUE\_\LAST\_\DAY\_\OF\_MONTH |
| executionInterval | ENUM | Execution interval. Possible values: DAILY, WEEKLY, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR |
| intervalDueDay | NUMBER | Due day of month, day of month when the standing order will be reqularly executed. |
| intervalDueMonth | NUMBER | Due date month in execution interval of standing order processing. Possible values: N/A for DAILY, WEEKLY, MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY. |
| stoppages | ENUM | List of months where there is no payment (only applicable with interval IRREGULAR.) Possible values: JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER |
| symbols.variableSymbol | TEXT | Standing order variable symbol. |
| symbols.constantSymbol | TEXT | Standing order constant symbol. |
| symbols.specificSymbol | TEXT | Standing order specific symbol. |
| flags | ARRAY | Array of optional Flag values to Standing Order. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| editable | Indicates if an order is editable. |
| deletable | Indicates if an order is deletable. |

## Deposit Book

Description of **deposit book** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Deposit book identifier. |
| accountno | ACCOUNTNO | Deposit book account number. |
| currency | TEXT | Deposit book currency. |
| alias | TEXT | User-specific alias of the contract |
| balance | AMOUNT | Value of the balance. |
| interestRates.rateBelow | NUMBER | Interest rate used for value below the limit. |
| interestRates.rateAbove | NUMBER | Interest rate used for value above the limit. |
| interestRates.limit | AMOUNT | Value of the limit. |

## Insurance

Description of **insurance** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Contract number. |
| type | ENUM | Product Type of insurance. ENUM values: LIFE (CSAS supports only this value) |
| product | TEXT | Code of the sVersicherung product. |
| productI18N | TEXT | Name of the sVersicherung product (localised). |
| description | TEXT | Additional description of insurance product, additional charges, index applied to insurance contract |
| alias | TEXT | User-specific alias of the contract. |
| insurancePolicyHolder | TEXT | The primary holder of the specific insurance contract. |
| policyNumber | TEXT | Policy number |
| status | ENUM | ENUM: ACTIVE, CLOSED |
| life.premiumPaymentInterval | ENUM | Payment Interval. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN |
| life.premium | AMOUNT | The agreed premium for the specific insurance. |
| life.contractEndDate | DATE | The agreed end dates of the insurance contract. |
| life.contractStartDate | DATE | The contract start date. |
| life.insuredAmount | AMOUNT | The agreed amount insured or risk covered by the insurance. |
| life.currentCapitalValue | AMOUNT | Capital value of the insurance. Amount of money in saving part of the insurance. |
| life.expectedPayoffAmount | AMOUNT | Expected payoff amount value in the end of contract |

## Message

Description of **message** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Message identifier. |
| from | TEXT | Name of the message sender. For example source system of the message. |
| subject | TEXT | Message subject. |
| date | DATETIME | Date when message was sent/generated. |
| body | TEXT | Body of the message. Could be as html. |
| flags | ARRAY | Array of flags for messages. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| mandatory | Flag for mandatory message. |
| unread | This message is unread. |
| unsigned | This message is unsigned yet. |
| warning | Type of message is warning. |
| info | Type of message is information. |

## Securities Account

Description of **securities account** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Product id |
| accountno | TEXT | Account identification number of security portfolio (MUIN) |
| alias | TEXT | Alias for security portfolio |
| description | TEXT | Description - Securities portfolio Account name, Name of principal account holder |
| balance | AMOUNT | Account balance value |
| subSecAccounts | ARRAY | Array of securities sub accounts |
| subSecAccounts.id | TEXT | Sub Securities Account ID |
| subSecAccounts.titles | ARRAY | Array of the titles within sub account. |
| subSecAccounts.titles.title | TEXT | Name of the security title. |
| subSecAccounts.titles.isin | TEXT | ISIN - identifier of the security title. |
| subSecAccounts.titles.numberOfShares | NUMBER | Number of securities/shares  |
| subSecAccounts.titles.lastPrice | AMOUNT | Last Price of Securities title |
| subSecAccounts.titles.lastPriceDate | DATETIME | Date of securities last price evaluation |
| subSecAccounts.titles.marketValue | AMOUNT | Market value of the securities title. |
| subSecAccounts.titles.securityType | ENUM | Security Product Type. Possible values: BOND, SHARE, FUND, IPO, OPTION, OTHER, INDEX, CERTIFICATE, INVESTMENT,KNOCKOUT, UNKNOWN. |
| subSecAccounts.titles.productGroup | ENUM | Security Product Group. Possible values: BONDS_AND_MORE, GUARANTEE_OF_PRINCIPAL, NO_GUARANTEE_OF_PRINCIPAL, REAL_ESTATE, SHARES, STOCK_AND_MIXED, INVESTMENT, KNOCK_OUT, UNKNOWN. |
| subSecAccounts.titles.securityIndication | TEXT | Localized security indication depending on security type and product group |

## Payment Limit

Description of **payment limit** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| authorizationType | ENUM | Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken. Other local authorization type has to be defined |
| chanelId | ENUM | ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - remaining limit amount valid for all channels, not particulary defined |
| applicationId | ENUM | ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - remaining limit amount valid for all applications, not particulary defined |
| remainingAmount | AMOUNT | Remaining Daily amount which can be transferred using particular authorization method and channel (\_embedded AMOUNT type). |


## Authorization Limit

Description of **authorization limit** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Internal ID for limit definition for authorization type, channel, application. If internal ID doesn't exist, ID could be generated using authorizationType, channelId and applicationId values. |
| authorizationType | ENUM | Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken other local authorization type has to be defined. |
| channelId | ENUM | ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - limit valid for all channels, not particulary defined. |
| applicationId | ENUM | ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - limit valid for all applications, not particulary defined. |
| dailyLimit | AMOUNT | Daily limit for particular authorization method (\_embedded AMOUNT type) |
| transactionLimit | AMOUNT | Transaction limit for particular authorization method (\_embedded AMOUNT type). |
| maxBankLimit | AMOUNT | Maximal daily limit for authorization method defined by bank (\_embedded AMOUNT type). |

## Building Saving

Description of **building saving** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Building saving identifier. |
| accountno | ACCOUNTNO | Building saving account number. |
| alias | TEXT | User-specific alias of the contract |
| type | ENUM | Type of the account. Possible values are BUILD\_SAVING and BUILD\_LOAN. |
| product | TEXT | Product code. |
| productI18N | TEXT | Product name. |
| balance | AMOUNT | Building savings account balance. For loans outstanding debt is served. |
| status | ENUM | Status of the contract. Possible values are ACTIVE and CLOSED. |
| contractHolders | ARRAY | Debtor. Will only by set for loans. |
| creditInterestRate | NUMBER | Basic credit interest rate, used for building saving deposits. Value in percentage, e.g. 1,5 will be dispayed as 1,5%. |
| debitInterestRate | NUMBER | Basic debit interest rate, used for building loan. Value in percentage, e.g. 9,5 will be dispayed as 9,5%. |
| saving.targetAmount | AMOUNT | Target amount. Will not be set for loans. |
| saving.agreedMonthlySavings | AMOUNT | Agreed monthly savings amount for building savings. Will not be set for loans. |
| saving.expiryDate | DATETIME | Notice period expiry date. Not set for loans. |
| saving.bonusBearingDepositToPay | AMOUNT | Remaining deposit to be paid to Building Savings till the end of this year to get annual maximal bonus. |
| loan.loanAmount | AMOUNT | Total contracted building loan amount. |
| loan.loanInstallment | AMOUNT | Installment part of the loan monthly repayment. |
| loan.additionalSavings | AMOUNT | Saving part of the loan monthly repayment. |
| loan.paymentInsurance | AMOUNT | Insurance part of the loan monthly repayment. |
| loan.interestRateFromDate | DATE | Current interest rate is valid from this date. Filled only for loans. |
| loan.interestRateToDate | DATE | Current interest rate is valid to this date. Filled only for loans in case of variable interest rate. If interest rate is fixed, this field is empty. |
| flags | ARRAY | List of flags. |

Possible flags:

| Flags | Description |
| ------ | ------ |
| notRequestedBonus | Indication whether subsidy request was made. Relevant only for savings. |

## Codetable

Description of **codetable** item entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| items.key | TEXT | Codetable item key. |
| items.values | ARRAY | Array of string values which are set to given key. |

## Setting

Description of **setting** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| language | TEXT | Preferred language. |
| landingAccountId | TEXT | Landing account identification. |
| tacPhoneNumbers | ARRAY | Array of available phone numbers (simple strings) to send a tac to. Phone numbers are masked f. e. +43777xx777. |
| authorizationType | ENUM | Authorization type this user uses. Possible values are "TAN" and "TAC". |
| passwordExpiresInDays | NUMBER | How many days until password expires. |
| flags | ARRAY | List of flags. |

Possible flags:

| Flags | Description |
| ------ | ------ |
| displayInsurances | Insurance contracts are displayed in online banking. |
| displayLeasings | Leasing contracts are displayed in online banking. |
| displayBuildings | Buildings society contracts are displayed in online banking. |
| displayCreditCards | Credit cards are displayed in online banking. |
| displayInvestments | Investment securities are displayed in online banking (George). |

## Product Instance Setting

Description of **product instance setting** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Product instance identifier. |
| color | TEXT | Color identifier. Something like COLOR\_1, COLOR\_2 and so on... |
| colorCode | TEXT | Color code in form of #5792B2. |
| hidden | BOOLEAN | Indication whether product instance should be hidden. |
| position | NUMBER | Position of the product instance in overview. |
| alias | TEXT | Product instance alias. |

## Contract

Description of **contract** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| contract | BOOLEAN | Flag which indicates whether client had agreed with contract or not. |

## Contact

Description of **contact** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Contact ID |
| type | ENUM | Type of contact. ENUM values: ADDRESS, PHONE, EMAIL, FAX. |
| flags | ARRAY | Contact flags |
| address | CONTACTADDRESS | Contact address |
| phone | CONTACTPHONE | Contact phone |
| email.email | EMAIL | Primary contact email address |
| email.type | ENUM | Email type. ENUM values: PRIVATE, COMPANY, UNKNOWN |
| email.typeI18N | TEXT | Localized name of email type. |

Possible flags:

| Flags | Description |
| ------ | ------ |
| mainContact | Particular contact is marked as main contact. |
| editable | Contact is editable by the user |
| deletable | Contact is deletable by the user |

## Service

Description of **service** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | service ID |
| nameI18N | TEXT | service name |
| iconGroup | TEXT | Icon Group |
| dateFrom | DATE | date from |
| dateTo | DATE | date to |

## Card Delivery

Description of **card delivery** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| cardDeliveryMode | ENUM | Type of the delivery which should be set for this card. Possible values are BRANCH, OTHER_BRANCH, HOME, ADDRESS_ABROAD. |
| branchId | TEXT | Identification of the branch where card will be ready to takeover. |
| address | ADDRESS | Address where card should be sent. |
| deliveryPassword | TEXT | Password used when card is delivered. |
| deliveryPhone | TEXT | Phone number of the client. |
| confirmations.email | EMAIL | Email address where confirmation should be sent. |
| confirmations.language | ENUM | Language of the confirmation email. Possible values are "en" and "cs". |

## Card Action

Description of **card action** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| action | ENUM | Action which should be issued. Possible values are "REISSUE_PIN", "LOCK_CARD", "ACTIVATE_CARD", "SET_AUTOMATIC_REPLACEMENT_ON", "SET_AUTOMATIC_REPLACEMENT_OFF". |
| lockReason | ENUM | Reason why card should be locked. Possible values are "THEFT" and "LOSS". Relevant only for action "LOCK_CARD". |
| confirmations.email | EMAIL | Email address where confirmation should be sent. |
| confirmations.language | ENUM | Language of the confirmation email. Possible values are "en" and "cs". |

## Standing Payment Order

Description of **standing order** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| number | TEXT | Internal number of the standing order respectively sweep order |
| type | TEXT | Either STANDING\_ORDER or SWEEP\_ORDER |
| status | TEXT | Represents the status of the order. Possible value: OK |
| receiverName | TEXT | Name of the beneficiary |
| receiver | ACCOUNTNO | receiver account number |
| senderReference | TEXT | An external reference identification of the payer |
| sender | ACCOUNTNO | Account data of the payer |
| paymentReference | TEXT | A reference identification for the payment. Either paymentReference or intendedPurpose must be set, but not both |
| intendedPurpose | TEXT | The intended purpose for the payment. Either paymentReference or intendedPurpose must be set, but not both |
| amount | AMOUNT | The amount of the order |
| startDate | DATETIME | Date when the order was created (readonly) |
| nextExecutionDate | DATETIME | Date when the next order will be processed |
| lastExecutionDate | DATETIME | Date when the last order will be processed. Only applicable in combination with executionMode UNTIL_DATE |
| executionMode | TEXT | Execution mode. Possible values: UNTIL\_DATE or UNTIL\_CANCELLATION |
| executionDueMode | DATE | Execution due mode. Possible values: DUE\_DAY\_OF\_MONTH or DUE\_LAST\_DAY\_OF\_MONTH |
| executionInterval | TEXT | The orders execution period. Possible values: MONTHLY, QUARTERLY, SEMI\_ANNUAL, ANNUALLY |
| orderId | TEXT | The id of the order that has just been created by the POST request. Mainly used in the signing process |
| symbols.variableSymbol | TEXT | Standing order variable symbol |
| symbols.constantSymbol | TEXT | Standing order constant symbol |
| symbols.specificSymbol | TEXT | Standing order specific symbol |
| dueDay | NUMBER | Due day of month, day of month when the standing order will be reqularly executed |

Possible flags:

| Flag | Description |
| ------ | ------ |
| deleted | Give sign that call will be used to delete standing order. |
| editable | Indicates if an order is editable. |

## Direct Debit

Description of **Direct Debit** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| number| TEXT | Order number of the direct debit approval. It is unique per approval. Several versions of an approval have the same order number. |
| type | ENUM | Type of the approval. Possible values are DIRECT_DEBIT or SIPO. |
| receiver | ACCOUNTNO | Account number of the receiver. |
| alias | TEXT | Approval name chosen by the user. |
| limit | AMOUNT | Limit for the single direct debit. |
| limitSum | AMOUNT | Limit for the whole period. |
| limitNumber | NUMBER | Limit for the number of direct debits for the period. |
| startDate | DATE | Beginning date for the approval. |
| endDate | DATE | End date for the approval. |
| symbols | structure | Symbols structure for VS, SS, KS. |
| symbols.variableSymbol | TEXT | Variable symbol. |
| symbols.specificSymbol | TEXT | Specific symbol. |
| symbols.constantSymbol | TEXT | Constant symbol. |
| dueMonth | NUMBER | The order of the month in the period when direct debits are acceptable. This must he null for period at least one month. |
| dayFrom | NUMBER | The number of the day in month. From this day direct debits are acceptable. This can be not null only for period longer then one month. |
| dayTo | NUMBER | The number of the day in month. To this day direct debits are acceptable. |
| versionId | NUMBER | Unique identifier for version of the direct debit approval. |
| versionValidityDate | DATE | Date when the version comes into use. |
| periodicity | NUMBER | Number of period cycles in one period. |
| periodCycle | ENUM | Unit of the period cycle. Possible values are HALFYEARLY, MONTHLY, QUARTERLY, YEARLY, DAILY, WEEKLY, OTHER. |

## iBod

Description of **ibod account** entity attributes:

| attribute | type | description |
| ------ | ------ | ------ |
| state | ENUM | State of the ibod account. Possible values are REGISTERED, UNREGISTERED, DEACTIVATED\_FROM\_FSCS, DEACTIVATED\_FROM\_IBOD. |
| exportDate | DATETIME | Date when data were actual. |
| pointsCount | NUMBER | IBod points count. |
| activationCode | TEXT | Activation ibod code. |

## Editable Transaction

Object contains fields of the transaction which are editable by client.
Description of **editable transaction** entity attributes:

| attribute | type | description |
| ------ | ------ | ------ |
| id | TEXT | Transaction identifier. |
| note | TEXT | Personal, user specific note for transaction. |
| flags | ARRAY | List of flags. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| hasStar | Indication that transaction is marked as important for client. |
| hasNote | Not editable flag. But if note is saved/deleted then this flag would appear/disappear. |

## Group Resources 

For all type of resource calls is table which specify if attribute is mandatory, optional or not applicable.

* "m" - mandatory
* "o" - optional
* "-" - not applicable

## Accounts [/netbanking/my/accounts{?size,page,sort,order,type}] 

For **account** entity description see Account in Data Types section.

### Get Accounts List [GET]

Get a possibly empty list of all accounts this user owns. Per default this call delivers all types of accounts. It is possible to filter for certain product by using the type URI parameter.

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: iban, disposable, balance


| Attribute | General | Current Accounts | Saving Accounts | Mortgage (Deprecated) | Loans |
| ------ | ------ | ------ | ------ | ------ | ------ |
| pageNumber | o | o | o | o | o |
| pageCount | o | o | o | o | o |
| pageSize | o | o | o | o | o |
| nextPage | o | o | o | o | o |
| accounts | o | o | o | o | o | 
| accounts.id | m | m | m | m | m |
| accounts.accountno | m | m | m | m | m |
| accounts.accountno.cz-iban | m | m | m | m | m |
| accounts.accountno.cz-bic | m | m | m | m | m |
| accounts.accountno.number | m | m | m | m | m |
| accounts.accountno.bankCode | m | m | m | m | m |
| accounts.accountno.countryCode | o | o | o | o | o |
| accounts.alias | o | o | o | o | o |
| accounts.description | o | o | o | o | o |
| accounts.balance | m | m | m | m | m |
| accounts.balance.value | m | m | m | m | m |
| accounts.balance.precision | m | m | m | m | m |
| accounts.balance.currency | m | m | m | m | m |
| accounts.disposable | o | m | m | - | - |
| accounts.disposable.value | m | m | m | - | - |
| accounts.disposable.precision | m | m | m | - | - |
| accounts.disposable.currency | m | m | m | - | - |
| accounts.type | m | m | m | m | m |
| accounts.subtype | m | m | m | m | m |
| accounts.productI18N | m | m | m | m | m |
| accounts.product | m | m | m | m | m |
| accounts.overdraft | o | o | - | - | - |
| accounts.overdraft.value | m | m | - | - | - |
| accounts.overdraft.precision | m | m | - | - | - |
| accounts.overdraft.currency | m | m | - | - | - |
| accounts.overdraftDueDate | o | o | - | - | - |
| accounts.flags | o | o | o | o | o |
| accounts.subaccounts | o | o | - | - | - |
| accounts.subaccounts.id | m | m | - | - | - |
| accounts.subaccounts.accountno | m | m | - | - | - |
| accounts.subaccounts.accountno.cz-iban | m | m | - | - | - |
| accounts.subaccounts.accountno.cz-bic | m | m | - | - | - |
| accounts.subaccounts.accountno.number | m | m | - | - | - |
| accounts.subaccounts.accountno.bankCode | m | m | - | - | - |
| accounts.subaccounts.accountno.countryCode | o | o | - | - | - |
| accounts.subaccounts.type | m | m | - | - | - |
| accounts.subaccounts.subtype | m | m | - | - | - |
| accounts.subaccounts.product | m | m | - | - | - |
| accounts.subaccounts.productI18N | m | m | - | - | - |
| accounts.subaccounts.balance | m | m | - | - | - |
| accounts.subaccounts.balance.value | m | m | - | - | - |
| accounts.subaccounts.balance.precision | m | m | - | - | - |
| accounts.subaccounts.balance.currency | m | m | - | - | - |
| accounts.subaccounts.creditInterestRate | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateOverLimit | o | o | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit | o | o | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.value | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.precision | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.currency | m | m | - | - | - | 
| accounts.creditInterestRate | o | o | m | - | - |
| accounts.debitInterestRate | o | - | - | m | m |
| accounts.penaltyInterestRate | o | - | - | - | o |
| accounts.loan | o | - | - | o | o |
| accounts.loan.interestRateToDate | o | - | - | o | - |
| accounts.loan.loanAmount | o | - | - | o | o |
| accounts.loan.loanAmount.value | m | - | - | m | m |
| accounts.loan.loanAmount.precision | m | - | - | m | m |
| accounts.loan.loanAmount.currency | m | - | - | m | m |
| accounts.loan.maturityDate | o | - | - | o | - |
| accounts.loan.remainingLoanAmount | o | - | - | o | o |
| accounts.loan.remainingLoanAmount.value | m | - | - | m | m |
| accounts.loan.remainingLoanAmount.precision | m | - | - | m | m |
| accounts.loan.remainingLoanAmount.currency | m | - | - | m | m |
| accounts.loan.drawdownToDate | o | - | - | o | o |
| accounts.loan.drawdownAmount | o | - | - | o | - |
| accounts.loan.drawdownAmount.value | m | - | - | m | - |
| accounts.loan.drawdownAmount.precision | m | - | - | m | - |
| accounts.loan.drawdownAmount.currency | m | - | - | m | - |
| accounts.loan.outstandingDebt | o | - | - | o | o |
| accounts.loan.outstandingDebt.value | m | - | - | m | m |
| accounts.loan.outstandingDebt.precision | m | - | - | m | m |
| accounts.loan.outstandingDebt.currency | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment | o | - | - | o | o |
| accounts.loan.cz-lumpsumRepayment.value | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment.precision | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment.currency | m | - | - | m | m |
| accounts.loan.installmentFrequency | o | - | - | o | o |
| accounts.loan.installmentDay | o | - | - | o | o |
| accounts.loan.nextRateAmount | o | - | - | o | o |
| accounts.loan.nextRateAmount.value | m | - | - | m | m |
| accounts.loan.nextRateAmount.precision | m | - | - | m | m |
| accounts.loan.nextRateAmount.currency | m | - | - | m | m |
| accounts.loan.nextRateDate | o | - | - | o | o |
| accounts.saving | o | - | o | - | - |
| accounts.saving.interestRateOverLimit | o | - | o | - | - |
| accounts.saving.interestRateLimit | o | - | o | - | - |
| accounts.saving.interestRateLimit.value | m | - | m | - | - |
| accounts.saving.interestRateLimit.precision | m | - | m | - | - |
| accounts.saving.interestRateLimit.currency | m | - | m | - | - |
| accounts.saving.cz-bonusInterestRate | o | - | o | - | - |
| accounts.saving.savingGoal | o | - | o | - | - |
| accounts.saving.targetAmount | o | - | o | - | - |
| accounts.saving.targetAmount.value | m | - | m | - | - |
| accounts.saving.targetAmount.precision | m | - | m | - | - |
| accounts.saving.targetAmount.currency | m | - | m | - | - |
| accounts.saving.minimumBalance | o | - | o | - | - |
| accounts.saving.minimumBalance.value | m | - | m | - | - |
| accounts.saving.minimumBalance.precision | m | - | m | - | - |
| accounts.saving.minimumBalance.currency | m | - | m | - | - |
| accounts.ownTransferReceivers | o | - | o | - | - |
| accounts.ownTransferReceivers.id | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno.cz-iban | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno.cz-bic | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno.number | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno.bankCode | m | - | m | - | - |
| accounts.ownTransferReceivers.accountno.countryCode | o | - | o | - | - |

Mortgage is deprecated. Instead of Mortgage is used Loan type.

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[ACCOUNT], optional) - Array of all accounts which current user has rights for.
        - Include PAGINATION
-->

+ Parameters
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.
    + type: CURRENT (string, optional) ... An optional comma-separated list of requested product types.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048
            
+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "accounts": [
                    {
                        "id": "CCA4F9863D686D04",
                        "accountno": {
                            "cz-iban": "AT742099900000000018",
                            "cz-bic": "SPBAAT20XXX",
                            "number": "20031692500",
                            "bankCode": "0800"
                        },
                        "alias": "moj osobny ucet s kasickou",
                        "balance": {
                            "value": 8965200,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "disposable": {
                            "value": 0,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "type": "CURRENT",
                        "subtype": "CURRENT_ACCOUNT",
                        "productI18N": "Osobní účet ČS II",
                        "product": "54",
                        "overdraft": {
                            "value": 2000000,
                            "precision": 2,
                            "currency": "CZK" 
                        },
                        "overdraftDueDate": "2015-07-31",
                        "flags": [
                            "accountQueryAllowed",
                            "collectiveSigning",
                            "domesticTransferAllowed",
                            "internationalTransferAllowed",
                            "ownTransferAllowed",
                            "urgentTransferAllowed"
                        ],
                        "subaccounts": [
                            {
                                "id": "jf893kzf9jfdl893",
                                "accountno": {
                                    "cz-iban": "AT742099900000000019",
                                    "cz-bic": "SPBAAT21XXX",
                                    "number": "000000-20031692501",
                                    "bankCode": "0800"
                                },
                                "type": "SAVING",
                                "subtype": "SAVING_ACCOUNT",
                                "product": "52",
                                "productI18N": "Peníze stranou",                                
                                "balance": {
                                    "value": 2000000,
                                    "precision": 2,
                                    "currency": "CZK"
                                },
                                "creditInterestRate": 1.00
                            }
                        ]
                    },
                    {
                        "id": "CCA4F9863D686D05",
                        "accountno": {
                            "cz-iban": "AT742099900000000028",
                            "cz-bic": "SPBAAT30XXX",
                            "number": "000000-20031692510",
                            "bankCode": "0800"
                        },
                        "alias": "moje sporenie",
                        "balance": {
                            "value": 6200000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "disposable": {
                            "value": 0,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_ACCOUNT",
                        "productI18N": "Spoření ČS",
                        "product": "48",
                        "flags": [
                            "savingsAccount",
                            "ownTransferAllowed"
                        ],
                        "saving": {
                            "targetAmount": {
                                "value": 10000000,
                                "precision": 2,
                                "currency": "CZK"                            
                            }   
                        }
                    },
                    {
                        "id": "CCA4F9863D686D05",
                        "accountno": {
                            "cz-iban": "AT742099900000000128",
                            "cz-bic": "SPBAAT30XXX",
                            "number": "20031692610",
                            "bankCode": "0800"
                        },
                        "alias": "moj uver",
                        "balance": {
                            "value": 8000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "LOAN",
                        "subtype": "LOAN_ACCOUNT",
                        "productI18N": "Spotřebitelský úvěr",
                        "product": "98",
                        "flags": [
                            "loanAccount"
                        ],
                        "loan": {
                            "loanAmount": {
                                "value": 40000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "remainingLoanAmount": {
                                "value": 32000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "outstandingDebt": {
                                "value": 8000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "drawdownToDate": "2014-11-27",
                            "cz-lumpsumRepayment": {
                                "value": 8245100,
                                "precision": 2,
                                "currency": "CZK"
                            }
                        }
                    }
                ]
            } 

### Get Accounts List - Light [GET /netbanking/my/accounts{?light,size,page,sort,order,type}] 

Get a possibly empty list of all accounts this user owns with restricted set of data. Per default this call delivers all types of accounts. It is possible to filter for certain product by using the type URI parameter.
For **account light** entity description see Account Light in Data Types section.

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: iban, disposable, balance

| Attribute | General | Current Accounts | Saving Accounts | Mortgage (deprecated) | Loans |
| ------ | ------ | ------ | ------ | ------ | ------ |
| pageNumber | o | o | o | o | o |
| pageCount | o | o | o | o | o |
| pageSize | o | o | o | o | o |
| nextPage | o | o | o | o | o |
| accounts | o | o | o | o | o |
| accounts.id | m | m | m | m | m |
| accounts.accountno | m | m | m | m | m |
| accounts.accountno.cz-iban | m | m | m | m | m |
| accounts.accountno.cz-bic | m | m | m | m | m |
| accounts.accountno.number | m | m | m | m | m |
| accounts.accountno.bankCode | m | m | m | m | m |
| accounts.accountno.countryCode | o | o | o | o | o |
| accounts.alias | o | o | o | o | o |
| accounts.balance | m | m | m | m | m |
| accounts.balance.value | m | m | m | m | m |
| accounts.balance.precision | m | m | m | m | m |
| accounts.balance.currency | m | m | m | m | m |
| accounts.disposable | o | m | o | - | - |
| accounts.disposable.value | m | m | m | - | - |
| accounts.disposable.precision | m | m | m | - | - |
| accounts.disposable.currency | m | m | m | - | - |
| accounts.type | m | m | m | m | m |
| accounts.subtype | m | m | m | m | m |
| accounts.productI18N | m | m | m | m | m |
| accounts.product | m | m | m | m | m |
| accounts.subaccounts | o | o | - | - | - |
| accounts.subaccounts.id | m | m | - | - | - |
| accounts.subaccounts.balance | m | m | - | - | - |
| accounts.subaccounts.balance.value | m | m | - | - | - |
| accounts.subaccounts.balance.precision | m | m | - | - | - |
| accounts.subaccounts.balance.currency | m | m | - | - | - |
| accounts.loan | o | - | - | o | o |
| accounts.loan.loanAmount | o | - | - | o | o |
| accounts.loan.loanAmount.value | m | - | - | m | m |
| accounts.loan.loanAmount.precision | m | - | - | m | m |
| accounts.loan.loanAmount.currency | m | - | - | m | m |
| accounts.loan.outstandingDebt | o | - | - | o | o |
| accounts.loan.outstandingDebt.value | m | - | - | m | m |
| accounts.loan.outstandingDebt.precision | m | - | - | m | m |
| accounts.loan.outstandingDebt.currency | m | - | - | m | m |
| accounts.loan.installmentFrequency | o | - | - | o | o |
| accounts.loan.nextRateAmount | o | - | - | o | o |
| accounts.loan.nextRateAmount.value | m | - | - | m | m |
| accounts.loan.nextRateAmount.precision | m | - | - | m | m |
| accounts.loan.nextRateAmount.currency | m | - | - | m | m |

Mortgage is deprecated. Instead of Mortgage is used Loan type.

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[ACCOUNT_LIGHT], optional) - Array of all accounts (light version) which current user has rights for.
        - Include PAGINATION
-->

+ Parameters
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.
    + type: CURRENT (string, optional) ... An optional comma-separated list of requested product types.
    + light: true (boolean, required) ... Indicates if output restricted only to important data.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048
            
+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "accounts": [
                    {
                        "id": "CCA4F9863D686D04",
                        "accountno": {
                            "cz-iban": "AT742099900000000018",
                            "cz-bic": "SPBAAT20XXX",
                            "number": "20031692500",
                            "bankCode": "0800"
                        },
                        "alias": "moj osobny ucet s kasickou",
                        "balance": {
                            "value": 8965200,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "disposable": {
                            "value": 0,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "type": "CURRENT",
                        "subtype": "CURRENT_ACCOUNT",
                        "productI18N": "Osobní účet ČS II",
                        "product": "54",
                        "subaccounts": [
                            {
                                "id": "jf893kzf9jfdl893",
                                "balance": {
                                    "value": 2000000,
                                    "precision": 2,
                                    "currency": "CZK"
                                }
                            }
                        ]
                    },
                    {
                        "id": "CCA4F9863D686D05",
                        "accountno": {
                            "cz-iban": "AT742099900000000028",
                            "cz-bic": "SPBAAT30XXX",
                            "number": "000000-20031692510",
                            "bankCode": "0800"
                        },
                        "alias": "moje sporenie",
                        "balance": {
                            "value": 6200000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_ACCOUNT",
                        "productI18N": "Spoření ČS",
                        "product": "48"
                    },
                    {
                        "id": "CCA4F9863D686D05",
                        "accountno": {
                            "cz-iban": "AT742099900000000128",
                            "cz-bic": "SPBAAT30XXX",
                            "number": "20031692610",
                            "bankCode": "0800"
                        },
                        "alias": "moj uver",
                            "balance": {
                            "value": 8000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "LOAN",
                        "subtype": "LOAN_ACCOUNT",
                        "productI18N": "Spotřebitelský úvěr",
                        "product": "98",
                        "loan": {
                            "loanAmount": {
                                "value": 40000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "outstandingDebt": {
                                "value": 8000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "nextRateAmount": {
                                "value": 154000,
                                "precision": 2,
                                "currency": "CZK"                              
                            },
                            "installmentFrequency": "MONTHLY"
                        }
                    }
                ]
            } 

### Get Accounts List - Digest [GET /netbanking/my/accounts/digest{?size,page,sort,order}] 

Get a possibly empty list of all account numbers of the accounts this user owns. This version returns minimal information about each account and is usefull if a client needs to know how many accounts exist without needing the individual accounts details.

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: iban


| Attribute | General | IBAN version | Local account number version |
| ------ | ------ | ------ | ------ |
| pageNumber | o | o | o |
| pageCount | o | o | o |
| pageSize | o | o | o |
| nextPage | o | o | o |
| accounts | o | o | o |
| accounts.cz-iban | o | m | o |
| accounts.cz-bic | o | m | o |
| accounts.number | o | o | m |
| accounts.bankCode | o | o | m |
| accounts.countryCode | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[ACCOUNTNO_FULL], optional) - Array of all account numbers for accounts which current user has rights for.
        - Include PAGINATION
-->

+ Parameters
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048
            
+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "accounts": [
                    {
                        "cz-iban": "CZ742099900000000018",
                        "cz-bic": "GIBACZPX",
                        "number": "20031692500",
                        "bankCode": "0800"
                    },
                    {
                        "cz-iban": "CZ742099900000000028",
                        "cz-bic": "GIBACZPX",
                        "number": "000092-20031692510",
                        "bankCode": "0800"
                    },
                    {
                        "cz-iban": "CZ742099900000000128",
                        "cz-bic": "GIBACZPX",
                        "number": "20031692610",
                        "bankCode": "0800"
                    }
                ]
            } 

### Get Account Detail [GET /netbanking/my/accounts/{id}]

For **account** entity description see Account in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General | Current Accounts | Saving Accounts | Mortgage (deprecated) | Loans |
| ------ | ------ | ------ | ------ | ------ | ------ |
| id | m | m | m | m | m |
| accountno | m | m | m | m | m |
| accountno.cz-iban | m | m | m | m | m |
| accountno.cz-bic | m | m | m | m | m |
| accountno.number | m | m | m | m | m |
| accountno.bankCode | m | m | m | m | m |
| accountno.countryCode | o | o | o | o | o |
| alias | o | o | o | o | o |
| description | o | o | o | o | o |
| balance | m | m | m | m | m |
| balance.value | m | m | m | m | m |
| balance.precision | m | m | m | m | m |
| balance.currency | m | m | m | m | m |
| disposable | o | m | m | - | - |
| disposable.value | m | m | m | - | - |
| disposable.precision | m | m | m | - | - |
| disposable.currency | m | m | m | - | - |
| type | m | m | m | m | m |
| subtype | m | m | m | m | m |
| productI18N | m | m | m | m | m |
| product | m | m | m | m | m |
| overdraft | o | o | - | - | - |
| overdraft.value | m | m | - | - | - |
| overdraft.precision | m | m | - | - | - |
| overdraft.currency | m | m | - | - | - |
| overdraftDueDate | o | o | - | - | - |
| flags | o | o | o | o | o |
| subaccounts | o | o | - | - | - |
| subaccounts.id | m | m | - | - | - |
| subaccounts.accountno | m | m | - | - | - |
| subaccounts.accountno.cz-iban | m | m | - | - | - |
| subaccounts.accountno.cz-bic | m | m | - | - | - |
| subaccounts.accountno.number | m | m | - | - | - |
| subaccounts.accountno.bankCode | m | m | - | - | - |
| subaccounts.accountno.countryCode | o | o | - | - | - |
| subaccounts.type | m | m | - | - | - |
| subaccounts.subtype | m | m | - | - | - |
| subaccounts.product | m | m | - | - | - |
| subaccounts.productI18N | m | m | - | - | - |
| subaccounts.balance | m | m | - | - | - |
| subaccounts.balance.value | m | m | - | - | - |
| subaccounts.balance.precision | m | m | - | - | - |
| subaccounts.balance.currency | m | m | - | - | - |
| subaccounts.creditInterestRate | m | m | - | - | - | 
| subaccounts.cz-interestRateOverLimit | o | o | - | - | - | 
| subaccounts.cz-interestRateLimit | o | o | - | - | - | 
| subaccounts.cz-interestRateLimit.value | m | m | - | - | - | 
| subaccounts.cz-interestRateLimit.precision | m | m | - | - | - | 
| subaccounts.cz-interestRateLimit.currency | m | m | - | - | - | 
| creditInterestRate | o | o | m | - | - |
| debitInterestRate | o | - | - | m | m |
| penaltyInterestRate | o | - | - | - | o |
| loan | o | - | - | o | o |
| loan.interestRateToDate | o | - | - | o | - |
| loan.loanAmount | o | - | - | o | o |
| loan.loanAmount.value | m | - | - | m | m |
| loan.loanAmount.precision | m | - | - | m | m |
| loan.loanAmount.currency | m | - | - | m | m |
| loan.maturityDate | o | - | - | o | - |
| loan.remainingLoanAmount | o | - | - | o | o |
| loan.remainingLoanAmount.value | m | - | - | m | m |
| loan.remainingLoanAmount.precision | m | - | - | m | m |
| loan.remainingLoanAmount.currency | m | - | - | m | m |
| loan.drawdownToDate | o | - | - | o | o |
| loan.drawdownAmount | o | - | - | o | - |
| loan.drawdownAmount.value | m | - | - | m | - |
| loan.drawdownAmount.precision | m | - | - | m | - |
| loan.drawdownAmount.currency | m | - | - | m | - |
| loan.outstandingDebt | o | - | - | o | o |
| loan.outstandingDebt.value | m | - | - | m | m |
| loan.outstandingDebt.precision | m | - | - | m | m |
| loan.outstandingDebt.currency | m | - | - | m | m |
| loan.cz-lumpsumRepayment | o | - | - | o | o |
| loan.cz-lumpsumRepayment.value | m | - | - | m | m |
| loan.cz-lumpsumRepayment.precision | m | - | - | m | m |
| loan.cz-lumpsumRepayment.currency | m | - | - | m | m |
| loan.installmentFrequency | o | - | - | o | o |
| loan.installmentDay | o | - | - | o | - |
| loan.nextRateAmount | o | - | - | o | o |
| loan.nextRateAmount.value | m | - | - | m | m |
| loan.nextRateAmount.precision | m | - | - | m | m |
| loan.nextRateAmount.currency | m | - | - | m | m |
| loan.nextRateDate | o | - | - | o | o |
| saving | o | - | o | - | - |
| saving.interestRateOverLimit | o | - | o | - | - |
| saving.interestRateLimit | o | - | o | - | - |
| saving.interestRateLimit.value | m | - | m | - | - |
| saving.interestRateLimit.precision | m | - | m | - | - |
| saving.interestRateLimit.currency | m | - | m | - | - |
| saving.cz-bonusInterestRate | o | - | o | - | - |
| saving.savingGoal | o | - | o | - | - |
| saving.targetAmount | o | - | o | - | - |
| saving.targetAmount.value | m | - | m | - | - |
| saving.targetAmount.precision | m | - | m | - | - |
| saving.targetAmount.currency | m | - | m | - | - |
| saving.minimumBalance | o | - | o | - | - |
| saving.minimumBalance.value | m | - | m | - | - |
| saving.minimumBalance.precision | m | - | m | - | - |
| saving.minimumBalance.currency | m | - | m | - | - |
| ownTransferReceivers | o | - | o | - | - |
| ownTransferReceivers.id | m | - | m | - | - |
| ownTransferReceivers.accountno | m | - | m | - | - |
| ownTransferReceivers.accountno.cz-iban | m | - | m | - | - |
| ownTransferReceivers.accountno.cz-bic | m | - | m | - | - |
| ownTransferReceivers.accountno.number | m | - | m | - | - |
| ownTransferReceivers.accountno.bankCode | m | - | m | - | - |
| ownTransferReceivers.accountno.countryCode | o | - | o | - | - |

Mortgage is deprecated. Instead of Mortgage is used Loan type.

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (ACCOUNT)
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048 

+ Response 200 (application/json)

            {
                "id": "CCA4F9863D686D04",
                "accountno": {
                    "cz-iban": "AT742099900000000018",
                    "cz-bic": "SPBAAT20XXX",
                    "number": "20031692500",
                    "bankCode": "0800"
                },
                "alias": "moj osobny ucet s kasickou",
                "balance": {
                    "value": 8965200,
                    "precision": 2,
                    "currency": "CZK"
                },
                "disposable": {
                    "value": 0,
                    "precision": 2,
                    "currency": "EUR"
                },
                "type": "CURRENT",
                "subtype": "CURRENT_ACCOUNT",
                "productI18N": "Osobní účet ČS II",
                "product": "54",
                "overdraft": {
                    "value": 2000000,
                    "precision": 2,
                    "currency": "CZK"                    
                },
                "overdraftDueDate": "2015-07-31",
                "flags": [
                    "accountQueryAllowed",
                    "collectiveSigning",
                    "domesticTransferAllowed",
                    "internationalTransferAllowed",
                    "ownTransferAllowed",
                    "urgentTransferAllowed"
                ],
                "subaccounts": [
                    {
                        "id": "jf893kzf9jfdl893",
                        "accountno": {
                            "cz-iban": "AT742099900000000019",
                            "cz-bic": "SPBAAT21XXX",
                            "number": "000000-20031692501",
                            "bankCode": "0800"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_ACCOUNT",
                        "product": "52",
                        "productI18N": "Peníze stranou",                                
                        "balance": {
                            "value": 2000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "creditInterestRate": 1.00
                    }
                ]
            }

### Change Account Settings [PUT /netbanking/my/accounts/{id}]

For **account** entity description see Account in Data Types section.

Allows to change a limited set of account-settings of one specific account. Currently only the field alias can be changed. There is no need to sign this change.

Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Account object. Id in URL, id field and accountno field in payload: These fields must refer to the same account, else an error is returned.

Paginated - no

Signable - yes

Sortable - no

Request fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| accountno.cz-iban | m |
| accountno.cz-bic | m |
| accountno.number | m |
| accountno.bankCode | m |
| accountno.countryCode | o |
| alias | o |
| description | o |
| balance | m |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| disposable.value | m |
| disposable.precision | m |
| disposable.currency | m |
| type | m |
| subtype | m |
| productI18N | m |
| product | m |
| overdraft | o |
| overdraft.value | m |
| overdraft.precision | m |
| overdraft.currency | m |
| overdraftDueDate | o |
| flags | o |
| subaccounts | o |
| subaccounts.id | m |
| subaccounts.accountno | m |
| subaccounts.accountno.cz-iban | m |
| subaccounts.accountno.cz-bic | m |
| subaccounts.accountno.number | m |
| subaccounts.accountno.bankCode | m |
| subaccounts.accountno.countryCode | o |
| subaccounts.type | m |
| subaccounts.subtype | m |
| subaccounts.product | m |
| subaccounts.productI18N | m |
| subaccounts.balance | m |
| subaccounts.balance.value | m |
| subaccounts.balance.precision | m |
| subaccounts.balance.currency | m |
| subaccounts.creditInterestRate | m |
| subaccounts.cz-interestRateOverLimit | o |
| subaccounts.cz-interestRateLimit | o |
| subaccounts.cz-interestRateLimit.value | m |
| subaccounts.cz-interestRateLimit.precision | m |
| subaccounts.cz-interestRateLimit.currency | m |
| creditInterestRate | o |
| debitInterestRate | o |
| penaltyInterestRate | o |
| loan | o |
| loan.interestRateToDate | o |
| loan.loanAmount | o |
| loan.loanAmount.value | m |
| loan.loanAmount.precision | m |
| loan.loanAmount.currency | m |
| loan.maturityDate | o |
| loan.remainingLoanAmount | o |
| loan.remainingLoanAmount.value | m |
| loan.remainingLoanAmount.precision | m |
| loan.remainingLoanAmount.currency | m |
| loan.drawdownToDate | o |
| loan.drawdownAmount | o |
| loan.drawdownAmount.value | m |
| loan.drawdownAmount.precision | m |
| loan.drawdownAmount.currency | m |
| loan.outstandingDebt | o |
| loan.outstandingDebt.value | m |
| loan.outstandingDebt.precision | m |
| loan.outstandingDebt.currency | m |
| loan.cz-lumpsumRepayment | o |
| loan.cz-lumpsumRepayment.value | m |
| loan.cz-lumpsumRepayment.precision | m |
| loan.cz-lumpsumRepayment.currency | m |
| loan.installmentFrequency | o |
| loan.installmentDay | o |
| loan.nextRateAmount | o |
| loan.nextRateAmount.value | m |
| loan.nextRateAmount.precision | m |
| loan.nextRateAmount.currency | m |
| loan.nextRateDate | o |
| saving | o |
| saving.interestRateOverLimit | o |
| saving.interestRateLimit | o |
| saving.interestRateLimit.value | m |
| saving.interestRateLimit.precision | m |
| saving.interestRateLimit.currency | m |
| saving.cz-bonusInterestRate | o |
| saving.savingGoal | o |
| saving.targetAmount | o |
| saving.targetAmount.value | m |
| saving.targetAmount.precision | m |
| saving.targetAmount.currency | m |
| saving.minimumBalance | o |
| saving.minimumBalance.value | m |
| saving.minimumBalance.precision | m |
| saving.minimumBalance.currency | m |
| ownTransferReceivers | o |
| ownTransferReceivers.id | m |
| ownTransferReceivers.accountno | m |
| ownTransferReceivers.accountno.cz-iban | m |
| ownTransferReceivers.accountno.cz-bic | m |
| ownTransferReceivers.accountno.number | m |
| ownTransferReceivers.accountno.bankCode | m |
| ownTransferReceivers.accountno.countryCode | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| account | o |
| account.id | m |
| account.accountno |  |
| account.accountno.cz-iban | m |
| account.accountno.cz-bic | m |
| account.accountno.number | m |
| account.accountno.bankCode | m |
| account.accountno.countryCode | o |
| account.alias | o |
| account.description | o |
| account.balance | m |
| account.balance.value | m |
| account.balance.precision | m |
| account.balance.currency | m |
| account.disposable.value | m |
| account.disposable.precision | m |
| account.disposable.currency | m |
| account.type | m |
| account.subtype | m |
| account.productI18N | m |
| account.product | m |
| account.overdraft | o |
| account.overdraft.value | m |
| account.overdraft.precision | m |
| account.overdraft.currency | m |
| account.overdraftDueDate | o |
| account.flags | o |
| account.subaccounts | o |
| account.subaccounts.id | m |
| account.subaccounts.accountno | m |
| account.subaccounts.accountno.cz-iban | m |
| account.subaccounts.accountno.cz-bic | m |
| account.subaccounts.accountno.number | m |
| account.subaccounts.accountno.bankCode | m |
| account.subaccounts.accountno.countryCode | o |
| account.subaccounts.type | m |
| account.subaccounts.subtype | m |
| account.subaccounts.product | m |
| account.subaccounts.productI18N | m |
| account.subaccounts.balance | m |
| account.subaccounts.balance.value | m |
| account.subaccounts.balance.precision | m |
| account.subaccounts.balance.currency | m |
| account.subaccounts.creditInterestRate | m |
| account.subaccounts.cz-interestRateOverLimit | o |
| account.subaccounts.cz-interestRateLimit | o |
| account.subaccounts.cz-interestRateLimit.value | m |
| account.subaccounts.cz-interestRateLimit.precision | m |
| account.subaccounts.cz-interestRateLimit.currency | m |
| account.creditInterestRate | o |
| account.debitInterestRate | o |
| account.penaltyInterestRate | o |
| account.loan | o |
| account.loan.interestRateToDate | o |
| account.loan.loanAmount | o |
| account.loan.loanAmount.value | m |
| account.loan.loanAmount.precision | m |
| account.loan.loanAmount.currency | m |
| account.loan.maturityDate | o |
| account.loan.remainingLoanAmount | o |
| account.loan.remainingLoanAmount.value | m |
| account.loan.remainingLoanAmount.precision | m |
| account.loan.remainingLoanAmount.currency | m |
| account.loan.drawdownToDate | o |
| account.loan.drawdownAmount | o |
| account.loan.drawdownAmount.value | m |
| account.loan.drawdownAmount.precision | m |
| account.loan.drawdownAmount.currency | m |
| account.loan.outstandingDebt | o |
| account.loan.outstandingDebt.value | m |
| account.loan.outstandingDebt.precision | m |
| account.loan.outstandingDebt.currency | m |
| account.loan.cz-lumpsumRepayment | o |
| account.loan.cz-lumpsumRepayment.value | m |
| account.loan.cz-lumpsumRepayment.precision | m |
| account.loan.cz-lumpsumRepayment.currency | m |
| account.loan.installmentFrequency | o |
| account.loan.installmentDay | o |
| account.loan.nextRateAmount | o |
| account.loan.nextRateAmount.value | m |
| account.loan.nextRateAmount.precision | m |
| account.loan.nextRateAmount.currency | m |
| account.loan.nextRateDate | o |
| account.saving | o |
| account.saving.interestRateOverLimit | o |
| account.saving.interestRateLimit | o |
| account.saving.interestRateLimit.value | m |
| account.saving.interestRateLimit.precision | m |
| account.saving.interestRateLimit.currency | m |
| account.saving.cz-bonusInterestRate | o |
| account.saving.savingGoal | o |
| account.saving.targetAmount | o |
| account.saving.targetAmount.value | m |
| account.saving.targetAmount.precision | m |
| account.saving.targetAmount.currency | m |
| account.saving.minimumBalance | o |
| account.saving.minimumBalance.value | m |
| account.saving.minimumBalance.precision | m |
| account.saving.minimumBalance.currency | m |
| account.ownTransferReceivers | o |
| account.ownTransferReceivers.id | m |
| account.ownTransferReceivers.accountno | m |
| account.ownTransferReceivers.accountno.cz-iban | m |
| account.ownTransferReceivers.accountno.cz-bic | m |
| account.ownTransferReceivers.accountno.number | m |
| account.ownTransferReceivers.accountno.bankCode | m |
| account.ownTransferReceivers.accountno.countryCode | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (ACCOUNT)

+ Response 200 (application/json)
    + Attributes (object)
        - account (ACCOUNT, required) - Account with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body
    
            {
                "id": "CCA4F9863D686D04",
                "accountno": {
                    "cz-iban": "AT742099900000000018",
                    "cz-bic": "SPBAAT20XXX",
                    "number": "20031692500",
                    "bankCode": "0800"
                },
                "alias": "muj osobni ucet s kasickou",
                "balance": {
                    "value": 8965200,
                    "precision": 2,
                    "currency": "CZK"
                },
                "disposable": {
                    "value": 0,
                    "precision": 2,
                    "currency": "EUR"
                },
                "type": "CURRENT",
                "type": "CURRENT_ACCOUNT",
                "productI18N": "Osobní účet ČS II",
                "product": "54",
                "overdraft": {
                    "value": 2000000,
                    "precision": 2,
                    "currency": "CZK"                    
                },
                "overdraftDueDate": "2015-07-31",
                "flags": [
                    "accountQueryAllowed",
                    "collectiveSigning",
                    "domesticTransferAllowed",
                    "internationalTransferAllowed",
                    "ownTransferAllowed",
                    "urgentTransferAllowed"
                ],
                "subaccounts": [
                    {
                        "id": "jf893kzf9jfdl893",
                        "accountno": {
                            "cz-iban": "AT742099900000000019",
                            "cz-bic": "SPBAAT21XXX",
                            "number": "000000-20031692501",
                            "bankCode": "0800"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_ACCOUNT",
                        "product": "52",
                        "productI18N": "Peníze stranou",                                
                        "balance": {
                            "value": 2000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "creditInterestRate": 1.00
                    }
                ]
            }

+ Response 200 (application/json)

            {
                "account": {
                    "id": "CCA4F9863D686D04",
                    "accountno": {
                        "cz-iban": "AT742099900000000018",
                        "cz-bic": "SPBAAT20XXX",
                        "number": "000000-20031692500",
                        "bankCode": "0800"
                    },
                    "alias": "muj osobni ucet s kasickou",
                    "balance": {
                        "value": 8965200,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "disposable": {
                        "value": 0,
                        "precision": 2,
                        "currency": "EUR"
                    },
                    "type": "CURRENT",
                    "subtype": "CURRENT_ACCOUNT",
                    "productI18N": "Osobní účet ČS II",
                    "product": "54",
                    "overdraft": {
                        "value": 2000000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "overdraftDueDate": "2015-07-31",
                    "flags": [
                        "accountQueryAllowed",
                        "collectiveSigning",
                        "domesticTransferAllowed",
                        "internationalTransferAllowed",
                        "ownTransferAllowed",
                        "urgentTransferAllowed"
                    ],
                    "subaccounts": [
                        {
                            "id": "jf893kzf9jfdl893",
                            "accountno": {
                                "cz-iban": "AT742099900000000019",
                                "cz-bic": "SPBAAT21XXX",
                                "number": "000000-20031692501",
                                "bankCode": "0800"
                            },
                            "type": "SAVING",
                            "subtype": "SAVING_ACCOUNT",
                            "product": "52",
                            "productI18N": "Peníze stranou",                                
                            "balance": {
                                "value": 2000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "creditInterestRate": 1.00
                        }
                    ]
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "043971701790000016006691"
                }
            }

### Get Account Balance [GET /netbanking/my/accounts/{id}/balance]

For **account balance** entity description see Account Balance in Data Types section. 

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| balance | m |
| balance.value | m |
| balance.currency | m |
| balance.precision | m |
| disposable | o |
| disposable.value | m |
| disposable.precision | m |
| disposable.currency | m |
| overdraft | o |
| overdraft.value | m |
| overdraft.precision | m |
| overdraft.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (ACCOUNT_BALANCE)
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
            

            {
                "balance": {
                    "value": 45865,
                    "currency": "CZK",
                    "precision": 2
                },
                "disposable": {
                    "value": 45865,
                    "precision": 2,
                    "currency": "CZK"
                },
                "overdraft": {
                    "value": 20000,
                    "precision": 2,
                    "currency": "CZK"
                }
            }

### Get Account Services [GET /netbanking/cz/my/accounts/{id}/services{?size,page}]

For **service** entity description see Service in Data Types section.

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| services | o |
| services.id | m |
| services.nameI18N | m |
| services.iconGroup | m |
| services.dateFrom | o |
| services.dateTo | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - services (array[ACCOUNT_SERVICE], optional) - List of available services for account.
        - Include PAGINATION
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 5,
                "nextPage": 1,
                "services": [
                    {
                        "id": "s54sdf756dfhm52879sdf23xd8744Fsdf5",
                        "nameI18N": "Všechny platby v KČ",
                        "iconGroup": "DEFAULT",
                        "dateFrom": "2014-07-31+0100",
                        "dateTo": "2014-08-31+0100"
                    },
                    {
                        "id": "154dff756dfhm52879sdf23d845sd4f84f",
                        "nameI18N": "Všechny výběry z bankomatů ČS",
                        "iconGroup": "DEFAULT",
                        "dateFrom": "2014-07-31+0100",
                        "dateTo": "2014-08-31+0100"
                    }
                ]
            }

### Add/Change Note and Mark Transaction [PUT /netbanking/my/accounts/{id}/transactions/{tId}]

Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, transaction is marked as favorite/important, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction, then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.
For **editable transaction** entity description see Editable Transaction in Data Types section.

Paginated - no

Signable - no

Sortable - no

Request:

| Attribute | General |
| ------ | ------ |
| id | - |
| note | o |
| flags | o |

Response:

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Unpermitted characters are in attribute value. |
| 400 | ID\_MISMATCH | The provided transaction id in url differs from the transaction id in payload. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |
| 400 | FIELD\_TOO\_LONG | Length of the provided note is too long. |


<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - transaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.
    + tId: E5CAB598638E8AD0A (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body

            {
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "transaction": {
                "id": "E5CAB598638E8AD0A",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "045971701790000016001235"
            }
        }

### Transaction History Export [GET /netbanking/cz/my/accounts/{id}/transactions/export{?dateFrom,dateTo,fields,showAccountName,showAccountNumber,showTimespan,showBalance}]

Resource to export transaction history into signed pdf. Currently only pdf format is supported by this endpoint.

Paginated - no

Signable - no

Sortable - no

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/pdf)
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.
    + dateFrom: `1999-09-27T00:00:00+02:00` (datetime, required) - Date from which transactions should be exported.
    + dateTo: `2000-09-27T00:00:00+02:00` (datetime, required) - Date to which transactions should be exported
    + fields: bookingDate,partner,amount,currency (string, required) - Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, location
    + showAccountName: true (boolean, optional) - Indication whether account name should be visible in export. Default is false.
    + showAccountNumber: true (boolean, optional) - Indication whether account number should be visible in export. Default is false.
    + showTimespan: true (boolean, optional) - Indication whether timespan of the export should be visible. Default is false.
    + showBalance: true (boolean, optional) - Indication whether balance of the account should be visible in export. Default is false.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/pdf)

## Reservations [/netbanking/my/accounts/{id}/reservations]

For **reservation** entity description see Reservation in Data Types section.

### Get Reservations [GET]

Paginated - yes

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| reservations | o |
| reservations.type | o |
| reservations.transactionDate | m |
| reservations.expirationDate | o |
| reservations.merchantName | o |
| reservations.merchantAddress | o |
| reservations.description | m |
| reservations.amount | o |
| reservations.amount.value | m |
| reservations.amount.precision | m |
| reservations.amount.currency | m |
| reservations.amountSender | m |
| reservations.amountSender.value | m |
| reservations.amountSender.precision | m |
| reservations.amountSender.currency | m |

#### Error Codes

No additional error codes.

+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - reservations (array[RESERVATION], optional) - List of reservations.
        - Include PAGINATION

## Templates [/netbanking/my/templates{?size,page}]

For **template** entity description see Template in Data Types section.

### Get Templates List [GET]

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| id | m |
| name | o |
| orderCategory | m |
| receiver | m |
| receiver.iban | o |
| receiver.bic | o |
| receiver.number | o |
| receiver.bankCode | o |
| receiver.countryCode | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - templates (array[TEMPLATE], optional) - List of templates.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg054
            
+ Response 200 (application/json)

            {
                "pageNumber": 8,
                "pageCount": 9,
                "pageSize": 2,
                "nextPage": 9,
                "templates": [
                    {
                        "id": "C8430E000200B404",
                        "name": "Jan Novák",
                        "orderCategory": "DOMESTIC",
                        "receiver": {
                            "number":"2326573123",
                            "bankCode":"0800"
                        }
                    },
                    {
                        "id": "C8430E000200C702",
                        "name": "Marek Nový",
                        "orderCategory": "DOMESTIC",
                        "receiver": {
                            "iban": "CZ3308000000001592286253",
                            "bic": "GIBACZPX"
                        }
                    }
                ]
            }

### Get Template Detail [GET /netbanking/my/templates/{id}]

For **template** entity description see Template in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| id | m |
| name | o |
| orderCategory | m |
| receiver | m |
| receiver.iban | o |
| receiver.bic | o |
| receiver.number | o |
| receiver.bankCode | o |
| receiver.countryCode | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (TEMPLATE)
-->

+ Parameters

    + id (required, text, `template_0-123-100`) ... Template ID
    
+ Request

    + Headers
        
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg054

+ Response 200 (application/json)

            {
                "id": "C8430E000200B404",
                "name": "Jan Novák",
                "orderCategory": "DOMESTIC",
                "receiver": {
                    "number":"000000-2326573123",
                    "bankCode":"0800"
                }
            }

## Pension Contracts [/netbanking/cz/my/contracts/pensions{?size,page}]

For **pension contract** entity description see Pension Contract in Data Types section.

### Get list of all pension contracts. [GET]

Paginated - yes

Signable - no

Sortable - no


| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| pageNumber | o | o | o | o |
| pageCount | o | o | o | o |
| pageSize | o | o | o | o |
| nextPage | o | o | o | o |
| pensions | o | o | o | o |
| pensions.alias |  o |  o |  o |  o | 
| pensions.signingDate |  o |  o |  o |  o | 
| pensions.validFrom |  o |  o |  o |  o | 
| pensions.validTo |  o |  o |  o |  o | 
| pensions.id |  m |  m |  m |  m | 
| pensions.agreementNumber |  m |  m |  m |  m | 
| pensions.status |  m |  m |  m |  m |
| pensions.productAccount |  m |  m |  m |  m | 
| pensions.productAccount.amount |  m |  m |  m |  m | 
| pensions.productAccount.amount.value |  m |  m |  m |  m | 
| pensions.productAccount.amount.currency |  m |  m |  m |  m | 
| pensions.productAccount.amount.precision |  m |  m |  m |  m | 
| pensions.productAccount.date |  m |  m |  m |  m | 
| pensions.productI18N |  m |  m |  m |  m | 
| pensions.product |  m |  m |  m |  m | 
| pensions.birthNumber |  m |  m |  m |  m | 
| pensions.paidBenefits |  m |  m |  m |  m | 
| pensions.paidBenefits.value |  m |  m |  m |  m | 
| pensions.paidBenefits.currency |  m |  m |  m |  m | 
| pensions.paidBenefits.precision |  m |  m |  m |  m | 
| pensions.strategy |  o |  o |  - |  o | 
| pensions.strategy.conservative |  o |  o |  - |  o | 
| pensions.strategy.balanced |  o |  o |  - |  o | 
| pensions.strategy.dynamic |  o |  o |  - |  o | 
| pensions.strategy.stateBonds |  o |  o |  - |  - | 
| pensions.pensionAgreed |  o |  - |  o |  o | 
| pensions.pensionAgreed.oldAge |  o |  - |  o |  o | 
| pensions.pensionAgreed.disability |  o |  - |  o |  o | 
| pensions.pensionAgreed.earlyRetirement |  o |  - |  o |  - | 
| pensions.savingTime |  o |  - |  o |  o | 
| pensions.savingTime.supplementary |  m |  - |  - |  o | 
| pensions.savingTime.oldAge |  o |  - |  o |  - | 
| pensions.savingTime.earlyRetirement |  o |  - |  o |  - | 
| pensions.contribution |  m |  - |  m |  m | 
| pensions.contribution.employer |  m |  - |  m |  m | 
| pensions.contribution.participantAmount |  m |  - |  m |  m | 
| pensions.contribution.participantAmount.value |  m |  - |  m |  m | 
| pensions.contribution.participantAmount.precision |  m |  - |  m |  m | 
| pensions.contribution.participantAmount.currency |  m |  - |  m |  m |
| pensions.contribution.otherPersonAmount |  m |  - |  m |  - | 
| pensions.contribution.otherPersonAmount.value |  m |  - |  m |  - | 
| pensions.contribution.otherPersonAmount.precision |  m |  - |  m |  - | 
| pensions.contribution.otherPersonAmount.currency |  m |  - |  m |  - |
| pensions.supplementary | o | o | o | o |
| pensions.supplementary.email |  o |  - |  o |  o | 
| pensions.supplementary.sms |  o |  - |  o |  o | 
| pensions.supplementary.maxService |  o |  - |  o |  o | 
| pensions.supplementary.optService |  o |  - |  - |  o | 
| pensions.persons |  o |  - |  o |  o | 
| pensions.persons.firstName |  m |  - |  m |  m | 
| pensions.persons.lastName |  m |  - |  m |  m | 
| pensions.persons.birthDate |  m |  - |  m |  m | 
| pensions.persons.birthNumber |  o |  - |  o |  o | 
| pensions.persons.address | o | - | - | o |
| pensions.persons.address.country |  m |  - |  - |  m | 
| pensions.persons.address.city |  m |  - |  - |  m | 
| pensions.persons.address.street |  o |  - |  - |  o | 
| pensions.persons.address.streetNumber |  o |  - |  - |  o | 
| pensions.persons.address.buildingApartment |  o |  - |  - |  o | 
| pensions.persons.address.zipCode |  m |  - | - |  m |
| pensions.persons.address.description | - | - | - | - |
| pensions.persons.proportion |  m |  - |  m |  m | 
| pensions.persons.contact |  o |  - |  - |  o | 
| pensions.persons.contactDetail |  o |  - |  - |  o | 
| pensions.persons.entitlement |  m |  - |  m |  - | 

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - pensions (array[PENSION], optional) - List of pensions.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 0,
                "pageSize": 2,
                "nextPage": 1,
                "pensions": [
                    {
                        "alias": "moje penzijko",
                        "signingDate": "2013-06-12",
                        "validFrom": "2013-08-01",
                        "validTo": "2019-08-01",
                        "id": "1nw59tj98542vgt51",
                        "agreementNumber": "123456789852",
                        "status": "ACTIVE",
                        "productAccount": {
                            "amount": {
                                "value": 24710472,
                                "precision": "2",
                                "currency": "CZK"
                            },
                            "date": "2015-01-18"
                        },
                        "productI18N": "Penzijni sporeni",
                        "product": "456",
                        "birthNumber": "9005087056",
                        "paidBenefits": {
                            "value": 0,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "strategy": {
                            "conservative": 10,
                            "balanced": 80,
                            "dynamic": 10,
                            "stateBonds": 0
                        },
                        "pensionAgreed": {
                            "oldAge": true,
                            "disability": false,
                            "earlyRetirement": 13
                        },
                        "savingTime": {
                            "supplementary": 51,
                            "oldAge": 51,
                            "earlyRetirement": 51
                        },
                        "contribution": {
                            "employer": "true",
                            "participantAmount": {
                                "value": 1000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "otherPersonAmount": {
                                "value": 100,
                                "precision": 2,
                                "currency": "CZK"
                            }
                        },
                        "supplementary": {
                            "email": "franz@beeone.cz",
                            "sms": "778525968",
                            "maxService": true,
                            "optService": true
                        },
                        "persons": [{
                            "firstName": "Franc",
                            "lastName": "BeeOne",
                            "birthDate": "1950-06-30",
                            "birthNumber": "500630192",
                            "address": {
                                "country": "CZ",
                                "city": "Prague",
                                "street": "Rakouska",
                                "streetNumber": "95",
                                "buildingApartment": "1985",
                                "zipCode": "130 00"
                            },
                            "proportion": 100,
                            "contact": "franc@yahoo.com",
                            "contactDetail": "2nd door from the left",
                            "entitlement": "survival pension and termination settlement"
                        }]
                    }
                ]
            }

### Get pension contract [GET /netbanking/cz/my/contracts/pensions/{id}]

Paginated - no

Signable - no

Sortable - no


| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| alias |  o |  o |  o |  o | 
| signingDate |  o |  o |  o |  o | 
| validFrom |  o |  o |  o |  o | 
| validTo |  o |  o |  o |  o | 
| id |  m |  m |  m |  m | 
| agreementNumber |  m |  m |  m |  m | 
| status |  m |  m |  m |  m |
| productAccount |  m |  m |  m |  m | 
| productAccount.amount |  m |  m |  m |  m | 
| productAccount.amount.value |  m |  m |  m |  m | 
| productAccount.amount.currency |  m |  m |  m |  m | 
| productAccount.amount.precision |  m |  m |  m |  m | 
| productAccount.date |  m |  m |  m |  m | 
| productI18N |  m |  m |  m |  m | 
| product |  m |  m |  m |  m |  
| birthNumber |  m |  m |  m |  m | 
| paidBenefits |  m |  m |  m |  m | 
| paidBenefits.value |  m |  m |  m |  m | 
| paidBenefits.currency |  m |  m |  m |  m | 
| paidBenefits.precision |  m |  m |  m |  m | 
| strategy |  o |  o |  - |  o | 
| strategy.conservative |  o |  o |  - |  o | 
| strategy.balanced |  o |  o |  - |  o | 
| strategy.dynamic |  o |  o |  - |  o | 
| strategy.stateBonds |  o |  o |  - |  - | 
| pensionAgreed |  o |  - |  o |  o | 
| pensionAgreed.oldAge |  o |  - |  o |  o | 
| pensionAgreed.disability |  o |  - |  o |  o | 
| pensionAgreed.earlyRetirement |  o |  - |  o |  - | 
| savingTime |  o |  - |  o |  o | 
| savingTime.supplementary |  m |  - |  - |  o | 
| savingTime.oldAge |  o |  - |  o |  - | 
| savingTime.earlyRetirement |  o |  - |  o |  - | 
| contribution |  m |  - |  m |  m | 
| contribution.employer |  m |  - |  m |  m | 
| contribution.participantAmount |  m |  - |  m |  m | 
| contribution.participantAmount.value |  m |  - |  m |  m | 
| contribution.participantAmount.precision |  m |  - |  m |  m | 
| contribution.participantAmount.currency |  m |  - |  m |  m | 
| contribution.otherPersonAmount |  m |  - |  m |  - | 
| contribution.otherPersonAmount.value |  m |  - |  m |  - | 
| contribution.otherPersonAmount.precision |  m |  - |  m |  - | 
| contribution.otherPersonAmount.currency |  m |  - |  m |  - |
| supplementary | o | o | o | o |
| supplementary.email |  o |  - |  o |  o | 
| supplementary.sms |  o |  - |  o |  o | 
| supplementary.maxService |  o |  - |  o |  o | 
| supplementary.optService |  o |  - |  - |  o | 
| persons |  o |  - |  o |  o | 
| persons.firstName |  m |  - |  m |  m | 
| persons.lastName |  m |  - |  m |  m | 
| persons.birthDate |  m |  - |  m |  m | 
| persons.birthNumber |  o |  - |  o |  o | 
| persons.address | o | - | - | o |
| persons.address.country |  m |  - |  - |  m | 
| persons.address.city |  m |  - |  - |  m | 
| persons.address.street |  o |  - |  - |  o | 
| persons.address.streetNumber |  o |  - |  - |  o | 
| persons.address.buildingApartment |  o |  - |  - |  o | 
| persons.address.zipCode |  m |  - |  - |  m | 
| persons.address.description | - | - | - | - | 
| persons.proportion |  m |  - |  m |  m | 
| persons.contact |  o |  - |  - |  o | 
| persons.contactDetail |  o |  - |  - |  o | 
| persons.entitlement |  m |  - |  m |  - | 

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (PENSION)
-->

+ Parameters

    + id (required, string, `159951`) ... pension contract number

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "alias": "moje penzijko",
                "signingDate": "2013-06-12",
                "validFrom": "2013-08-01",
                "validTo": "2019-08-01",
                "id": "1nw59tj98542vgt51",
                "agreementNumber": "123456789852",
                "status": "ACTIVE",
                "productAccount": {
                    "amount": {
                        "value": 24710472,
                        "precision": "2",
                        "currency": "CZK"
                    },
                    "date": "2015-01-18"
                },
                "productType": "PP",
                "productI18N": "Penzijni sporeni",
                "product": "456",
                "birthNumber": "9005087056", 
                "paidBenefits": {
                    "value": 0,
                    "precision": 2,
                    "currency": "CZK"
                },    
                "strategy": {
                    "conservative": 10,
                    "balanced": 80,
                    "dynamic": 10,
                    "stateBonds": 0
                },    
                "pensionAgreed": {
                    "oldAge": true,
                    "disability": false,
                    "earlyRetirement": 13
                },    
                "savingTime": {
                    "supplementary": 51,
                    "oldAge": 51,
                    "earlyRetirement": 51
                },    
                "contribution": {
                    "employer": true,
                    "participantAmount": {
                        "value": 1000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "otherPersonAmount": {
                        "value": 100,
                        "precision": 2,
                        "currency": "CZK"
                    }
                },
                "supplementary": {
                    "email": "franz@beeone.cz",
                    "sms": "778525968",
                    "maxService": true,
                    "optService": true
                },    
                "persons": [{
                    "firstName": "Franc",
                    "lastName": "BeeOne",
                    "birthDate": "1950-06-30",
                    "birthNumber": "500630192",
                    "address":  {
                        "country": "CZ",
                        "city": "Prague",
                        "street": "Rakouska",
                        "streetNumber": "95",
                        "buildingApartment": "1985",
                        "zipCode": "130 00"
                    },
                    "proportion": 100,
                    "contact": "franc@yahoo.com",
                    "contactDetail": "2nd door from the left",
                    "entitlement": "survival pension and termination settlement"
                }]
            }

### Update single pension contract [PUT /netbanking/cz/my/contracts/pensions/{id}]

Allows to change a limited set of pension contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process. Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Pension Contract-Object. Id in URL, id field and agreementNumber field in payload: These fields must refer to the same pension contract, else an error is returned.

Paginated - no

Signable - no (ready for signing process)

Sortable - no

Request fields:

| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| alias |  o |  o |  o |  o | 
| signingDate |  o |  o |  o |  o | 
| validFrom |  o |  o |  o |  o | 
| validTo |  o |  o |  o |  o | 
| id |  m |  m |  m |  m | 
| agreementNumber |  m |  m |  m |  m | 
| status |  m |  m |  m |  m |
| productAccount |  m |  m |  m |  m | 
| productAccount.amount |  m |  m |  m |  m | 
| productAccount.amount.value |  m |  m |  m |  m | 
| productAccount.amount.currency |  m |  m |  m |  m | 
| productAccount.amount.precision |  m |  m |  m |  m | 
| productAccount.date |  m |  m |  m |  m | 
| productI18N |  m |  m |  m |  m | 
| product |  m |  m |  m |  m |  
| birthNumber |  m |  m |  m |  m | 
| paidBenefits |  m |  m |  m |  m | 
| paidBenefits.value |  m |  m |  m |  m | 
| paidBenefits.currency |  m |  m |  m |  m | 
| paidBenefits.precision |  m |  m |  m |  m | 
| strategy |  o |  o |  - |  o | 
| strategy.conservative |  o |  o |  - |  o | 
| strategy.balanced |  o |  o |  - |  o | 
| strategy.dynamic |  o |  o |  - |  o | 
| strategy.stateBonds |  o |  o |  - |  - | 
| pensionAgreed |  o |  - |  o |  o | 
| pensionAgreed.oldAge |  o |  - |  o |  o | 
| pensionAgreed.disability |  o |  - |  o |  o | 
| pensionAgreed.earlyRetirement |  o |  - |  o |  - | 
| savingTime |  o |  - |  o |  o | 
| savingTime.supplementary |  m |  - |  - |  o | 
| savingTime.oldAge |  o |  - |  o |  - | 
| savingTime.earlyRetirement |  o |  - |  o |  - | 
| contribution |  m |  - |  m |  m | 
| contribution.employer |  m |  - |  m |  m | 
| contribution.participantAmount |  m |  - |  m |  m | 
| contribution.participantAmount.value |  m |  - |  m |  m | 
| contribution.participantAmount.precision |  m |  - |  m |  m | 
| contribution.participantAmount.currency |  m |  - |  m |  m | 
| contribution.otherPersonAmount |  m |  - |  m |  - | 
| contribution.otherPersonAmount.value |  m |  - |  m |  - | 
| contribution.otherPersonAmount.precision |  m |  - |  m |  - | 
| contribution.otherPersonAmount.currency |  m |  - |  m |  - |
| supplementary | o | o | o | o |
| supplementary.email |  o |  - |  o |  o | 
| supplementary.sms |  o |  - |  o |  o | 
| supplementary.maxService |  o |  - |  o |  o | 
| supplementary.optService |  o |  - |  - |  o | 
| persons |  o |  - |  o |  o | 
| persons.firstName |  m |  - |  m |  m | 
| persons.lastName |  m |  - |  m |  m | 
| persons.birthDate |  m |  - |  m |  m | 
| persons.birthNumber |  o |  - |  o |  o | 
| persons.address | o | - | - | o |
| persons.address.country |  m |  - |  - |  m | 
| persons.address.city |  m |  - |  - |  m | 
| persons.address.street |  o |  - |  - |  o | 
| persons.address.streetNumber |  o |  - |  - |  o | 
| persons.address.buildingApartment |  o |  - |  - |  o | 
| persons.address.zipCode |  m |  - |  - |  m |
| persons.address.description | - | - | - | - | 
| persons.proportion |  m |  - |  m |  m | 
| persons.contact |  o |  - |  - |  o | 
| persons.contactDetail |  o |  - |  - |  o | 
| persons.entitlement |  m |  - |  m |  - | 

Response fields:

| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| pension | o | o | o | o |
| pension.alias |  o |  o |  o |  o | 
| pension.signingDate |  o |  o |  o |  o | 
| pension.validFrom |  o |  o |  o |  o | 
| pension.validTo |  o |  o |  o |  o | 
| pension.id |  m |  m |  m |  m | 
| pension.agreementNumber |  m |  m |  m |  m | 
| pension.status |  m |  m |  m |  m |
| pension.productAccount |  m |  m |  m |  m | 
| pension.productAccount.amount |  m |  m |  m |  m | 
| pension.productAccount.amount.value |  m |  m |  m |  m | 
| pension.productAccount.amount.currency |  m |  m |  m |  m | 
| pension.productAccount.amount.precision |  m |  m |  m |  m | 
| pension.productAccount.date |  m |  m |  m |  m | 
| pension.productI18N |  m |  m |  m |  m | 
| pension.product |  m |  m |  m |  m |  
| pension.birthNumber |  m |  m |  m |  m | 
| pension.paidBenefits |  m |  m |  m |  m | 
| pension.paidBenefits.value |  m |  m |  m |  m | 
| pension.paidBenefits.currency |  m |  m |  m |  m | 
| pension.paidBenefits.precision |  m |  m |  m |  m | 
| pension.strategy |  o |  o |  - |  o | 
| pension.strategy.conservative |  o |  o |  - |  o | 
| pension.strategy.balanced |  o |  o |  - |  o | 
| pension.strategy.dynamic |  o |  o |  - |  o | 
| pension.strategy.stateBonds |  o |  o |  - |  - | 
| pension.pensionAgreed |  o |  - |  o |  o | 
| pension.pensionAgreed.oldAge |  o |  - |  o |  o | 
| pension.pensionAgreed.disability |  o |  - |  o |  o | 
| pension.pensionAgreed.earlyRetirement |  o |  - |  o |  - | 
| pension.savingTime |  o |  - |  o |  o | 
| pension.savingTime.supplementary |  m |  - |  - |  o | 
| pension.savingTime.oldAge |  o |  - |  o |  - | 
| pension.savingTime.earlyRetirement |  o |  - |  o |  - | 
| pension.contribution |  m |  - |  m |  m | 
| pension.contribution.employer |  m |  - |  m |  m | 
| pension.contribution.participantAmount |  m |  - |  m |  m | 
| pension.contribution.participantAmount.value |  m |  - |  m |  m | 
| pension.contribution.participantAmount.precision |  m |  - |  m |  m | 
| pension.contribution.participantAmount.currency |  m |  - |  m |  m | 
| pension.contribution.otherPersonAmount |  m |  - |  m |  - | 
| pension.contribution.otherPersonAmount.value |  m |  - |  m |  - | 
| pension.contribution.otherPersonAmount.precision |  m |  - |  m |  - | 
| pension.contribution.otherPersonAmount.currency |  m |  - |  m |  - |
| pension.supplementary | o | o | o | o |
| pension.supplementary.email |  o |  - |  o |  o | 
| pension.supplementary.sms |  o |  - |  o |  o | 
| pension.supplementary.maxService |  o |  - |  o |  o | 
| pension.supplementary.optService |  o |  - |  - |  o | 
| pension.persons |  o |  - |  o |  o | 
| pension.persons.firstName |  m |  - |  m |  m | 
| pension.persons.lastName |  m |  - |  m |  m | 
| pension.persons.birthDate |  m |  - |  m |  m | 
| pension.persons.birthNumber |  o |  - |  o |  o | 
| pension.persons.address | o | - | - | o |
| pension.persons.address.country |  m |  - |  - |  m | 
| pension.persons.address.city |  m |  - |  - |  m | 
| pension.persons.address.street |  o |  - |  - |  o | 
| pension.persons.address.streetNumber |  o |  - |  - |  o | 
| pension.persons.address.buildingApartment |  o |  - |  - |  o | 
| pension.persons.address.zipCode |  m |  - |  - |  m | 
| pension.persons.address.description | - | - | - | - | 
| pension.persons.proportion |  m |  - |  m |  m | 
| pension.persons.contact |  o |  - |  - |  o | 
| pension.persons.contactDetail |  o |  - |  - |  o | 
| pension.persons.entitlement |  m |  - |  m |  - |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (PENSION)

+ Response 200 (application/json)
    + Attributes (object)
        - pension (PENSION, required) - Pension.
        - Include SIGNINFO
-->

+ Parameters

    + id (required, string, `159951`) ... pension contract number

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

    + Body
    
            {
                "alias": "moje penzijko",
                "signingDate": "2013-06-12",
                "validFrom": "2013-08-01",
                "validTo": "2019-08-01",
                "id": "1nw59tj98542vgt51",
                "agreementNumber": "123456789852",
                "status": "ACTIVE",
                "productAccount": {
                    "amount": {
                        "value": 24710472,
                        "precision": "2",
                        "currency": "CZK"
                    },
                    "date": "2015-01-18"
                },
                "productType": "PP",
                "productI18N": "Penzijni sporeni",
                "product": "456",
                "birthNumber": "9005087056", 
                "paidBenefits": {
                    "value": 0,
                    "precision": 2,
                    "currency": "CZK"
                },    
                "strategy": {
                    "conservative": 10,
                    "balanced": 80,
                    "dynamic": 10,
                    "stateBonds": 0
                },    
                "pensionAgreed": {
                    "oldAge": true,
                    "disability": false,
                    "earlyRetirement": 13
                },    
                "savingTime": {
                    "supplementary": 51,
                    "oldAge": 51,
                    "earlyRetirement": 51
                },    
                "contribution": {
                    "employer": true,
                    "participantAmount": {
                        "value": 1000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "otherPersonAmount": {
                        "value": 100,
                        "precision": 2,
                        "currency": "CZK"
                    }
                },
                "supplementary": {
                    "email": "franz@beeone.cz",
                    "sms": "778525968",
                    "maxService": true,
                    "optService": true
                },    
                "persons": [{
                    "firstName": "Franc",
                    "lastName": "BeeOne",
                    "birthDate": "1950-06-30",
                    "birthNumber": "500630192",
                    "address":  {
                        "country": "CZ",
                        "city": "Prague",
                        "street": "Rakouska",
                        "streetNumber": "95",
                        "buildingApartment": "1985",
                        "zipCode": "130 00"
                    },
                    "proportion": 100,
                    "contact": "franc@yahoo.com",
                    "contactDetail": "2nd door from the left",
                    "entitlement": "survival pension and termination settlement"
                }]
            }

+ Response 200 (application/json)

            {
                "pension": {
                    "alias": "moje penzijko",
                    "signingDate": "2013-06-12",
                    "validFrom": "2013-08-01",
                    "validTo": "2019-08-01",
                    "id": "1nw59tj98542vgt51",
                    "agreementNumber": "123456789852",
                    "status": "ACTIVE",
                    "productAccount": {
                        "amount": {
                            "value": 24710472,
                            "precision": "2",
                            "currency": "CZK"
                        },
                        "date": "2015-01-18"
                    },
                    "productType": "PP",
                    "productI18N": "Penzijni sporeni",
                    "product": "456",
                    "birthNumber": "9005087056", 
                    "paidBenefits": {
                        "value": 0,
                        "precision": 2,
                        "currency": "CZK"
                    },    
                    "strategy": {
                        "conservative": 10,
                        "balanced": 80,
                        "dynamic": 10,
                        "stateBonds": 0
                    },    
                    "pensionAgreed": {
                        "oldAge": true,
                        "disability": false,
                        "earlyRetirement": 13
                    },    
                    "savingTime": {
                        "supplementary": 51,
                        "oldAge": 51,
                        "earlyRetirement": 51
                    },    
                    "contribution": {
                        "employer": true,
                        "participantAmount": {
                            "value": 1000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "otherPersonAmount": {
                            "value": 100,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    "supplementary": {
                        "email": "franz@beeone.cz",
                        "sms": "778525968",
                        "maxService": true,
                        "optService": true
                    },    
                    "persons": [{
                        "firstName": "Franc",
                        "lastName": "BeeOne",
                        "birthDate": "1950-06-30",
                        "birthNumber": "500630192",
                        "address":  {
                            "country": "CZ",
                            "city": "Prague",
                            "street": "Rakouska",
                            "streetNumber": "95",
                            "buildingApartment": "1985",
                            "zipCode": "130 00"
                        },
                        "proportion": 100,
                        "contact": "franc@yahoo.com",
                        "contactDetail": "2nd door from the left",
                        "entitlement": "survival pension and termination settlement"
                    }]
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "043971701790000016006691"    
                }
            }

### Add/Change Note and Mark Transaction [PUT /netbanking/cz/my/contracts/pensions/{id}/transactions/{tId}]

Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, transaction is marked as favorite, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction, then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.
For **editable transaction** entity description see Editable Transaction in Data Types section.

Paginated - no

Signable - no

Sortable - no

Request:

| Attribute | General |
| ------ | ------ |
| id | m |
| note | o |
| flags | o |

Response:

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Unpermitted characters are in attribute value. |
| 400 | ID\_MISMATCH | The provided transaction id in url differs from the transaction id in payload. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |
| 400 | FIELD\_TOO\_LONG | Length of the provided note is too long. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - transaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Product identifier.
    + tId: E5CAB598638E8AD0A (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body

            {
                "id": "E5CAB598638E8AD0A"
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "transaction": {
                "id": "E5CAB598638E8AD0A",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "045971701790000016001235"
            }
        }

### Get pension transaction history export [GET /netbanking/cz/my/contracts/pensions/{id}/transactions/export{?dateFrom,dateTo,fields,showAccountName,showAccountNumber,showTimespan,showBalance}]

Resource to export transaction history into signed pdf. Currently only pdf format is supported by this endpoint.

Paginated - no

Signable - no

Sortable - no

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/pdf)
-->

+ Parameters

    + id: 1nw59tj98542vgt51 (string, required) - Account identifier.
    + dateFrom: `1999-09-27T00:00:00+02:00` (datetime, required) - Date from which transactions should be exported.
    + dateTo: `2000-09-27T00:00:00+02:00` (datetime, required) - Date to which transactions should be exported
    + fields: bookingDate,partner,amount,currency (string, required) - Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, location
    + showAccountName: true (boolean, optional) - Indication whether account name should be visible in export. Default is false.
    + showAccountNumber: true (boolean, optional) - Indication whether account number should be visible in export. Default is false.
    + showTimespan: true (boolean, optional) - Indication whether timespan of the export should be visible. Default is false.
    + showBalance: true (boolean, optional) - Indication whether balance of the account should be visible in export. Default is false.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/pdf)

## Cards [/netbanking/my/cards{?size,page,sort,order}]

For **card** entity description see Card in Data Types section.

### Get a list of cards for the current user. [GET]

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: product, id


| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ | 
| pageNumber | o | o | o |
| pageCount | o | o | o |
| pageSize | o | o | o |
| nextPage | o | o | o |
| cards | o | o | o |
| cards.id | m | m | m |
| cards.alias | o | o | o |
| cards.owner | m | m | m |
| cards.number | m | m | m |
| cards.sequenceNumber | m | m | m |
| cards.productI18N | m | m | m |
| cards.productCode | o | o | o |
| cards.expiryDate | o | o | o |
| cards.validFromDate | o | o | o |
| cards.state | m | m | m |
| cards.type | m | m | m |
| cards.provider | m | m | m |
| cards.lockReason | o | o | o |
| cards.characteristics | o | o | o |
| cards.limit | o | - | o |
| cards.limit.value | m | - | m |
| cards.limit.currency | m | - | m |
| cards.limit.precision | m | - | m |
| cards.balance | o | - | o |
| cards.balance.value | m | - | m |
| cards.balance.precision | m | - | m |
| cards.balance.currency | m | - | m |
| cards.outstandingAmount | o | - | o |
| cards.outstandingAmount.value | m | - | m |
| cards.outstandingAmount.precision | m | - | m |
| cards.outstandingAmount.currency | m | - | m |
| cards.minimalMonthlyAmount | o | - | o |
| cards.minimalMonthlyAmount.value | m | - | m |
| cards.minimalMonthlyAmount.precision | m | - | m |
| cards.minimalMonthlyAmount.currency | m | - | m |
| cards.installmentDueDate | o | - | o |
| cards.mainAccount | o | o | o |
| cards.mainAccount.id | o | o | o |
| cards.mainAccount.accountno | m | m | m |
| cards.mainAccount.accountno.cz-iban | m | m | m |
| cards.mainAccount.accountno.cz-bic | m | m | m |
| cards.mainAccount.accountno.number | m | m | m |
| cards.mainAccount.accountno.bankCode | m | m | m |
| cards.mainAccount.accountno.countryCode | o | o | o |
| cards.mainAccount.holderName | m | m | m |
| cards.cz-overallCardAccountLimits | o | - | o |
| cards.cz-overallCardAccountLimits.limitATM | o | - | o |
| cards.cz-overallCardAccountLimits.limitATM.value | m | - | m |
| cards.cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| cards.cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS | o | - | o |
| cards.cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| cards.cardDeliveryMode | o | o | o |
| cards.features | o | o | o |
| cards.flags | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/pdf)
    + Attributes (object)
        - cards (array[CARD], optional) - List of cards.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
    + sort (optional, string, `iban`) ... Comma separated list of fields which should be used for sorting. Sort priorities are left to right. This call can be sorted by productCode and id.
    + order (optional, string, `desc`) ... The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 0,
                "pageSize": 8,
                "nextPage": 1,
                "cards": [
                {
                    "id": "38338227",
                    "alias": "moje zlata",
                    "owner": "NOVÁKOVÁ JANA",
                    "number": "895632XXXXXX5501",
                    "sequenceNumber": "09",
                    "productI18N": "Visa Gold",
                    "productCode": "49",
                    "expiryDate": "2014-07-31",
                    "validFromDate": "2011-07-01",
                    "state": "ACTIVE",
                    "type": "CREDIT",
                    "provider": "ERSTE_BANK",
                    "lockReason": "THEFT",
                    "characteristics": "MAIN",
                    "limit": {
                        "value": 30000,
                        "currency": "CZK",
                        "precision": 2
                    },
                    "balance": {
                        "value": 185954,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "outstandingAmount":{
                        "value": 185954,
                        "currency": "CZK",
                        "precision": 2
                    },
                    "minimumMonthlyAmount": {
                        "value": 2000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "installmentDueDate": "2011-07-08",
                    "mainAccount": {
                        "id": "CD3FB47FE625310C",
                        "accountno": {
                            "cz-iban": "CZ782099900001237957",
                            "cz-bic": "GIBACZPX",
                            "number": "4587596589",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                            },
                        "holderName": "Frany BeeOne"
                    },
                    "cz-overallCardAccountLimits": {
                        "limitATM": {
                            "value": 150000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "limitPOS": {
                            "value": 200000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    "cardDeliveryMode": "HOME",
                    "features": [
                        "contactless",
                        "secureOnlineShopping"
                    ],
                    "flags": [
                        "notAccountOwner",
                        "locked",
                        "contactlessEnabled",
                        "automaticReplacementOn",
                        "secureOnlineShoppingEnabled"
                    ]
                }
            ]
        }

### Get single card. [GET /netbanking/my/cards/{id}]

Returns one single card given it's ID. Does not include transactions.

Paginated - no

Signable - no

Sortable - no


| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ |
| id | m | m | m |
| alias | o | o | o |
| owner | m | m | m |
| number | m | m | m |
| sequenceNumber | m | m | m |
| productI18N | m | m | m |
| productCode | o | o | o |
| expiryDate | o | o | o |
| validFromDate | o | o | o |
| state | m | m | m |
| type | m | m | m |
| provider | m | m | m |
| lockReason | o | o | o |
| characteristics | o | o | o |
| limit | o | - | o |
| limit.value | m | - | m |
| limit.currency | m | - | m |
| limit.precision | m | - | m |
| balance | o | - | o |
| balance.value | m | - | m |
| balance.precision | m | - | m |
| balance.currency | m | - | m |
| outstandingAmount | o | - | o |
| outstandingAmount.value | m | - | m |
| outstandingAmount.precision | m | - | m |
| outstandingAmount.currency | m | - | m |
| minimalMonthlyAmount | o | - | o |
| minimalMonthlyAmount.value | m | - | m |
| minimalMonthlyAmount.precision | m | - | m |
| minimalMonthlyAmount.currency | m | - | m |
| installmentDueDate | o | - | o |
| mainAccount | o | o | o |
| mainAccount.id | o | o | o |
| mainAccount.accountno | m | m | m |
| mainAccount.accountno.cz-iban | m | m | m |
| mainAccount.accountno.cz-bic | m | m | m |
| mainAccount.accountno.number | m | m | m |
| mainAccount.accountno.bankCode | m | m | m |
| mainAccount.accountno.countryCode | o | o | m |
| mainAccount.holderName | m | m | m |
| overallCardAccountLimits | o | - | o |
| cz-overallCardAccountLimits.limitATM | o | - | o |
| cz-overallCardAccountLimits.limitATM.value | m | - | m |
| cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| cz-overallCardAccountLimits.limitPOS | o | - | o |
| cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| cardDeliveryMode | o | o | o |
| features | o | o | o |
| flags | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/pdf)
    + Attributes (CARD)
-->

+ Parameters
    + id (required, string, `T-EG0.4511611062872344.1`) ... ID of the card

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "id": "38338227",
                "alias": "moje zlata",
                "owner": "NOVÁKOVÁ JANA",
                "number": "895632XXXXXX5501",
                "sequenceNumber": "09",
                "productI18N": "Visa Gold",
                "productCode": "49",
                "expiryDate": "2014-07-31",
                "validFromDate": "2011-07-01",
                "state": "ACTIVE",
                "type": "CREDIT",
                "provider": "ERSTE_BANK",
                "lockReason": "THEFT",
                "characteristics": "MAIN",
                "limit": {
                    "value": 30000,
                    "currency": "CZK",
                    "precision": 2
                },
                "balance": {
                    "value": 185954,
                    "precision": 2,
                    "currency": "CZK"
                },
                "outstandingAmount": {
                    "value": 1854,
                    "currency": "CZK",
                    "precision": 2
                },
                "minimalMonthlyAmount": {
                    "value": 2000,
                    "precision": 2,
                    "currency": "CZK"
                },
                "installmentDueDate": "2011-07-08",
                "mainAccount": {
                    "id": "CD3FB47FE625310C",
                    "accountno": {
                        "cz-iban": "CZ782099900001237957",
                        "cz-bic": "GIBACZPX",
                        "number": "4587596589",
                        "bankCode": "0800",
                        "countryCode": "CZ"
                    },
                    "holderName": "Frany BeeOne"
                },
                "cz-overallCardAccountLimits": {
                    "limitATM": {
                        "value": 150000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "limitPOS": {
                        "value": 200000,
                        "precision": 2,
                        "currency": "CZK"
                    }
                },
                "cardDeliveryMode": "HOME",
                "features": [
                    "contactless",
                    "secureOnlineShopping"
                ],
                "flags": [
                    "notAccountOwner",
                    "locked",
                    "automaticReplacementOn",
                    "secureOnlineShoppingEnabled",
                    "contactlessEnabled"
                ]
            }

### Update single card. [PUT /netbanking/my/cards/{id}]

Allows to change a limited set of card-settings of one specific card. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process. Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Card-Object. Id in URL, id field and number field in payload: These fields must refer to the same card, else an error is returned.

Paginated - no

Signable - no (ready for signing process)

Sortable - no

Request fields:

| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ |
| id | m | m | m |
| alias | o | o | o |
| owner | m | m | m |
| number | m | m | m |
| sequenceNumber | m | m | m |
| productI18N | m | m | m |
| productCode | o | o | o |
| expiryDate | o | o | o |
| validFromDate | o | o | o |
| state | m | m | m |
| type | m | m | m |
| provider | m | m | m |
| lockReason | o | o | o |
| characteristics | o | o | o |
| limit | o | - | o |
| limit.value | m | - | m |
| limit.currency | m | - | m |
| limit.precision | m | - | m |
| balance | o | - | o |
| balance.value | m | - | m |
| balance.precision | m | - | m |
| balance.currency | m | - | m |
| outstandingAmount | o | - | o |
| outstandingAmount.value | m | - | m |
| outstandingAmount.precision | m | - | m |
| outstandingAmount.currency | m | - | m |
| minimalMonthlyAmount | o | - | o |
| minimalMonthlyAmount.value | m | - | m |
| minimalMonthlyAmount.precision | m | - | m |
| minimalMonthlyAmount.currency | m | - | m |
| installmentDueDate | o | - | o |
| mainAccount | o | o | o |
| mainAccount.id | o | o | o |
| mainAccount.accountno | m | m | m |
| mainAccount.accountno.cz-iban | m | m | m |
| mainAccount.accountno.cz-bic | m | m | m |
| mainAccount.accountno.number | m | m | m |
| mainAccount.accountno.bankCode | m | m | m |
| mainAccount.accountno.countryCode | o | o | m |
| mainAccount.holderName | m | m | m |
| cz-overallCardAccountLimits | o | - | o |
| cz-overallCardAccountLimits.limitATM | o | - | o |
| cz-overallCardAccountLimits.limitATM.value | m | - | m |
| cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| cz-overallCardAccountLimits.limitPOS | o | - | o |
| cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| cardDeliveryMode | o | o | o |
| features | o | o | o |
| flags | o | o | o |

Response fields:

| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ |
| card | o | o | o |
| card.id | m | m | m |
| card.alias | o | o | o |
| card.owner | m | m | m |
| card.number | m | m | m |
| card.sequenceNumber | m | m | m |
| card.productI18N | m | m | m |
| card.productCode | o | o | o |
| card.expiryDate | o | o | o |
| card.validFromDate | o | o | o |
| card.state | m | m | m |
| card.type | m | m | m |
| card.provider | m | m | m |
| card.lockReason | o | o | o |
| card.characteristics | o | o | o |
| card.limit | o | - | o |
| card.limit.value | m | - | m |
| card.limit.currency | m | - | m |
| card.limit.precision | m | - | m |
| card.balance | o | - | o |
| card.balance.value | m | - | m |
| card.balance.precision | m | - | m |
| card.balance.currency | m | - | m |
| card.outstandingAmount | o | - | o |
| card.outstandingAmount.value | m | - | m |
| card.outstandingAmount.precision | m | - | m |
| card.outstandingAmount.currency | m | - | m |
| card.minimalMonthlyAmount | o | - | o |
| card.minimalMonthlyAmount.value | m | - | m |
| card.minimalMonthlyAmount.precision | m | - | m |
| card.minimalMonthlyAmount.currency | m | - | m |
| card.installmentDueDate | o | - | o |
| card.mainAccount | o | o | o |
| card.mainAccount.id | o | o | o |
| card.mainAccount.accountno | m | m | m |
| card.mainAccount.accountno.cz-iban | m | m | m |
| card.mainAccount.accountno.cz-bic | m | m | m |
| card.mainAccount.accountno.number | m | m | m |
| card.mainAccount.accountno.bankCode | m | m | m |
| card.mainAccount.accountno.countryCode | o | o | m |
| card.mainAccount.holderName | m | m | m |
| card.cz-overallCardAccountLimits | o | - | o |
| card.cz-overallCardAccountLimits.limitATM | o | - | o |
| card.cz-overallCardAccountLimits.limitATM.value | m | - | m |
| card.cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| card.cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| card.cz-overallCardAccountLimits.limitPOS | o | - | o |
| card.cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| card.cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| card.cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| card.cardDeliveryMode | o | o | o |
| card.branchId | o | o | o |
| card.features | o | o | o |
| card.flags | o | o | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (CARD)

+ Response 200 (application/json)
    + Attributes (object)
        - card (CARD, required) - Card.
        - Include SIGNINFO
-->

+ Parameters
    + id (required, string, `38338227`) ... ID of the card

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

    + Body
    
            {
                "id": "38338227",
                "alias": "moje zlata",
                "owner": "NOVÁKOVÁ JANA",
                "number": "895632XXXXXX5501",
                "sequenceNumber": "09",
                "productI18N": "Visa Gold",
                "productCode": "49",
                "expiryDate": "2014-07-31",
                "validFromDate": "2011-07-01",
                "state": "ACTIVE",
                "type": "CREDIT",
                "provider": "ERSTE_BANK",
                "lockReason": "THEFT",
                "characteristics": "MAIN",
                "limit": {
                    "value": 30000,
                    "currency": "CZK",
                    "precision": 2
                },
                "balance": {
                    "value": 185954,
                    "precision": 2,
                    "currency": "CZK"
                },
                "outstandingAmount": {
                    "value": 1854,
                    "currency": "CZK",
                    "precision": 2
                },
                "minimalMonthlyAmount": {
                    "value": 2000,
                    "precision": 2,
                    "currency": "CZK"
                },
                "installmentDueDate": "2011-07-08",
                "mainAccount": {
                    "id": "CD3FB47FE625310C",
                    "accountno": {
                        "cz-iban": "CZ782099900001237957",
                        "cz-bic": "GIBACZPX",
                        "number": "4587596589",
                        "bankCode": "0800",
                        "countryCode": "CZ"
                    },
                    "holderName": "Frany BeeOne"
                },
                "cz-overallCardAccountLimits": {
                    "limitATM": {
                        "value": 150000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "limitPOS": {
                        "value": 200000,
                        "precision": 2,
                        "currency": "CZK"
                    }
                },
                "cardDeliveryMode": "HOME",
                "features": [
                    "contactless",
                    "secureOnlineShopping"
                ],
                "flags": [
                    "notAccountOwner",
                    "locked",
                    "automaticReplacementOn",
                    "secureOnlineShoppingEnabled",
                    "contactlessEnabled"
                ]
            }

+ Response 200 (application/json)

            {
                "card": {
                    "id": "38338227",
                    "alias": "moje zlata",
                    "owner": "NOVÁKOVÁ JANA",
                    "number": "895632XXXXXX5501",
                    "sequenceNumber": "09",
                    "productI18N": "Visa Gold",
                    "productCode": "49",
                    "expiryDate": "2014-07-31",
                    "validFromDate": "2011-07-01",
                    "state": "ACTIVE",
                    "type": "CREDIT",
                    "provider": "ERSTE_BANK",
                    "lockReason": "THEFT",
                    "characteristics": "MAIN",
                    "limit": {
                        "value": 30000,
                        "currency": "CZK",
                        "precision": 2
                    },
                    "balance": {
                        "value": 185954,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "outstandingAmount": {
                        "value": 1854,
                        "currency": "CZK",
                        "precision": 2
                    },
                    "minimalMonthlyAmount": {
                        "value": 2000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "installmentDueDate": "2011-07-08",
                    "mainAccount": {
                        "id": "CD3FB47FE625310C",
                        "accountno": {
                            "cz-iban": "CZ782099900001237957",
                            "cz-bic": "GIBACZPX",
                            "number": "4587596589",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                        },
                        "holderName": "Frany BeeOne"
                    },
                    "cz-overallCardAccountLimits": {
                        "limitATM": {
                            "value": 150000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "limitPOS": {
                            "value": 200000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    "cardDeliveryMode": "HOME",
                    "features": [
                        "contactless",
                        "secureOnlineShopping"
                    ],
                    "flags": [
                        "notAccountOwner",
                        "locked",
                        "automaticReplacementOn",
                        "secureOnlineShoppingEnabled",
                        "contactlessEnabled"
                    ]
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "043971701790000016006691"
                }
            }

### Get Card Delivery Settings [GET /netbanking/my/cards/{id}/delivery]

Resource which returns current delivery settings for given card.

Paginated - no

Signable - no

Sortable - no

| Attribute | Delivery mode is BRANCH | Delivery mode is OTHER\_BRANCH | Delivery mode is HOME | Delivery mode is ADDRESS\_ABROAD |
| ------ | ------ | ------ | ------ | ------ |
| cardDeliveryMode | m | m | m | m |
| branchId | m | m | - | - |
| address | m | m | m | m |
| address.description | - | - | - | - |
| address.street | m | m | m | m |
| address.streetNumber | o | o | o | o |
| address.buildingApartment | m | m | m | m |
| address.zipCode | m | m | m | m |
| address.city | m | m | m | m |
| address.country | m | m | m | m |
| deliveryPassword | - | - | - | - |
| deliveryPhone | - | - | - | - |
| confirmations | - | - | - | - |
| confirmations.email | m | m | m | m |
| confirmations.language | m | m | m | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | If provided id of the card doesn't exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)
    + Attributes (CARD_DELIVERY)
-->

+ Parameters
    + id: `fj39afj3a8fkk03` (string, required) - Payment card identifier.

+ Request Issuing Branch (application/json)

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
+ Response 200 (application/json)

        {
            "cardDeliveryMode": "BRANCH",
            "branchId": "HR0_50000328",
            "address": {
                "street": "Antala Staška",
                "buildingApartment": "1292",
                "streetNumber": "32",
                "city": "Praha",
                "zipCode": "14000",
                "country": "CZ"
            }   
        }

+ Request Other Branch (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
+ Response 200 (application/json)

        {
                "cardDeliveryMode": "OTHER_BRANCH",
                "branchId": "HR0_50000328",
                "address": {
                    "street": "Antala Staška",
                    "buildingApartment": "1292",
                    "streetNumber": "32",
                    "city": "Praha",
                    "zipCode": "14000",
                    "country": "CZ"
                }   
        }

+ Request Domestic Address (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
+ Response 200 (application/json)

        {
            "cardDeliveryMode": "HOME",
            "address": {
                "street": "Antala Staška",
                "buildingApartment": "1292",
                "streetNumber": "32",
                "city": "Praha",
                "zipCode": "14000",
                "country": "CZ"
            }          
        }

+ Request Foreign Address (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
+ Response 200 (application/json)

        {
            "cardDeliveryMode": "ADDRESS_ABROAD",
            "address": {
                "street": "Pražská",
                "buildingApartment": "1142",
                "streetNumber": "85",
                "city": "Bratislava",
                "zipCode": "81104",
                "country": "SK"
            }
        }


### Change Card Delivery Settings [PUT /netbanking/my/cards/{id}/delivery]

Action which could be used to change card delivery settings. Client can choose between following possibilities:
* issuing branch - Card will be delivered to issuing branch where can be taken by client.
* other branch - Card will be delivered to specified branch where can be taken by client. In this case branch should be specified.
* home address - Card will be delivered to domestic address which is set as card/pin delivery address.
* address abroad - Card will be delivered to abroad addres which is set as card/pin delivery address. In this case phone number should be specified. In case of credit card also password is needed.

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for card delivery settings change see: 
* [GET /netbanking/my/cards/{id}/delivery/sign/{signId}](#reference/resources/cards/signing-card-delivery-settings-change-get)
* [POST /netbanking/my/cards/{id}/delivery/sign/{signId}](#reference/resources/cards/signing-card-delivery-settings-change-post)
* [PUT /netbanking/my/cards/{id}/delivery/sign/{signId}](#reference/resources/cards/signing-card-delivery-settings-change-put)

Request:

| Attribute | Delivery mode is BRANCH | Delivery mode is OTHER\_BRANCH | Delivery mode is HOME | Delivery mode is ADDRESS\_ABROAD |
| ------ | ------ | ------ | ------ | ------ |
| cardDeliveryMode | m (only for debet cards is allowed) | m | m | m |
| branchId | - | m | - | - |
| address | - | - | - | - |
| address.description | - | - | - | - |
| address.street | - | - | - | - |
| address.streetNumber | - | - | - | - |
| address.buildingApartment | - | - | - | - |
| address.zipCode | - | - | - | - |
| address.city | - | - | - | - |
| address.country | - | - | - | - |
| deliveryPassword | - | - | - | m - for credit cards, otherwise ignored |
| deliveryPhone | - | - | - | m |
| confirmations | o | o | o | o |
| confirmations.email | m | m | m | m |
| confirmations.language | m | m | m | m |

Response:

| Attribute | Delivery mode is BRANCH | Delivery mode is OTHER\_BRANCH | Delivery mode is HOME | Delivery mode is ADDRESS\_ABROAD |
| ------ | ------ | ------ | ------ | ------ |
| cardDelivery.cardDeliveryMode | m | m | m | m |
| cardDelivery.branchId | m | m | - | - |
| cardDelivery.address | m | m | m | m |
| cardDelivery.address.description | - | - | - | - |
| cardDelivery.address.street | m | m | m | m |
| cardDelivery.address.streetNumber | o | o | o | o |
| cardDelivery.address.buildingApartment | m | m | m | m |
| cardDelivery.address.zipCode | m | m | m | m |
| cardDelivery.address.city | m | m | m | m |
| cardDelivery.address.country | m | m | m | m |
| cardDelivery.deliveryPassword | - | - | - | m - for credit cards, otherwise blank |
| cardDelivery.deliveryPhone | - | - | - | m |
| cardDelivery.confirmations | o | o | o | o |
| cardDelivery.confirmations.email | m | m | m | m |
| cardDelivery.confirmations.language | m | m | m | m |
| signInfo | m | m | m | m |
| signInfo.state | m | m | m | m |
| signInfo.signId | o | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | If provided id of the card doesn't exist. |
| 400 | ID\_NOT\_FOUND | If provided id of the branch doesn't exist. |
| 400 | CARD\_LOCKED | Card is locked and no changes are allowed. |
| 400 | CARD\_CLOSED | Card is already closed (usually 2 months before card expiration). |
| 400 | FEATURE\_NOT\_SUPPORTED | Card doesn't support this action. |
| 400 | FIELD\_MISSING | Mandatory field is missing. |
| 400 | VALUE\_INVALID | Invalid value specified. |
| 400 | CZ-ADDRESS\_NOT\_ABROAD | Mode ADDRESS\_ABROAD selected but domestic address set. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

    + Attributes (CARD_DELIVERY)
        - Include CONFIRMATION_EMAILS

+ Response 200 (application/json)
    + Attributes (object)
        - cardDelivery (CARD_DELIVERY, required) - Final settings of the card delivery after thish change.
            - Include CONFIRMATION_EMAILS
        - Include SIGNINFO
-->

+ Parameters
    + id: `fj39afj3a8fkk03` (string, required) - Payment card identifier.

+ Request Issuing Branch (application/json)

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "cardDeliveryMode": "BRANCH",
                "confirmations": [
                    {
                        "email": "john.doe@test.com",
                        "language": "cs"
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "cardDelivery": {
                "cardDeliveryMode": "BRANCH",
                "branchId": "HR0_50000328",
                "address": {
                    "street": "Antala Staška",
                    "buildingApartment": "1292",
                    "streetNumber": "32",
                    "city": "Praha",
                    "zipCode": "14000",
                    "country": "CZ"
                },
                "confirmations": [
                    {
                        "email": "john.doe@test.com",
                        "language": "cs"
                    }
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Other Branch (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "cardDeliveryMode": "OTHER_BRANCH",
                "branchId": "HR0_50000328"
            }
            
+ Response 200 (application/json)

        {
            "cardDelivery": {
                "cardDeliveryMode": "OTHER_BRANCH",
                "branchId": "HR0_50000328",
                "address": {
                    "street": "Antala Staška",
                    "buildingApartment": "1292",
                    "streetNumber": "32",
                    "city": "Praha",
                    "zipCode": "14000",
                    "country": "CZ"
                }   
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Domestic Address (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "cardDeliveryMode": "HOME"
            }

+ Response 200 (application/json)

        {
            "cardDelivery": {
                "cardDeliveryMode": "HOME",
                "address": {
                    "street": "Antala Staška",
                    "buildingApartment": "1292",
                    "streetNumber": "32",
                    "city": "Praha",
                    "zipCode": "14000",
                    "country": "CZ"
                }
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Foreign Address (application/json)
            
    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "cardDeliveryMode": "ADDRESS_ABROAD",
                "deliveryPhone": "+421908475124",
                "deliveryPassword": "heslo123"
            }
            
+ Response 200 (application/json)

        {
            "cardDelivery": {
                "cardDeliveryMode": "ADDRESS_ABROAD",
                "address": {
                    "street": "Pražská",
                    "buildingApartment": "1142",
                    "streetNumber": "85",
                    "city": "Bratislava",
                    "zipCode": "81104",
                    "country": "SK"
                },
                "deliveryPhone": "+421908475124",
                "deliveryPassword": "heslo123"
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

### Signing - card delivery settings change - GET [GET /netbanking/my/cards/{id}/delivery/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: `fj39afj3a8fkk03` (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - card delivery settings change - POST [POST /netbanking/my/cards/{id}/delivery/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: `fj39afj3a8fkk03` (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - card delivery settings change - PUT [PUT /netbanking/my/cards/{id}/delivery/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: `fj39afj3a8fkk03` (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Add/Change Note and Mark Transaction [PUT /netbanking/my/cards/{id}/transactions/{tId}]

Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction on selected card. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, card transaction is marked as favorite, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction (card), then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.
For **editable transaction** entity description see Editable Transaction in Data Types section.

Paginated - no

Signable - no

Sortable - no

Request:

| Attribute | General |
| ------ | ------ |
| id | m |
| note | o |
| flags | o |

Response:

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Unpermitted characters are in attribute value. |
| 400 | ID\_MISMATCH | The provided transaction id in url differs from the transaction id in payload. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |
| 400 | FIELD\_TOO\_LONG | Length of the provided note is too long. |
<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - cardTransaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Card identifier.
    + tId: E5CAB598638E8AD0A (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body

            {
                "id": "E5CAB598638E8AD0A"
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "cardTransaction": {
                "id": "E5CAB598638E8AD0A",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "045971701790000016001235"
            }
        }

### Get card transaction history export [GET /netbanking/cz/my/cards/{id}/transactions/export{?dateFrom,dateTo,fields,showAccountName,showAccountNumber,showTimespan,showBalance}]

Resource to export transaction history into signed pdf. Currently only pdf format is supported by this endpoint.

Paginated - no

Signable - no

Sortable - no

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)
-->

+ Parameters

    + id: 38338227 (string, required) - Account identifier.
    + dateFrom: `1999-09-27T00:00:00+02:00` (datetime, required) - Date from which transactions should be exported.
    + dateTo: `2000-09-27T00:00:00+02:00` (datetime, required) - Date to which transactions should be exported
    + fields: bookingDate,partner,amount,currency (string, required) - Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, location
    + showAccountName: true (boolean, optional) - Indication whether account name should be visible in export. Default is false.
    + showAccountNumber: true (boolean, optional) - Indication whether account number should be visible in export. Default is false.
    + showTimespan: true (boolean, optional) - Indication whether timespan of the export should be visible. Default is false.
    + showBalance: true (boolean, optional) - Indication whether balance of the account should be visible in export. Default is false.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/pdf)

### Issue card action [PUT /netbanking/my/cards/{id}/states]

For **card action** entity description see Card Action in Data Types section.
For **sign info** entity description see Sign Info in Basic Data Types section.

Issues various actions on a single card. Currently supported actions are:
* reissue pin
* lock card
* activate card
* set automatic card replacement on
* set automatic card replacement off

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for card action issue see: 
* [GET /netbanking/my/cards/{id}/states/sign/{signId}](#reference/resources/cards/signing-card-action-issue-get)
* [POST /netbanking/my/cards/{id}/states/sign/{signId}](#reference/resources/cards/signing-card-action-issue-post)
* [PUT /netbanking/my/cards/{id}/states/sign/{signId}](#reference/resources/cards/signing-card-action-issue-put)

Request fields:

| Attribute | General | Reissue Pin | Lock Card | Activate Card | Automatic Replacement On/Off |
| ------ | ------ | ------ | ------ | ------ | ------ |
| action | m | m | m | m | m |
| lockReason | o | - | m | - | - |
| confirmations | o | - | m | - | o |
| confirmations.email | m | m | m | m | m |
| confirmations.language | m | m | m | m | m |

Response fields:

| Attribute | General |
| ------ | ------ |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CARD\_CLOSED | Card is already closed (usually 2 months before card expiration) |
| 400 | CARD\_LOCKED | Card is already locked. |
| 400 | CZ-CONFIRMATION\_NOT\_SUPPORTED | Confirmation email is not supported for given mode. |
| 400 | FEATURE\_NOT\_SUPPORTED | Card doesn't support this action. |
| 400 | FIELD\_INVALID | Email is an invalid format. |
| 400 | FIELD\_MISSING | Mandatory field is missing. |
| 404 | ID\_NOT\_FOUND | Card with provided identifier doesn't exist. |
| 400 | INVALID\_LOCK\_REASON | Invalid lock reason specified. |
| 400 | VALUE\_INVALID | Invalid value specified. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (CARD_ACTION)

+ Response 200 (application/json)
    + Attributes (SIGNINFO)
-->

+ Parameters
   
    + id (required, text, `fj39afj3a8fkk03`)...Payment card identifier.

+ Request Reissue Pin (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "action": "REISSUE_PIN"
            }
            
+ Response 200 (application/json)

        {
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Lock Card (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "action": "LOCK_CARD",
                "lockReason": "LOSS",
                "confirmations": [{
                    "email": "card.holder@master.cz",
                    "language": "cs"
                }]
            }
            
+ Response 200 (application/json)

        {
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Activate Card (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "action": "ACTIVATE_CARD"
            }
            
+ Response 200 (application/json)

        {
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

+ Request Automatic Replacement On/Off (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT
            
    + Body
    
            {
                "action": "SET_AUTOMATIC_REPLACEMENT_ON",
                "confirmations": [{
                    "email": "card.holder@master.cz",
                    "language": "cs"
                },{
                    "email": "account.owner@master.cz",
                    "language": "en"
                }]          
            }
            
+ Response 200 (application/json)

        {
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

### Signing - card action issue - GET [GET /netbanking/my/cards/{id}/states/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: fj39afj3a8fkk03 (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - card action issue - POST [POST /netbanking/my/cards/{id}/states/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: fj39afj3a8fkk03 (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - card action issue - PUT [PUT /netbanking/my/cards/{id}/states/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: fj39afj3a8fkk03 (string, required) - Payment card identifier.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Get limits to card [GET /netbanking/my/cards/{id}/card-limits]

For **card limits** entity description see Card Limits in Data Types section.

Card Limits resource represents information about different limits for given user card.

Returns list of defined limits for given card ID.

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| limits | o |
| limits.limitType | m |
| limits.limitPeriod | m |
| limits.limit | o |
| limits.limit.value | m |
| limits.limit.precision | m |
| limits.limit.currency | m |
| limits.temporaryLimit | o |
| limits.temporaryLimit.value | m |
| limits.temporaryLimit.precision | m |
| limits.temporaryLimit.currency | m |
| limits.temporaryLimitExpiration | o |
| limits.bankLimit | o |
| limits.bankLimits.value | m |
| limits.bankLimits.precision | m |
| limits.bankLimits.currency | m |


#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - limits (array[CARD_LIMIT], optional) - List of card limits.
        - Include PAGINATION
-->

+ Parameters
    + id (required, string, `38338227`) ... ID of the card

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "limits": [
                    {
                        "limitType": "ATM",
                        "limitPeriod": "5D",
                        "limit": {
                            "value": 1500000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimit": {
                            "value": 300000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "bankLimit": {
                            "value": 90000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimitExpiration": "2014-12-12T00:00:00+02:00"
                    },
                    {
                        "limitType": "POS",
                        "limitPeriod": "1D",
                        "limit": {
                            "value": 3000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimit": {
                            "value": 500000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "bankLimit": {
                            "value": 90000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimitExpiration": "2014-12-15T00:00:00+02:00"
                    },
                    {
                        "limitType": "INTERNET",
                        "limitPeriod": "2D",
                        "limit": {
                            "value": 1000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimit": {
                            "value": 200000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "bankLimit": {
                            "value": 90000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimitExpiration": "2014-12-15T00:00:00+02:00"
                    }
                ]
            }

### Change card limits [PUT /netbanking/my/cards/{id}/card-limits]

Resource for changing limits on card.

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for card limits change see: 
* [GET /netbanking/my/cards/{id}/card-limits/sign/{signId}](#reference/resources/cards/signing-card-limits-change-get)
* [POST /netbanking/my/cards/{id}/card-limits/sign/{signId}](#reference/resources/cards/signing-card-limits-change-post)
* [PUT /netbanking/my/cards/{id}/card-limits/sign/{signId}](#reference/resources/cards/signing-card-limits-change-put)

Please note: If temporaryLimit.value will be send in PUT request then limit.value (permanent limit) will be ignored. While temporary limits are active on card then it is not possible to modify permanent limits.

Request fields:

| Attribute | General |
| ------ | ------ |
| limits | o |
| limits.limitType | m |
| limits.limitPeriod | m |
| limits.limit | o |
| limits.limit.value | m |
| limits.limit.precision | m |
| limits.limit.currency | m |
| limits.temporaryLimit | o |
| limits.temporaryLimit.value | m |
| limits.temporaryLimit.precision | m |
| limits.temporaryLimit.currency | m |
| limits.temporaryLimitExpiration | o |
| limits.bankLimit | o |
| limits.bankLimit.value | m |
| limits.bankLimit.precision |m |
| limits.bankLimit.currency | m |
| confirmations | o |
| confirmations.email | m |
| confirmations.language | m |

Response fields:

| Attribute | General |
| ------ | ------ |
| limits | o |
| limits.limitType | m |
| limits.limitPeriod | m |
| limits.limit | o |
| limits.limit.value | m |
| limits.limit.precision | m |
| limits.limit.currency | m |
| limits.temporaryLimit | o |
| limits.temporaryLimit.value | m |
| limits.temporaryLimit.precision | m |
| limits.temporaryLimit.currency | m |
| limits.temporaryLimitExpiration | o |
| limits.bankLimit | o |
| limits.bankLimit.value | m |
| limits.bankLimit.precision | m |
| limits.bankLimit.currency | m |
| confirmations | o |
| confirmations.email | m |
| confirmations.language | m |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CARD_LOCKED | Operation cannot be done. Card is not ACTIVE. |
| 400 | CZ-ATM_LIMIT_NOT_DIVISIBLE | Amount is not divisible by 200 or 1000. |
| 400 | CZ-ATM_VALUE_OVER_MAX_LIMIT | Maximum limit for ATM exceeded. |
| 400 | CZ-CARD_EXPIRED_BEFORE_DATE | Validity of temporary limit is longer than card validity. |
| 400 | CZ-INTERNET_LIMIT_NOT_DIVISIBLE | Amount is not divisible by 1000. |
| 400 | CZ-INTERNET_VALUE_OVER_MAX_LIMIT | Maximum limit for internet exceeded. |
| 400 | CZ-ONLY_TEMP_LIMITS_ALLOWED | Only a temporary limit can be set. |
| 400 | CZ-POS_LIMIT_NOT_DIVISIBLE | Amount is not divisible by 1000. |
| 400 | CZ-POS_VALUE_OVER_MAX_LIMIT | Maximum limit for POS exceeded. |
| 400 | FIELD_EMPTY | Attribute is mandatory. |
| 404 | ID_NOT_FOUND | The provided ID does not exist. |
| 400 | VALUE_INVALID | Invalid value. |
| 400 | CZ-POS_LIMIT_LOWER_ECOMMERCE | Permanent and temporary card payment limit must be higher or equal to the permanent and temporary Internet payment limit. |
| 400 | INVALID_DATE_IN_PAST | Entered date cannot be a past date |


<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (object)
        - limits (array[CARD_LIMIT], required) - List of card limits.
        - Include CONFIRMATION_EMAILS

+ Response 200 (application/json)
    + Attributes (object)
        - limits (array[CARD_LIMIT], required) - List of card limits.
        - Include CONFIRMATION_EMAILS
        - Include SIGNINFO
-->

+ Parameters

    + id (required, string, `38338227`) ... ID of the card

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

    + Body

                    {
                        "limits": [
                            {
                                "limitType": "ATM",
                                "limitPeriod": "5D",
                                "limit": {
                                    "value": 1500000,
                                    "precision": 2,
                                    "currency": "CZK"
                                }
                            },
                            {
                                "limitType": "POS",
                                "limitPeriod": "1D",
                                "limit": {
                                    "value": 30000,
                                    "precision": 2,
                                    "currency": "CZK"
                                },
                                "temporaryLimit": {
                                    "value": 500000,
                                    "precision": 2,
                                    "currency": "CZK"
                                },
                                "temporaryLimitExpiration": "2014-12-15T00:00:00+02:00"
                            },
                            {
                                "limitType": "INTERNET",
                                "limitPeriod": "2D",
                                "limit": {
                                    "value": 1000000,
                                    "precision": 2,
                                    "currency": "CZK"
                                }
                            }
                        ],
                        "confirmations": [
                            {
                                "email": "john.doe@test.com",
                                "language": "cs"
                            }
                        ]
                    }

+ Response 200 (application/json)

            {
                "limits": [
                    {
                        "limitType": "ATM",
                        "limitPeriod": "5D",
                        "limit": {
                            "value": 30000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    {
                        "limitType": "POS",
                        "limitPeriod": "1D",
                        "limit": {
                            "value": 3000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimit": {
                            "value": 500000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "temporaryLimitExpiration": "2014-12-15T00:00:00+02:00"
                    },
                    {
                        "limitType": "INTERNET",
                        "limitPeriod": "2D",
                        "limit": {
                            "value": 1000000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    }
                ],    
                "confirmations": [
                    {
                        "email": "john.doe@test.com",
                        "language": "cs"
                    }
                ],
                "signInfo": {
                    "state": "OPEN",
                    "signId": "fde367favcz89fra"
                }
            }

### Signing - card limits change - GET [GET /netbanking/my/cards/{id}/card-limits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (required, string, `38338227`) ... ID of the card
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - card limits change - POST [POST /netbanking/my/cards/{id}/card-limits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (required, string, `38338227`) ... ID of the card
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - card limits change - PUT [PUT /netbanking/my/cards/{id}/card-limits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id (required, string, `38338227`) ... ID of the card
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Get a 3D secure status of card [GET /netbanking/my/cards/{id}/secure-online-shopping]

For **Card 3D Secure** entity description see Card 3D Secure in Data Types section.

Returns the 3D secure online shopping status for a single card given it's ID.

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| status | o |
| pam | o |
| phoneNumber | o |
| language | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (CARD_3D_SECURE)
-->

+ Parameters
    + id (required, string, `T-EG0.4511611062872344.1`) ... ID of the card

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "status": "OK",
                "pam": "Personal salutation",
                "phoneNumber": "+420 433974932",
                "language": "cs"
            }

## Profile [/netbanking/my/profile]

For **profile** entity description see Profile in Data Types section.

### Get information about the currently logged-in user. [GET]

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| firstname | m |
| lastname | m |
| salutation | o |
| customerId | m |
| instituteId | m |
| marketingInfoAcceptance | m |
| gender | m |
| lastlogin | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (PROFILE)
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

            {
                "firstname": "Jan",
                "lastname": "Novak",
                "salutation": "Jane",
                "customerId": "ABC123",
                "instituteId": 1,
                "marketingInfoAcceptance": "ACCEPTED",
                "gender": "MALE",
                "lastlogin": "2013-11-28T16:18:10Z"
            }
        
### Get profile with login info [GET /netbanking/my/profile/logininfo]

For **profile login info** entity description see Profile Login Info in Data Types section.

Resource returns list of last logins. Only the last login for particular channel/application.

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ | 
| lastlogin | o |
| lastlogin.channel | m |
| lastlogin.lastlogin | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (PROFILE_LOGIN_INFO)
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

        {
            "lastlogin": [
                {
                    "channel": "GEORGE",
                    "lastlogin": "2014-01-23T11:38:52Z"
                }
            ]
        }        
        
## Payments [/netbanking/my/orders/payments{?size,page,sort,order}]

For **payment** entity description see Payment in Data Types section.

### Get list of payments. [GET]

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: transferDate


| Attribute | General |
| ------ | ------ |
| pageNumber | o | 
| pageCount | o | 
| pageSize | o |
| nextPage | o |
| orders  | o | 
| orders.id | m |
| orders.referenceId | o |
| orders.hash | o |
| orders.orderCategory | m |
| orders.orderType | m |
| orders.senderName | o |
| orders.sender | m |
| orders.sender.cz-iban | o | 
| orders.sender.cz-bic | o | 
| orders.sender.number | m | 
| orders.sender.bankCode | m | 
| orders.sender.countryCode | o | 
| orders.receiverName | o | 
| orders.receiver | m |
| orders.receiver.iban | m |
| orders.receiver.bic | o |
| orders.receiver.cz-iban | o | 
| orders.receiver.cz-bic | o |
| orders.receiver.number | m | 
| orders.receiver.bankCode | m | 
| orders.receiver.countryCode | o | 
| orders.amount | m | 
| orders.amount.value | m | 
| orders.amount.precision | m | 
| orders.amount.currency | m |
| orders.symbols | o |
| orders.symbols.variableSymbol | o | 
| orders.symbols.constantSymbol | o | 
| orders.symbols.specificSymbol | o |
| orders.additionalInfo | o |
| orders.additionalInfo.text4x35 | o | 
| orders.senderReference | o | 
| orders.executionDate | o |
| orders.modificationDate | o | 
| orders.transferDate | o |
| orders.expirationDate | o |
| orders.state | m | 
| orders.stateDetail | m |
| orders.stateOk | m |
| orders.cz-description | o |
| orders.applicationId | o |
| orders.channelId | o |
| receiverAddress | o |
| orders.flags | o |
| orders.flags.urgent | o |
| orders.flags.editable | o |
| orders.flags.cancelable | o |
| orders.flags.deletable | o |
| orders.flags.signable | o |
| orders.flags.redoNotPossible | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |
| 400 | VALUE\_INVALID | Invalid value. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - orders (array[PAYMENT_ORDER_FULL], optional) - Collection of all payment orders entered by user and not deleted to all relevant user´s accounts.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
    + sort (optional, string, `transferDate`) ... Comma separated list of fields which should be used for sorting. Sort priorities are left to right. This call can be sorted by transferDate.
    + order (optional, string, `desc`) ... The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 0,
                "pageSize": 8,
                "nextPage": 1,
                "orders": [
                    {
                        "id": "043869409830000411024045",
                        "referenceId": "15477845awdawd4854",
                        "hash": "d1bc8d3ba4afc7e109612cb",
                        "orderCategory": "DOMESTIC",
                        "orderType": "PAYMENT_OUT",
                        "senderName": "Mag. A. M. Mittermuster oder Felix",
                        "sender": {
                            "cz-iban": "AT742099900000000018",
                            "cz-bic": "SPBAAT20XXX",
                            "number": "2326573123",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                        },
                        "receiverName": "AE060330000010195511161",
                        "receiver": {
                            "cz-iban": "AE060330000010195511161",
                            "cz-bic": "BOMLAEA0",
                            "number": "2326573123",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                        },
                        "amount": {
                            "value": 100,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "symbols": {
                            "variableSymbol": "193460",
                            "constantSymbol": "0308",
                            "specificSymbol": "7853154453"
                        },
                        "additionalInfo": {
                            "text4x35": [
                                "poznamka pro prijemce",
                                "poznamka pro prijemce 2"
                            ]
                        },
                        "executionDate": "2014-02-12T00:00:00+02:00",
                        "transferDate": "2014-03-12",
                        "modificationDate": "2014-02-12T00:00:00+02:00",
                        "expirationDate": "2014-02-15T00:00:00+02:00",
                        "channelId": "NET_BANKING",
                        "applicationId": "GEORGE",
                        "state": "SPOOLED",
                        "stateDetail": "TRM",
                        "stateOk": true,
                        "flags": [
                            "deletable"
                        ]
                    }
                ]
            }
            
### Get payment detail [GET /netbanking/my/orders/payments/{id}]

For **payment** entity description see Payment in Data Types section.

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| id | m |
| referenceId | o |
| hash | o |
| orderCategory | m |
| orderType | m |
| senderName | o | 
| sender | m | 
| sender.cz-iban | o | 
| sender.cz-bic | o | 
| sender.number | m | 
| sender.bankCode | m | 
| sender.countryCode | o | 
| receiverName | o | 
| receiver | m |
| receiver.iban | m |
| receiver.bic | o |
| receiver.cz-iban | o | 
| receiver.cz-bic | o | 
| receiver.number | m | 
| receiver.bankCode | m | 
| receiver.countryCode | o | 
| amount | m | 
| amount.value | m | 
| amount.precision | m | 
| amount.currency | m |
| symbols | o |
| symbols.variableSymbol | o |
| symbols.constantSymbol | o |
| symbols.specificSymbol | o |
| additionalInfo | o |
| additionalInfo.text4x35 | o |
| senderReference | o |
| executionDate | o |
| modificationDate | o |
| transferDate | o |
| expirationDate | o |
| state | m |
| stateDetail | m |
| stateOk | m |
| cz-description | o |
| channelId | o |
| applicationId | o |
| receiverAddress | o |
| flags | o |
| flags.urgent | o |
| flags.deletable | o |
| flags.cancelable | o |
| flags.editable | o |
| flags.signable | o |
| flags.redoNotPossible | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |
| 400 | VALUE\_INVALID | Invalid value. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (PAYMENT_ORDER_FULL)
-->

+ Parameters

    + id (required, string, `150506293532245`) ... payment id

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "id": "043869409830000411024045",
                "referenceId": "15477845awdawd4854",
                "hash": "d1bc8d3ba4afc7e109612cb",
                "orderCategory": "DOMESTIC",
                "orderType": "PAYMENT_OUT",
                "senderName": "Mag. A. M. Mittermuster oder Felix",
                "sender": {
                    "cz-iban": "AT742099900000000018",
                    "cz-bic": "SPBAAT20XXX",
                    "accountNumber": "2326573123",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "receiverName": "AE060330000010195511161 ",
                "receiver": {
                    "cz-iban": "AE060330000010195511161 ",
                    "cz-bic": "BOMLAEA0",
                    "number": "2326573123",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "amount": {
                    "value": 100,
                    "precision": 2,
                    "currency": "EUR"
                },
                "symbols": {
                    "variableSymbol": "193460",
                    "constantSymbol": "0308",
                    "specificSymbol": "7853154453"
                },
                "additionalInfo": {
                    "text4x35": [
                        "poznamka pro prijemce",
                        "poznamka pro prijemce 2"
                    ]
                },
                "executionDate": "2014-02-12T00:00:00+02:00",
                "transferDate": "2014-03-12",
                "modificationDate": "2014-02-12T00:00:00+02:00",
                "expirationDate": "2014-02-15T00:00:00+02:00",
                "channelId": "NET_BANKING",
                "applicationId": "GEORGE",
                "state": "SPOOLEd",
                "stateDetail": "TRM",
                "stateOk": true,
                "flags": [
                    "cancelable"
                ]
            }
            
### Remove one specific payment order via it's ID [DELETE /netbanking/my/orders/payments/{id}]

Paginated - no

Signable - yes

Sortable - no

**Note:** It is possible to delete only payments flagged as deletable or cancelable. Deletion of payment order with deletable flag does not require signing process. Signing is mandatory when payment order flagged as cancelable is deleted.

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for payment delete see: 
* [GET /netbanking/my/orders/payments/{id}/sign](#reference/resources/payments/signing-payment-order-delete-get)
* [POST /netbanking/my/orders/payments/{id}/sign](#reference/resources/payments/signing-payment-order-delete-post)
* [PUT /netbanking/my/orders/payments/{id}/sign](#reference/resources/payments/signing-payment-order-delete-put)

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-OPERATION\_ALREADY\_DELETED | Operation was already deleted. |
| 404 | ID_NOT_FOUND | The provided ID does not exist. |
| 400 | NOT\_POSSIBLE | Operation cannot be deleted by logged user. |

<!-- 
Example 1: deletion of payment order when signing process is not required

+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 204
-->

<!--
Example 2: deletion of payment order requiring singing.

+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ + Response 200 (application/json)
    + Attributes (SIGNINFO)
-->

+ Parameters

    + id: 50412 (text, required) - Payment order identifier.

+ Request for not signable deletion of payment order

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 204

+ Request for signable deletion of payment order

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
                }

### Signing - payment order delete - GET [GET /netbanking/my/orders/payments/{id}/sign]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 50412 (text, required) - Payment order identifier.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - payment order delete - POST [POST /netbanking/my/orders/payments/{id}/sign]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 50412 (text, required) - Payment order identifier.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - payment order delete - PUT [PUT /netbanking/my/orders/payments/{id}/sign]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_CANCELATION\_REFUSED | Payment order cancelation not successful. |
| 400 | CZ-ORDER\_CANCELATION\_UNCERTAIN | Payment order cancelation not known. |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: 50412 (text, required) - Payment order identifier.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)
            
### Retrieve current booking date associated with account for defined payment order category [PUT /netbanking/my/orders/payments/bookingdate{?accountId}] 

Returns current available booking date (today or the next available bank working day) based on the provided account and optional payment order category parameters. This booking date is calculated based on different cutOff times for processing of specified payment category in associated institution (in AT different institutions could have different cutOff times). This booking date will be used during booking in BE system, if such payment order from provided account will be signed and processed right now. Booking day could be the next working/bank day if current day is bank holiday, weekend or time is over the cutOff time for processing such payment order category. The returned date value is not the delivery date, but it can be used to predict it on FE, if the maximum transfer time is known for particular payment order category.

Paginated - no

Signable - no

Sortable - no

Request fields:

If sender.iban or receiver.iban is filled, then bic is optional.
If receiver.number is filled, then bankCode is mandatory.
One of receiver.number, receiver.iban must be filled.

Please note: priority attribute is not used for R1, so any value can be filled in.

| Attribute | General |
| ------ | ------ |
| receiver.iban | o |
| receiver.bic | o |
| receiver.number | o |
| receiver.bankCode | o |
| receiver.countryCode | - |
| priority | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| bookingDate | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-INVALID\_DATE | Cannot use this date. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_INVALID | Field value is invalid. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | FIELD\_TOO\_SHORT | The field minimum length is not given. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (PAYMENT_BOOKING_DATE_REQUEST)

+ Response 200 (application/json)
    + Attributes (object)
        - bookingDate: `2015-03-23T23:00:00Z` (DATETIME, required) - Payment booking date.
-->

+ Parameters
   
    + accountId (required, text, `SU0.1209269013`) ... Source account ID for the payment order.
    
+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046
            
    + Body
        
            {
                "receiver": {
                    "number": "123-123",
                    "bankCode": "0100",
                    "countryCode": "CZ"
                },
                "priority": "STANDARD"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "bookingDate": "2015-03-23T23:00:00Z"
            }

### Create a new payment domestic [POST /netbanking/my/orders/payments/domestic]

For **payment domestic** entity description see Payment Domestic in Data Types section.

Paginated - no

Signable - yes

Sortable - no

**Note:** If transferDate is not set in request it will be calculated by business logic and the nearest possible transferDate is delivered in the response.

If sender.iban or receiver.iban is filled, then bic is optional.
If sender.number or receiver.number is filled, then bankCode is mandatory.

For description of signing process see section [Signing Manageable orders](#reference/signing-of-resources/signing-manageable-orders).
For signing resources for payment create see: 
* [GET /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-get)
* [POST /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-post)
* [PUT /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-put)

Request fields:

| Attribute | General |
| ------ | ------ |
| id | o |
| orderCategory | m |
| orderType | m |
| senderName | m |
| sender | m |
| sender.cz-iban | o | 
| sender.cz-bic | o | 
| sender.number | m | 
| sender.bankCode | m | 
| sender.countryCode | o | 
| receiverName | m |
| receiver | m |
| receiver.cz-iban | o | 
| receiver.cz-bic | o | 
| receiver.number | m | 
| receiver.bankCode | m | 
| receiver.countryCode | o | 
| amount | m |
| amount.value | m | 
| amount.precision | m | 
| amount.currency | m | 
| transferDate | o |
| additionalInfo | o |  
| additionalInfo.text4x35 | o |
| senderReference | o | 
| symbols | o |
| symbols.variableSymbol | o | 
| symbols.constantSymbol | o | 
| symbols.specificSymbol | o | 
| cz-skipCnbPrefixValidation | o |
| flags.urgent | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| hash | m |
| orderCategory | m |
| orderType | m |
| senderName | m |
| sender | m |
| sender.cz-iban | o | 
| sender.cz-bic | o | 
| sender.number | m | 
| sender.bankCode | m | 
| sender.countryCode | o | 
| receiverName | m |
| receiver | m |
| receiver.cz-iban | o | 
| receiver.cz-bic | o |  
| receiver.number | m | 
| receiver.bankCode | m | 
| receiver.countryCode | o | 
| amount | m |
| amount.value | m | 
| amount.precision | m | 
| amount.currency | m |
| executionDate | o |
| modificationDate | o |
| transferDate | o |
| additionalInfo | o |  
| additionalInfo.text4x35 | o | 
| senderReference | o |
| symbols | o | 
| symbols.variableSymbol | o | 
| symbols.constantSymbol | o | 
| symbols.specificSymbol | o | 
| cz-skipCnbPrefixValidation | o |
| state | m |
| stateDetail | o |
| stateOk | m |
| channelId | o |
| applicationId | o |
| flags.urgent | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-CNB\_PAYMENT | Payment to CNB should have account prefix. |
| 400 | CZ-CURRENCY\_NOT\_CZK | "The currency is not ""CZK""." |
| 400 | CZ-EP\_CURRENCY\_NOT\_CZK | Non-allowed currency for express payment. |
| 400 | CZ-EP\_INVALID\_DUE\_DATE | Only currency due date is possible for express payment. |
| 400 | CZ-EP\_INVALID\_RECEIVER | Non-allowed account for express payment. |
| 400 | CZ-EP\_INVALID\_TIME | Time is up for express payment. |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-MAXIMUM\_AMOUNT | Maximum amount exceeded. |
| 400 | CZ-MINIMUM\_AMOUNT | Minimum amount is not given. |
| 400 | CZ-TOO\_MANY\_DECIMAL\_PLACES | Number of decimal places exceeded. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | DATE\_INVALID | Field value is invalid. |
| 400 | FIELD\_INVALID | Invalid field. |
| 400 | FIELD\_INVALID\_TOO\_FAR\_IN\_FUTURE | Date is too far in the future. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | FIELD\_TOO\_SHORT | The field minimum length is not given. |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |
| 400 | INVALID\_DATE\_IN\_PAST | Past due date. |
| 400 | LIMIT\_EXCEEDED | Transaction amount is over security limit. |
| 400 | ORDER\_NOT\_POSSIBLE | Payment order deliveration is not possible. |
| 400 | RECEIVER\_NOT\_ALLOWED | The receiver account is not between predefined available accounts for this sender account, so the transfer is not allowed. |
| 400 | VALUE\_INVALID | Datetime format is invalid. |
| 400 | RECEIVER_NOT_ALLOWED | Transfer to the account is not allowed. (Multiple reasons: not paired to savings account, is summary account, ...) |
| 400 | INACTIVE_DEPOSIT_ACCOUNT | Transaction cannot be performed. Deposit account is not active yet. |
| 400 | CZ-WITHDRAWALS_MAXIMUM_NUMBER_EXCEEDED | The maximum number of permitted non-penalised withdrawals from deposit account has been used up. |
| 400 | CZ-INVALID_WITHDRAWAL_DUE_DATE | Withdrawal due date cannot be greater than the next term deposit account due date + duration of withdrawal due date. |
| 400 | CZ-WITHDRAWALS_LIMIT_EXCEEDED | Withdrawal amount exceed withdrawal limit for the overlimit withdrawal (withdrawal outside revolving date). |
| 400 | CZ-MONEYBOX_INVALID_FIELD | It is possible to enter a payment from the savings account only to that personal account for which the savings account has been opened. (Transfer to moneybox is possible only from superior account.) |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (PAYMENT_ORDER_ENTRY)

+ Response 200 (application/json)
    + Attributes (PAYMENT_ORDER_ENTRY_FULL)
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002
            
    + Body
  
            {  
                "orderCategory":"DOMESTIC",
                "orderType":"PAYMENT_OUT",
                "senderName":"Jiřina Sigmundová",
                "sender":{  
                   "cz-iban":"CZ4008000000000137282053"
                },
                "receiverName":"Josef Cejnar",
                "receiver":{  
                   "cz-iban":"CZ4108000000000091150193"
                },
               
                "amount":{  
                   "value":110,
                   "precision":2,
                   "currency":"CZK"
                },
                "symbols":{  
                   "variableSymbol":"1212121",
                   "constantSymbol":"0308",
                   "specificSymbol":"5555555"
                },
                "senderReference":"moje platba",
                "cz-skipCnbPrefixValidation":"true",
                "transferDate": "2015-12-30",
                "additionalInfo": {
                    "text4x35": [
                        "poznamka pro prijemce",
                        "poznamka pro prijemce 2"
                    ]
                },
                "flags":[  
                   "urgent"
                ]
            }
    
+ Response 200

            {
                "id": "043721778790000001007101",
                "hash": "d1bc8d3ba4afc7e109612cb",
                "orderCategory": "DOMESTIC",
                "orderType": "PAYMENT_OUT",
                "senderName": "Dkffr. Manfred Dichtl",
                "sender": {
                    "cz-iban": "AT602099900000005702",
                    "cz-bic": "SPBAAT20XXX",
                    "number": "2003169250",
                    "bankCode": "0800"
                },
                "receiverName": "Max Mustermann",
                "receiver": {
                    "cz-iban": "AT961100000976007260",
                    "number": "2003169852",
                    "bankCode": "0800"
                },
                "executionDate": "2015-12-30T00:00:00+02:00",
                "modificationDate": "2015-12-30T00:00:00+02:00",
                "transferDate": "2015-12-30",
                "amount": {
                    "value": 250,
                    "precision": 2,
                    "currency": "EUR"
                },
                "symbols": {
                    "variableSymbol": "193460",
                    "constantSymbol": "0308",
                    "specificSymbol": "7853154453"
                },
                "senderReference": "1587456",
                "cz-skipCnbPrefixValidation": "true",
                "additionalInfo": {
                    "text4x35": [
                        "poznamka pro prijemce",
                        "poznamka pro prijemce 2"
                    ]
                },
                "state": "open",
                "stateDetail": "OPN",
                "stateOk": true,
                "channelId": "NET_BANKING",
                "applicationId": "GEORGE",
                "flags": [
                    "urgent"
                ]
            }

### Update one specific payment domestic via it's ID [PUT /netbanking/my/orders/payments/domestic/{id}]

For **payment domestic** entity description see Payment Domestic in Data Types section.

Paginated - no

Signable - yes

Sortable - no

If sender.iban or receiver.iban is filled, then bic is optional.
If sender.number or receiver.number is filled, then bankCode is mandatory.

For description of signing process see section [Signing Manageable orders](#reference/signing-of-resources/signing-manageable-orders).
For signing resources for payment update see: 
* [GET /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-get)
* [POST /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-post)
* [PUT /netbanking/my/orders/payments/domestic/{id}/sign](#reference/resources/payments/signing-payment-domestic-create/update-put)

Request fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| orderCategory | m |
| orderType | m |
| senderName | m |
| sender | m |
| sender.cz-iban | o |
| sender.cz-bic | o | 
| sender.number | m | 
| sender.bankCode | m |
| sender.countryCode | o | 
| receiverName | m |
| receiver | m |
| receiver.cz-iban | o |
| receiver.cz-bic | o |
| receiver.number | m |
| receiver.bankCode | m |
| receiver.countryCode | o | 
| amount | m |
| amount.value | m | 
| amount.precision | m | 
| amount.currency | m |
| transferDate | o |
| additionalInfo | o |
| additionalInfo.text4x35 | o | 
| senderReference | o |
| symbols | o |
| symbols.variableSymbol | o | 
| symbols.constantSymbol | o | 
| symbols.specificSymbol | o | 
| cz-skipCnbPrefixValidation | o |
| state | m |
| stateDetail | o |
| stateOk | m |
| flags.urgent | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| hash | m |
| orderCategory | m |
| orderType | m |
| senderName | m |
| sender | m | 
| sender.cz-iban | o |
| sender.cz-bic | o |  
| sender.number | m | 
| sender.bankCode | m | 
| receiverName | m |
| receiver | m |
| receiver.cz-iban | o |
| receiver.cz-bic | o |  
| receiver.number | m | 
| receiver.bankCode | m |
| receiver.countyCode | o | 
| amount | m |
| amount.value | m | 
| amount.precision | m | 
| amount.currency | m |
| executionDate | o |
| modificationDate | o |
| transferDate | o |
| additionalInfo | o | 
| additionalInfo.text4x35 | o | 
| senderReference | o | 
| symbols | o |
| symbols.variableSymbol | o | 
| symbols.constantSymbol | o | 
| symbols.specificSymbol | o | 
| cz-skipCnbPrefixValidation | o |
| state | m |
| stateDetail | o |
| stateOk | m |
| channelId | o |
| applicationId | o |
| flags.urgent | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-CNB\_PAYMENT | Payment to CNB should have account prefix. |
| 400 | CZ-CURRENCY\_NOT\_CZK | "The currency is not ""CZK""." |
| 400 | CZ-EP\_INVALID\_CURRENCY | Non-allowed currency for express payment. |
| 400 | CZ-EP\_INVALID\_DUE\_DATE | Only current due date is possible for express payment. |
| 400 | CZ-EP\_INVALID\_RECEIVER | Non-allowed account for express payment. |
| 400 | CZ-EP\_INVALID\_TIME | Time is up for express payment. |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-MAXIMUM\_AMOUNT | Maximum amount exceeded. |
| 400 | CZ-MINIMUM\_AMOUNT | Minimum amount is not given. |
| 400 | CZ-TOO\_MANY\_DECIMAL\_PLACES | Number of decimal places exceeded. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | DATE\_INVALID | Field value is invalid. |
| 400 | FIELD\_INVALID | Invalid field. |
| 400 | FIELD\_INVALID\_TOO\_FAR\_IN\_FUTURE | Date is too far in the future. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | FIELD\_TOO\_SHORT | The field minimum length is not given. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |
| 400 | INVALID\_DATE\_IN\_PAST | Past due date. |
| 400 | LIMIT\_EXCEEDED | Transaction amount is over security limit. |
| 400 | NOT\_POSSIBLE | Operation cannot be provided. |
| 400 | ORDER\_NOT\_POSSIBLE | Payment order deliveration is not possible. |
| 400 | RECEIVER\_NOT\_ALLOWED | The receiver account is not between predefined available accounts for this sender account, so the transfer is not allowed. |
| 400 | VALUE\_INVALID | Datetime format is invalid. |
| 400 | RECEIVER_NOT_ALLOWED | Transfer to the account is not allowed. (Multiple reasons: not paired to savings account, is summary account, ...) |
| 400 | INACTIVE_DEPOSIT_ACCOUNT | Transaction cannot be performed. Deposit account is not active yet. |
| 400 | CZ-WITHDRAWALS_MAXIMUM_NUMBER_EXCEEDED | The maximum number of permitted non-penalised withdrawals from deposit account has been used up. |
| 400 | CZ-INVALID_WITHDRAWAL_DUE_DATE | Withdrawal due date cannot be greater than the next term deposit account due date + duration of withdrawal due date. |
| 400 | CZ-WITHDRAWALS_LIMIT_EXCEEDED | Withdrawal amount exceed withdrawal limit for the overlimit withdrawal (withdrawal outside revolving date). |
| 400 | CZ-MONEYBOX_INVALID_FIELD | It is possible to enter a payment from the savings account only to that personal account for which the savings account has been opened. (Transfer to moneybox is possible only from superior account.) |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (PAYMENT_ORDER_ENTRY_FULL)

+ Response 200 (application/json)
    + Attributes (PAYMENT_ORDER_ENTRY_FULL)
-->

+ Parameters

    + id (required, string, `38338227`) ... identification number of a single payment order

+ Request

            {
                "id": "043721778790000001007101",
                "orderCategory": "DOMESTIC",
                "orderType": "PAYMENT_OUT",
                "senderName": "Dkffr. Manfred Dichtl",
                "sender": {
                    "cz-iban": "AT602099900000005702",
                    "cz-bic": "SPBAAT20XXX",
                    "number": "2003169250",
                    "bankCode": "0800"
                },
                "receiverName": "Max Mustermann",
                "receiver": {
                    "cz-iban": "AT961100000976007260",
                    "number": "2003169852",
                    "bankCode": "0800"
                },
                "transferDate": "2015-12-30",
                "amount": {
                    "value": 250,
                    "precision": 2,
                    "currency": "EUR"
                },
                "symbols": {
                    "variableSymbol": "193460",
                    "constantSymbol": "0308",
                    "specificSymbol": "7853154453"
                },
                "senderReference": "1587456",
                "cz-skipCnbPrefixValidation": "true",
                "state": "open",
                "stateDetail": "OPN",
                "stateOk": true,
                "additionalInfo": {
                    "text4x35": [
                        "poznamka pro prijemce",
                        "poznamka pro prijemce 2"
                    ]
                }
            }
    
+ Response 200

            {
                "id": "043721778790000001007101",
                "hash": "d1bc8d3ba4afc7e109612cb",
                "orderCategory": "DOMESTIC",
                "orderType": "PAYMENT_OUT",
                "senderName": "Dkffr. Manfred Dichtl",
                "sender": {
                    "cz-iban": "AT602099900000005702",
                    "cz-bic": "SPBAAT20XXX",
                    "number": "2003169250",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "receiverName": "Max Mustermann",
                "receiver": {
                    "cz-iban": "AT961100000976007260",
                    "number": "2003169852",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "executionDate": "2015-12-30T00:00:00+02:00",
                "modificationDate": "2015-12-30T00:00:00+02:00",
                "transferDate": "2015-12-30",
                "amount": {
                    "value": 250,
                    "precision": 2,
                    "currency": "EUR"
                },
                "symbols": {
                    "variableSymbol": "193460",
                    "constantSymbol": "0308",
                    "specificSymbol": "7853154453"
                },
                "senderReference": "1587456",
                "cz-skipCnbPrefixValidation": "true",
                "additionalInfo": {
                    "text4x35": [
                        "poznamka pro prijemce",
                        "poznamka pro prijemce 2"
                    ]
                },
                "state": "open",
                "stateDetail": "OPN",
                "stateOk": true,
                "channelId": "NET_BANKING",
                "applicationId": "GEORGE"
            }

### Signing - payment domestic create/update - GET [GET /netbanking/my/orders/payments/domestic/{id}/sign{?hash}]

For description of signing process see section [Signing Manageable orders](#reference/signing-of-resources/signing-manageable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    + id: 043721778790000001007101 (text, required) - Payment order identifier.
    + hash: d1bc8d3ba4afc7e109612cb (text, required) - Hash of the payment order which should be signed (returned in payment order object). To be sure you are signing unchanged object.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_MANAGEABLE_GET_RESPONSE)

### Signing - payment domestic create/update - POST [POST /netbanking/my/orders/payments/domestic/{id}/sign]

For description of signing process see section [Signing Manageable orders](#reference/signing-of-resources/signing-manageable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 043721778790000001007101 (text, required) - Payment order identifier.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_MANAGEABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_MANAGEABLE_POST_RESPONSE)

### Signing - payment domestic create/update - PUT [PUT /netbanking/my/orders/payments/domestic/{id}/sign]

For description of signing process see section [Signing Manageable orders](#reference/signing-of-resources/signing-manageable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_REFUSED | Payment order delivery not successful. |
| 400 | CZ-ORDER\_DELIVERATION\_UNCERTAIN  | Payment order delivery not known. |
| 400 | HASH\_MISMATCH | The provided hash no longer fits to the content of the resource. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: 043721778790000001007101 (text, required) - Payment order identifier.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_MANAGEABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_MANAGEABLE_PUT_RESPONSE)
 
## Standing Orders [/netbanking/my/accounts/{id}/standingorders{?size,page,sort,order}]

For **standing order** entity description see Standing Order in Data Types section.

### Get list of all standing orders to the account [GET]

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: nextExecutionDate


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| standingOrders | o |
| standingOrders.number | m |
| standingOrders.type | m |
| standingOrders.status | m |
| standingOrders.alias | o |
| standingOrders.receiverName | o |
| standingOrders.receiver | m |
| standingOrders.receiver.cz-iban | o |
| standingOrders.receiver.cz-bic | o |
| standingOrders.receiver.number | m |
| standingOrders.receiver.bankCode | m |
| standingOrders.receiver.countryCode | o |
| standingOrders.senderReference | o |
| standingOrders.amount | m |
| standingOrders.amount.value | m |
| standingOrders.amount.precision | m |
| standingOrders.amount.currency | m |
| standingOrders.startDate | m |
| standingOrders.maxIteration | o |
| standingOrders.maxAmount | o |
| standingOrders.maxAmount.value | m |
| standingOrders.maxAmount.precision | m |
| standingOrders.maxAmount.currency | m |
| standingOrders.nextExecutionDate | m |
| standingOrders.realExecutionDate | o |
| standingOrders.stopDateFrom | o |
| standingOrders.stopDateTo | o |
| standingOrders.lastExecutionDate | o |
| standingOrders.executionMode | m |
| standingOrders.executionDueMode | m |
| standingOrders.executionInterval | m |
| standingOrders.intervalDueDay | o |
| standingOrders.intervalDueMonth | o |
| standingOrders.symbols | o |
| standingOrders.symbols.variableSymbol | o |
| standingOrders.symbols.constantSymbol | o |
| standingOrders.symbols.specificSymbol | o |
| standingOrders.flags | o |
| standingOrders.flags.editable | o |
| standingOrders.flags.[deletable] | o |

#### Error Codes

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Attributes (object)
        - standingOrders (STANDING_ORDER_FULL, optional) - List Of standing orders.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
    + sort (optional, string, `nextExecutionDate`) ... Comma separated list of fields which should be used for sorting. Sort priorities are left to right. This call can be sorted by nextExecutionDate.
    + order (optional, string, `desc`) ... The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.
    + id (required, string, `SU0.0137282053`) ... identification number of an account

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 1,
                "pageSize": 11,
                "nextPage": 1,
                "standingOrders": [
                    {
                        "number": "1016",
                        "type": "STANDING_ORDER",
                        "status": "OK",
                        "alias": "prispevek na EKO",
                        "receiverName": "Greenpeace",
                        "receiver": {
                            "cz-iban": "CZ172099900000005603",
                            "cz-bic": "GIBACZPX",
                            "number": "8547896523",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                        },
                        "senderReference": "pro prijemce",
                        "amount": {
                            "value": 300,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "startDate": "2008-11-17T23:00:00Z",
                        "nextExecutionDate": "2015-12-30",
                        "realExecutionDate": "2015-12-31",
                        "executionMode": "UNTIL_CANCELLATION",
                        "executionDueMode": "DUE_LAST_DAY_OF_MONTH",
                        "executionInterval": "QUARTERLY",
                        "intervalDueDay": 15,
                        "intervalDueMonth": 3,
                        "symbols": {
                            "constantSymbol": "485965",
                            "variableSymbol": "854259",
                            "specificSymbol": "785421"
                        },
                        "flags": [
                            "editable",
                            "deletable"
                        ]
                    },
                    {
                        "number": "1024",
                        "type": "STANDING_ORDER",
                        "status": "OK",
                        "alias": "skolka",
                        "receiverName": "Visa-Elisabeth Netbanking",
                        "receiver": {
                            "cz-iban": "CZ520118800006098628",
                            "cz-bic": "GIBACZPX",
                            "number": "8547896523",
                            "bankCode": "0800",
                            "countryCode": "CZ"
                        },
                        "senderReference": "",
                        "amount": {
                            "value": 1000,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "startDate": "2014-01-26T23:00:00Z",
                        "nextExecutionDate": "2014-01-31",
                        "realExecutionDate": "2015-12-31",
                        "stopDateFrom": "2016-02-02",
                        "stopDateTo": "2016-02-03",
                        "executionMode": "UNTIL_CANCELLATION",
                        "executionDueMode": "DUE_DAY_OF_MONTH",
                        "executionInterval": "MONTHLY",
                        "intervalDueDay": 8,
                        "flags": [
                            "editable",
                            "deletable"
                        ]
                    }
                ]
            }

### Get the details of one specific standing or sweep order [GET /netbanking/my/accounts/{id}/standingorders/{number}]

For **standing order** entity description see Standing Order in Data Types section.

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| number | m |
| type | m |
| status | m |
| alias | o |
| receiverName | o |
| receiver | m |
| receiver.cz-iban | o |
| receiver.cz-bic | o |
| receiver.number | m |
| receiver.bankCode | m |
| receiver.countryCode | o |
| senderReference | o |
| amount | m |
| amount.value | m |
| amount.precision | m |
| amount.currency | m |
| startDate | m |
| maxIteration | o |
| maxAmount | o |
| maxAmount.value | m |
| maxAmount.precision | m |
| maxAmount.currency | m |
| nextExecutionDate | m |
| realExecutionDate | o |
| stopDateFrom | o |
| stopDateTo | o |
| lastExecutionDate | o |
| executionMode | m |
| executionDueMode | m |
| executionInterval | m |
| intervalDueDay | o |
| intervalDueMonth | o |
| symbols | o |
| symbols.variableSymbol | o |
| symbols.constantSymbol | o |
| symbols.specificSymbol | o |
| flags | o |
| flags.editable | o |
| flags.deletable | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (STANDING_ORDER_FULL)
-->

+ Parameters

    + number (required, string, `1016`) ... Internal number of the standing order respectively sweep order 

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "number": "1016",
                "type": "STANDING_ORDER",
                "status": "OK",
                "alias": "Greenpeace",
                "receiverName": "Greenpeace s.r.o.",
                "receiver": {
                    "cz-iban": "CZ172099900000005603",
                    "cz-bic": "GIBACZPX",
                    "number": "8547896523",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "senderReference": "pro prijemce",
                "amount": {
                    "value": 300,
                    "precision": 2,
                    "currency": "EUR"
                },
                "startDate": "2008-11-17T23:00:00Z",
                "nextExecutionDate": "2015-12-30",
                "realExecutionDate": "2015-12-31",
                "stopDateFrom": "2016-02-02",
                "stopDateTo": "2016-02-03",
                "executionMode": "UNTIL_CANCELLATION",
                "executionDueMode": "DUE_LAST_DAY_OF_MONTH",
                "executionInterval": "HALFYEARLY",
                "intervalDueDay": 4,
                "intervalDueMonth": 6,
                "symbols": {
                    "constantSymbol": "485965",
                    "variableSymbol": "854259",
                    "specificSymbol": "785421"
                },
                "flags": [
                    "editable",
                    "deletable"
                ]
            }

### Delete standing order [DELETE /netbanking/my/accounts/{id}/standingorders/{number}]

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for standing order delete see: 
* [GET /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-delete-get)
* [POST /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-delete-post)
* [PUT /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-delete-put)

| Attribute | General |
| ------ | ------ |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

    + Attributes (SIGNINFO)
-->

+ Parameters

    + id (string, required) - ID internal identifier of account used as part of URI.
    + number: 1016 (string, required) - Standing order number identifier used as part of URI.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

        {
            "signInfo": {
                "state": "OPEN",
                "signId": "fde367favcz89fra"
            }
        }

### Signing - standing order delete - GET [GET /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - number: 1016 (string, required) - Standing order number identifier used as part of URI.
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - standing order delete - POST [POST /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - number: 1016 (string, required) - Standing order number identifier used as part of URI.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - standing order delete - PUT [PUT /netbanking/my/accounts/{id}/standingorders/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_REFUSED | Standing order delivery not successful. |
| 400 | CZ-ORDER\_DELIVERATION\_UNCERTAIN | Standing order delivery not known. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - number: 1016 (string, required) - Standing order number identifier used as part of URI.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Create a new standing order. [POST /netbanking/my/accounts/{id}/standingorders]

For **standing payment order** entity description see Standing Payment Order in Data Types section.

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for standing order create see: 
* [GET /netbanking/my/accounts/{id}/standingorders/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-create-get)
* [POST /netbanking/my/accounts/{id}/standingorders/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-create-post)
* [PUT /netbanking/my/accounts/{id}/standingorders/sign/{signId}](#reference/resources/standing-orders/signing-standing-order-create-put)

Request fields:

| Attribute | General |
| ------ | ------ |
| type | m |
| receiverName | o |
| receiver | m |
| receiver.cz-iban | o |
| receiver.cz-bic | o |
| receiver.number | m |
| receiver.bankCode | m |
| receiver.countryCode | o |
| senderReference | o |
| paymentReference | o |
| amount | m |
| amount.value | m |
| amount.precision | m |
| amount.currency | m |
| nextExecutionDate | m |
| lastExecutionDate | o |
| executionMode | m |
| executionDueMode | m |
| executionInterval | m |
| intervalDueDay | o |
| intervalDueMonth | o |
| symbols | o |
| symbols.variableSymbol | o |
| symbols.constantSymbol | o |
| symbols.specificSymbol | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| number | m |
| type | m |
| status | m |
| alias | o |
| receiverName | o |
| receiver | m |
| receiver.cz-iban | o |
| receiver.cz-bic | o |
| receiver.number | m |
| receiver.bankCode | m |
| receiver.countryCode | o |
| senderReference | o |
| paymentReference | o |
| amount | m |
| amount.value | m |
| amount.precision | m |
| amount.currency | m |
| startDate | m |
| nextExecutionDate | m |
| lastExecutionDate | o |
| executionMode | m |
| executionDueMode | m |
| executionInterval | m |
| intervalDueDay | o |
| intervalDueMonth | o |
| symbols | o |
| symbols.variableSymbol | o |
| symbols.constantSymbol | o |
| symbols.specificSymbol | o |
| flags | o |
| flags.editable | o |
| flags.deletable | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId |o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-CURRENCY\_NOT\_CZK | The currency is not "CZK". |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-INVALID\_EXECUTION\_INTERVAL | Invalid period. |
| 400 | CZ-INVALID\_INTERVAL\_DUE\_DAY | Invalid payment day. |
| 400 | CZ-INVALID\_LAST\_EXECUTION\_DATE | Invalid last execution date. |
| 400 | CZ-INVALID\_NEXT\_EXECUTION\_DATE | Invalid first payment date. |
| 400 | CZ-LAST\_EXECUTION\_DATE\_TOO\_FAR\_IN\_FUTURE | Last execution date is too far in the future. |
| 400 | CZ-MAXIMUM\_AMOUNT | Maximum amount exceeded. |
| 400 | CZ-MINIMUM\_AMOUNT | Minimum amount is not given. |
| 400 | CZ-NEXT\_EXECUTION\_DATE\_NOT\_BUSINESS\_DAY | Non-business day. |
| 400 | CZ-NEXT\_EXECUTION\_DATE\_TO\_FAR\_IN\_FUTURE | First payment date is too far in the future. |
| 400 | CZ-TOO\_MANY\_DECIMAL\_PLACES | Number of decimal places exceeded. |
| 400 | CZ-WRONG\_INTERVAL\_DUE\_DAY | First payment date is not in line with standard payment date. |
| 400 | FIELD\_INVALID | Invalid field. |
| 400 | FIELD\_INVALID\_TOO\_FAR\_IN\_FUTURE | Field value is too far in future. |
| 400 | LIMIT\_EXCEEDED | Transaction amount is over security limit. |
| 400 | RECEIVER\_NOT\_ALLOWED | The receiver account is not allowed. |
| 400 | VALUE\_INVALID | Invalid value. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (STANDING_ORDER_ENTRY)

+ Response 200 (application/json)
    + Attributes (STANDING_ORDER_FULL)
    + Include SIGNINFO
-->

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

    + Body

            {
                "type": "STANDING_ORDER",
                "status": "OK",
                "alias": "Greenpeace",
                "receiverName": "Greenpeace s.r.o.",
                "receiver": {
                    "cz-iban": "CZ172099900000005603",
                    "cz-bic": "GIBACZPX",
                    "number": "8547896523",
                    "bankCode": "0800",
                    "countryCode": "CZ"
                },
                "senderReference": "",
                "paymentReference": "",
                "amount": {
                    "value": 300,
                    "precision": 2,
                    "currency": "EUR"
                },
                "nextExecutionDate": "2015-12-30",
                "executionMode": "UNTIL_CANCELLATION",
                "executionDueMode": "DUE_LAST_DAY_OF_MONTH",
                "lastExecutionDate": "2018-12-30",
                "executionInterval": "QUARTERLY",
                "intervalDueDay": 2,
                "intervalDueMonth": 1,
                "symbols": {
                    "constantSymbol": "485965",
                    "variableSymbol": "854259",
                    "specificSymbol": "785421"
                }
            }

+ Response 200 (application/json)

           {
                "standingOrder": {
                    "number": "1016",
                    "type": "STANDING_ORDER",
                    "status": "OK",
                    "alias": "Greenpeace",
                    "receiverName": "Greenpeace s.r.o.",
                    "receiver": {
                        "cz-iban": "CZ172099900000005603",
                        "cz-bic": "GIBACZPX",
                        "prefix": "000000",
                        "number": "8547896523",
                        "bankCode": "0800",
                        "countryCode": "CZ"
                    },
                    "senderReference": "",
                    "paymentReference": "",
                    "amount": {
                        "value": 300,
                        "precision": 2,
                        "currency": "EUR"
                    },
                    "startDate": "2008-11-17T23:00:00Z",
                    "nextExecutionDate": "2015-12-30",
                    "executionMode": "UNTIL_CANCELLATION",
                    "executionDueMode": "DUE_LAST_DAY_OF_MONTH",
                    "executionInterval": "QUARTERLY",
                    "intervalDueDay": 2,
                    "intervalDueMonth": 1,
                    "symbols": {
                        "constantSymbol": "485965",
                        "variableSymbol": "854259",
                        "specificSymbol": "785421"
                    },
                    "flags": [
                        "editable"
                        "deletable"
                    ]
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "fde367favcz89fra"
                }
            }

### Signing - standing order create - GET [GET /netbanking/my/accounts/{id}/standingorders/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - standing order create - POST [POST /netbanking/my/accounts/{id}/standingorders/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - standing order create - PUT [PUT /netbanking/my/accounts/{id}/standingorders/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_REFUSED | Standing order delivery not successful. |
| 400 | CZ-ORDER\_DELIVERATION\_UNCERTAIN | Standing order delivery not known. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id (string, required) - ID internal identifier of account used as part of URI.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

## Insurances [/netbanking/my/contracts/insurances{?size,page}]

For **insurance** entity description see Insurance in Data Types section.

### Get all insurances [GET]

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| insurances | o |
| insurances.id | m |
| insurances.type | m |
| insurances.product | m |
| insurances.productI18N | m |
| insurances.description | o |
| insurances.alias | o |
| insurances.insurancePolicyHolder | m |
| insurances.policyNumber | m |
| insurances.status | o |
| insurances.life | o |
| insurances.life.premiumPaymentInterval | m |
| insurances.life.premium | m |
| insurances.life.premium.value | m |
| insurances.life.premium.precision | m |
| insurances.life.premium.currency | m |
| insurances.life.contractEndDate | m |
| insurances.life.contractStartDate | m |
| insurances.life.insuredAmount | m |
| insurances.life.insuredAmount.value | m |
| insurances.life.insuredAmount.precision | m |
| insurances.life.insuredAmount.currency | m |
| insurances.life.currentCapitalValue | m |
| insurances.life.currentCapitalValue.value | m |
| insurances.life.currentCapitalValue.precision | m |
| insurances.life.currentCapitalValue.currency | m |
| insurances.life.expectedPayoffAmount | o |
| insurances.life.expectedPayoffAmount.value | m |
| insurances.life.expectedPayoffAmount.precision | m |
| insurances.life.expectedPayoffAmount.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |
| 400 | FIELD\_INVALID | Field value is invalid. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - insurances (array[INSURANCE], optional) - List of insurances.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `50`)...Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`)...Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
    
+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

        {
            "pageNumber": 8,
            "pageCount": 9,
            "pageSize": 2,
            "nextPage": 9,
            "insurances": [
                {
                    "id": "0000000000519638",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 42100,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractEndDate": "2015-02-28",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 100000000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "expectedPayoffAmount": {
                           "value": 1414121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                },
                {
                    "id": "0000000000340412",
                    "type": "LIFE",
                    "alias": "contract alias",
                    "policyNumber": "12354821556530789",
                    "product": "U89",
                    "productI18N": "Pojištění majetku",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 4220000,
                           "precision": 2,
                           "currency": "EUR"
                       },
                       "contractEndDate": "2009-03-31",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 4220000,
                           "precision": 2,
                           "currency": "EUR"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "expectedPayoffAmount": {
                           "value": 1414121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                }
            ]
        }

### Get insurance detail [GET /netbanking/my/contracts/insurances/{id}]

For **insurance** entity description see Insurance in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| id | m |
| type | m |
| product | m |
| productI18N | m |
| description | o |
| alias | o |
| insurancePolicyHolder | m |
| policyNumber | m |
| status | m |
| life | o |
| life.premiumPaymentInterval | m |
| life.premium | m |
| life.premium.value | m |
| life.premium.precision | m |
| life.premium.currency | m |
| life.contractEndDate | m |
| life.contractStartDate | m |
| life.insuredAmount | m |
| life.insuredAmount.value | m |
| life.insuredAmount.precision | m |
| life.insuredAmount.currency | m |
| life.currentCapitalValue | m |
| life.currentCapitalValue.value | m |
| life.currentCapitalValue.precision | m |
| life.currentCapitalValue.currency | m |
| life.expectedPayoffAmount | o |
| life.expectedPayoffAmount.value | m |
| life.expectedPayoffAmount.precision | m |
| life.expectedPayoffAmount.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (INSURANCE)
-->

+ Parameters

    + id (required, text, `PC0.5502813012`)...Requested contract number.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

                {
                    "id": "0000000000519638",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 42100,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractEndDate": "2015-02-28",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 100000000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "expectedPayoffAmount": {
                           "value": 1414121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                }

### Change insurance detail [PUT /netbanking/my/contracts/insurances/{id}]

Allows to change a limited set of insurance settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process. Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Insurance-Object. Id in URL, id field and policyNumber field in payload: These fields must refer to the same insurance contract, else an error is returned.

Paginated - no

Signable - yes

Sortable - no


Request fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| type | m |
| product | m |
| productI18N | m |
| description | o |
| alias | o |
| insurancePolicyHolder | m |
| policyNumber | m |
| status | m |
| life | o |
| life.premiumPaymentInterval | m |
| life.premium | m |
| life.premium.value | m |
| life.premium.precision | m |
| life.premium.currency | m |
| life.contractEndDate | m |
| life.contractStartDate | m |
| life.insuredAmount | m |
| life.insuredAmount.value | m |
| life.insuredAmount.precision | m |
| life.insuredAmount.currency | m |
| life.currentCapitalValue | m |
| life.currentCapitalValue.value | m |
| life.currentCapitalValue.precision | m |
| life.currentCapitalValue.currency | m |
| life.expectedPayoffAmount | o |
| life.expectedPayoffAmount.value | m |
| life.expectedPayoffAmount.precision | m |
| life.expectedPayoffAmount.currency | m |

Response fields:

| Attribute | General |
| ------ | ------ |
| insurance | o |
| insurance.id | m |
| insurance.type | m |
| insurance.product | m |
| insurance.productI18N | m |
| insurance.description | o |
| insurance.alias | o |
| insurance.insurancePolicyHolder | m |
| insurance.policyNumber | m |
| insurance.status | m |
| insurance.life | o |
| insurance.life.premiumPaymentInterval | m |
| insurance.life.premium | m |
| insurance.life.premium.value | m |
| insurance.life.premium.precision | m |
| insurance.life.premium.currency | m |
| insurance.life.contractEndDate | m |
| insurance.life.contractStartDate | m |
| insurance.life.insuredAmount | m |
| insurance.life.insuredAmount.value | m |
| insurance.life.insuredAmount.precision | m |
| insurance.life.insuredAmount.currency | m |
| insurance.life.currentCapitalValue | m |
| insurance.life.currentCapitalValue.value | m |
| insurance.life.currentCapitalValue.precision | m |
| insurance.life.currentCapitalValue.currency | m |
| insurance.life.expectedPayoffAmount | o |
| insurance.life.expectedPayoffAmount.value | m |
| insurance.life.expectedPayoffAmount.precision | m |
| insurance.life.expectedPayoffAmount.currency | m |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUNND | The provided ID does not exist. |
| 400 | FIELD\_INVALID | Field value is invalid. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (INSURANCE)

+ Response 200 (application/json)
    + Attributes (object)
        - insurance (INSURANCE, required) - Insurance object.
        - Include SIGNINFO
-->

+ Parameters

    + id (required, text, `PC0.5502813012`)...Requested contract number.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

    + Body

                {
                    "id": "0000000000519638",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 42100,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractEndDate": "2015-02-28",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 100000000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "expectedPayoffAmount": {
                           "value": 1414121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                }

+ Response 200 (application/json)

                {
                    "insurance": {
                        "id": "0000000000519638",
                        "type": "LIFE",
                        "alias": "Moje životko",
                        "policyNumber": "12354821556535445",
                        "product": "12",
                        "productI18N": "Životní pojištění",
                        "insurancePolicyHolder": "Kamper Manfred",
                        "status": "ACTIVE",
                        "life": {
                           "premiumPaymentInterval": "MONTHLY",
                           "premium": {
                               "value": 42100,
                               "precision": 2,
                               "currency": "CZK"
                           },
                           "contractEndDate": "2015-02-28",
                           "contractStartDate": "2011-02-28",
                           "insuredAmount": {
                               "value": 100000000,
                               "precision": 2,
                               "currency": "CZK"
                           },
                           "currentCapitalValue": {
                               "value": 14121400,
                               "precision": 2,
                               "currency": "CZK"
                           },
                           "expectedPayoffAmount": {
                               "value": 1414121400,
                               "precision": 2,
                               "currency": "CZK"
                           }
                        }
                    },
                    "signInfo": {
                       "state": "OPEN",
                       "signId": "043971701790000016006691"
                    }
                }
            
## Messages [/netbanking/my/messages{?size,page,sort,order}]

For **message** entity description see Message in Data Types section.

### Get all messages [GET]

Paginated - yes

Signable - no

Sortable - yes

Sortable fields: from, date, id


Get all messages, read or unread, mandatory and non-mandatory. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application).

| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| messages | o |
| messages.id | m |
| messages.from | m |
| messages.subject | m |
| messages.date | m |
| messages.body | m |
| messages.flags | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - messages (array[MESSAGE], required) - List of all messages.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `50`)...Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `8`)...Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
    + sort (optional, text, `date,id`)...Comma separated list of fields which should be used for sorting. Sort priorities are left to right. This call can be sorted by from, date and id.
    + order (optional, text, `desc,asc`)...The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 3,
                "nextPage": 1,
                "messages": [
                    {
                        "from": "Internet banking",
                        "subject": "Planned service upgrade",
                        "date": "2013-05-17T00:00:00+02:00",
                        "body": "There is service outage planed today.",
                        "id": "131371121204",
                        "flags": [
                            "unread",
                            "warning"
                        ]
                    },
                    {
                        "from": "Česká spořitelna",
                        "subject": "Urgent message",
                        "date": "2013-05-17T00:00:00+02:00",
                        "body": "please read this message, really urgent",
                        "id": "131370923151",
                        "flags": [
                            "mandatory"
                        ]
                    },
                    {
                        "from": "Česká spořitelna",
                        "subject": "Information message",
                        "date": "2013-05-17T00:00:00+02:00",
                        "body": "This is just information for you.",
                        "id": "131370922317",
                        "flags": [
                            "info"
                        ]
                    }
                ]
            }

### Get specific message [GET /netbanking/my/messages/{id}]

For **message** entity description see Message in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| id | m |
| from | m |
| subject | m |
| date | m |
| body | m |
| flags | o |


#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (MESSAGE)
-->

+ Parameters

  + id (required, text, `131371121204`) ... ID of the user message in inbox used as part of URI.

+ Request

  + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "from": "Internet banking",
                "subject": "Planned service upgrade",
                "date": "2013-05-17T00:00:00+02:00",
                "body": "There is service outage planed today.",
                "id": "131371121204",
                "flags": [
                    "unread",
                    "warning"
                ]
            }


### Update single message in personal inbox [PUT /netbanking/my/messages/{id}]

This endpoint currently only supports marking a message as (un)read.

Paginated - no

Signable - no

Sortable - no


#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (object)
        - read: true (boolean, required) - Value that change flag "unread".

+ Response 204
-->

+ Parameters

  + id (required, text, `131371121204`) ... ID of the user message in inbox used as part of URI.

+ Request

  + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

  + Body

            {
                "read": true
            }

+ Response 204 (application/json)


### Endpoint removes one specific message identified by ID. [DELETE /netbanking/my/messages/{id}]

Paginated - no

Signable - no

Sortable - no


#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 204
-->

+ Parameters

  + id (required, text, `131371121204`) ... ID of the user message in inbox used as part of URI.

+ Request

  + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 204 (application/json)

### Get all mandatory messages [GET /netbanking/my/messages/mandatory]

For **message** entity description see Message in Data Types section.

Paginated - no

Signable - no

Sortable - no

Return all mandatory messages. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application). Which messages can be seen by which application can be configured on the presto server side.

| Attribute | General |
| ------ | ------ |
| id | m |
| from | m |
| subject | m |
| date | m |
| body | m |
| flags | o |

### Error codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - messages (array[MESSAGE], required) - List of mandatory messages.
        - Include PAGINATION
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

        {
            "messages": [
                {
                    "from": "Česká spořitelna",
                    "subject": "Urgent message",
                    "date": "2013-05-17T00:00:00+02:00",
                    "body": "please read this message, really urgent",
                    "id": "131370923151",
                    "flags": [
                        "mandatory"
                    ]
                }
            ]
        }
            
## Securities Accounts [/netbanking/my/securities{?size,page}]

For **securities account** entity description see Securities Account in Data Types section.

### Get list of all securities accounts. [GET]

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| securitiesAccounts |  |
| securitiesAccounts.id | m |
| securitiesAccounts.accountno | m |
| securitiesAccounts.alias | o |
| securitiesAccounts.description | m |
| securitiesAccounts.balance | m |
| securitiesAccounts.balance.value | m |
| securitiesAccounts.balance.precision | m |
| securitiesAccounts.balance.currency | m |
| securitiesAccounts.subSecAccounts | o |
| securitiesAccounts.subSecAccounts.id | m |
| securitiesAccounts.subSecAccounts.titles | o |
| securitiesAccounts.subSecAccounts.titles.title | m |
| securitiesAccounts.subSecAccounts.titles.isin | m |
| securitiesAccounts.subSecAccounts.titles.numberOfShares | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.value | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.precisiont | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.currency | m |
| securitiesAccounts.subSecAccounts.titles.lastPriceDate | m |
| securitiesAccounts.subSecAccounts.titles.marketValue | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.value | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.precision | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.currency | m |
| securitiesAccounts.subSecAccounts.titles.securityType | m |
| securitiesAccounts.subSecAccounts.titles.productGroup | m |
| securitiesAccounts.subSecAccounts.titles.securityIndication | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - securities (array[SECURITY], optional) - List of securities.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

        {
            "pageNumber": 0,
            "pageCount": 1,
            "pageSize": 4,
            "nextPage": 1,
            "securitiesAccounts": [
                {
                "id": "2f03203727596531303d17",
                "accountno": "20031692500",
                "alias": "Maximilian Mustermann TEST- Abt. SEC",
                "description": "Majetkový účet",
                "balance": {
                    "value": 3112747888059,
                    "precision": 2,
                    "currency": "EUR"
                },
                "subSecAccounts": [
                    {
                        "id": "20031692500",
                        "titles": [
                            {
                                "title": "RORENTO              EO 3",
                                "isin": "ANN757371433",
                                "numberOfShares": 498,
                                "marketValue": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPrice": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPriceDate": "2013-11-28T16:18:10Z",
                                "securityType": "UNKNOWN",
                                "productGroup": "UNKNOWN",
                                "securityIndication": "Reference quote"
                            }
                        ]
                    }
                ]
            }
            ]
        }


### Retrieve a Security Account details [GET /netbanking/my/securities/{id}]

For **securities account** entity description see Securities Account in Data Types section.

Paginated - no

Signable - no

Sortable - no

Get a single Security Account object with all its details.

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| alias | o |
| description | m |
| balance | m |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| subSecAccounts | o |
| subSecAccounts.id | m |
| subSecAccounts.titles | o |
| subSecAccounts.titles.title | m |
| subSecAccounts.titles.isin | m |
| subSecAccounts.titles.numberOfShares | m |
| subSecAccounts.titles.lastPrice | m |
| subSecAccounts.titles.lastPrice.value | m |
| subSecAccounts.titles.lastPrice.precisiont | m |
| subSecAccounts.titles.lastPrice.currency | m |
| subSecAccounts.titles.lastPriceDate | m |
| subSecAccounts.titles.marketValue | m |
| subSecAccounts.titles.marketValue.value | m |
| subSecAccounts.titles.marketValue.precision | m |
| subSecAccounts.titles.marketValue.currency | m |
| subSecAccounts.titles.securityType | m |
| subSecAccounts.titles.productGroup | m |
| subSecAccounts.titles.securityIndication | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (SECURITY)
-->

+ Parameters

    + id (required, string, `1234567890`) ... muin - security account identifier

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT
            
+ Response 200 (application/json)

    + Body
    
            {
                "id": "2f03203727596531303d17",
                "accountno": "20031692500",
                "alias": "Maximilian Mustermann TEST- Abt. SEC",
                "description": "Majetkový účet",
                "balance": {
                    "value": 3112747888059,
                    "precision": 2,
                    "currency": "EUR"
                },
                "subSecAccounts": [
                    {
                        "id": "20031692500",
                        "titles": [
                            {
                                "title": "RORENTO              EO 3",
                                "isin": "ANN757371433",
                                "numberOfShares": 498,
                                "marketValue": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPrice": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPriceDate": "2013-11-28T16:18:10Z",
                                "securityType": "UNKNOWN",
                                "productGroup": "UNKNOWN",
                                "securityIndication": "Reference quote"
                            }
                        ]
                    }
                ]
            }

### Change securities account detail [PUT /netbanking/my/securities/{id}]

Allows to change a limited set of securities account-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process. Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Securities Account-Object. Id in URL, id field and accountno object in payload: These fields must refer to the same securities account contract, else an error is returned.

Paginated - no

Signable - yes

Sortable - no

Request fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| alias | o |
| description | m |
| balance | m |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| subSecAccounts | o |
| subSecAccounts.id | m |
| subSecAccounts.titles | o |
| subSecAccounts.titles.title | m |
| subSecAccounts.titles.isin | m |
| subSecAccounts.titles.numberOfShares | m |
| subSecAccounts.titles.lastPrice | m |
| subSecAccounts.titles.lastPrice.value | m |
| subSecAccounts.titles.lastPrice.precisiont | m |
| subSecAccounts.titles.lastPrice.currency | m |
| subSecAccounts.titles.lastPriceDate | m |
| subSecAccounts.titles.marketValue | m |
| subSecAccounts.titles.marketValue.value | m |
| subSecAccounts.titles.marketValue.precision | m |
| subSecAccounts.titles.marketValue.currency | m |
| subSecAccounts.titles.securityType | m |
| subSecAccounts.titles.productGroup | m |
| subSecAccounts.titles.securityIndication | m |

Response fields:

| Attribute | General |
| ------ | ------ |
| securitiesAccount | o |
| securitiesAccount.id | m |
| securitiesAccount.accountno | m |
| securitiesAccount.alias | o |
| securitiesAccount.description | m |
| securitiesAccount.balance | m |
| securitiesAccount.balance.value | m |
| securitiesAccount.balance.precision | m |
| securitiesAccount.balance.currency | m |
| securitiesAccount.subSecAccounts | o |
| securitiesAccount.subSecAccounts.id | m |
| securitiesAccount.subSecAccounts.titles | o |
| securitiesAccount.subSecAccounts.titles.title | m |
| securitiesAccount.subSecAccounts.titles.isin | m |
| securitiesAccount.subSecAccounts.titles.numberOfShares | m |
| securitiesAccount.subSecAccounts.titles.lastPrice | m |
| securitiesAccount.subSecAccounts.titles.lastPrice.value | m |
| securitiesAccount.subSecAccounts.titles.lastPrice.precisiont | m |
| securitiesAccount.subSecAccounts.titles.lastPrice.currency | m |
| securitiesAccount.subSecAccounts.titles.lastPriceDate | m |
| securitiesAccount.subSecAccounts.titles.marketValue | m |
| securitiesAccount.subSecAccounts.titles.marketValue.value | m |
| securitiesAccount.subSecAccounts.titles.marketValue.precision | m |
| securitiesAccount.subSecAccounts.titles.marketValue.currency | m |
| securitiesAccount.subSecAccounts.titles.securityType | m |
| securitiesAccount.subSecAccounts.titles.productGroup | m |
| securitiesAccount.subSecAccounts.titles.securityIndication | m |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SECURITY)

+ Response 200 (application/json)
    + Attributes (object)
        - security (SECURITY, required) - Security object.
        - Include SIGNINFO
-->

+ Parameters

    + id (required, text, `0000000000519638`)...Requested contract number.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

    + Body

                {
                "id": "2f03203727596531303d17",
                "accountno": "20031692500",
                "alias": "Maximilian Mustermann TEST- Abt. SEC",
                "description": "Majetkový účet",
                "balance": {
                    "value": 3112747888059,
                    "precision": 2,
                    "currency": "EUR"
                },
                "subSecAccounts": [
                    {
                        "id": "20031692500",
                        "titles": [
                            {
                                "title": "RORENTO              EO 3",
                                "isin": "ANN757371433",
                                "numberOfShares": 498,
                                "marketValue": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPrice": {
                                    "value": 29079,
                                    "precision": 2,
                                    "currency": "EUR"
                                },
                                "lastPriceDate": "2013-11-28T16:18:10Z",
                                "securityType": "UNKNOWN",
                                "productGroup": "UNKNOWN",
                                "securityIndication": "Reference quote"
                            }
                        ]
                    }
                ]
            }

+ Response 200 (application/json)

                {
                    "securitiesAccount": {
                        "id": "2f03203727596531303d17",
                        "accountno": "20031692500",
                        "alias": "Maximilian Mustermann TEST- Abt. SEC",
                        "description": "Majetkový účet",
                        "balance": {
                            "value": 3112747888059,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "subSecAccounts": [
                            {
                                "id": "20031692500",
                                "titles": [
                                    {
                                        "title": "RORENTO              EO 3",
                                        "isin": "ANN757371433",
                                        "numberOfShares": 498,
                                        "marketValue": {
                                            "value": 29079,
                                            "precision": 2,
                                            "currency": "EUR"
                                        },
                                        "lastPrice": {
                                            "value": 29079,
                                            "precision": 2,
                                            "currency": "EUR"
                                        },
                                        "lastPriceDate": "2013-11-28T16:18:10Z",
                                        "securityType": "UNKNOWN",
                                        "productGroup": "UNKNOWN",
                                        "securityIndication": "Reference quote"
                                    }
                                ]
                            }
                        ]
                    },
                    "signInfo": {
                        "state": "OPEN",
                        "signId": "043971701790000016006691"
                    }   
                }

### Add/Change Note and Mark Transaction [PUT /netbanking/cz/my/securities/{id}/transactions/{tId}]

Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, transaction is marked as favorite, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction, then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.
For **editable transaction** entity description see Editable Transaction in Data Types section.

Paginated - no

Signable - no

Sortable - no

Request:

| Attribute | General |
| ------ | ------ |
| id | m |
| note | o |
| flags | o |

Response:

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Unpermitted characters are in attribute value. |
| 400 | ID\_MISMATCH | The provided transaction id in url differs from the transaction id in payload. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |
| 400 | FIELD\_TOO\_LONG | Length of the provided note is too long. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - transaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Product identifier.
    + tId: E5CAB598638E8AD0A (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body

            {
                "id": "E5CAB598638E8AD0A"
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "transaction": {
                "id": "E5CAB598638E8AD0A",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "045971701790000016001235"
            }
        }

### Get securities transaction history export [GET /netbanking/cz/my/securities/{id}/transactions/export{?dateFrom,dateTo,fields,showAccountName,showAccountNumber,showTimespan,showBalance}]

Resource to export transaction history into signed pdf. Currently only pdf format is supported by this endpoint.

Paginated - no

Signable - no

Sortable - no

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
-->

+ Parameters

    + id: 1nw59tj98542vgt51 (string, required) - Account identifier.
    + dateFrom: `1999-09-27T00:00:00+02:00` (datetime, required) - Date from which transactions should be exported.
    + dateTo: `2000-09-27T00:00:00+02:00` (datetime, required) - Date to which transactions should be exported
    + fields: bookingDate,partner,amount,currency (string, required) - Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, location
    + showAccountName: true (boolean, optional) - Indication whether account name should be visible in export. Default is false.
    + showAccountNumber: true (boolean, optional) - Indication whether account number should be visible in export. Default is false.
    + showTimespan: true (boolean, optional) - Indication whether timespan of the export should be visible. Default is false.
    + showBalance: true (boolean, optional) - Indication whether balance of the account should be visible in export. Default is false.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/pdf)

## Payments Limits [/netbanking/my/orders/payments/limits]

For **payment limit** entity description see Payment Limit in Data Types section.

### Get remaining amounts for payment orders. [GET]

Resource to get remaining amounts for payment orders. Unsigned orders will not be considered in the calculation of the remaining amounts.

Paginated - no

Signable - no

Sortable - no

| Attribute | General |
| ------ | ------ |
| remainingLimits | o |
| remainingLimits.authorizationType | m |
| remainingLimits.channelId | m |
| remainingLimits.applicationId | m |
| remainingLimits.remainingAmount | m |
| remainingLimits.remainingAmount.value | m |
| remainingLimits.remainingAmount.precision | m |
| remainingLimits.remainingAmount.currency | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - remainingLimits (array[PAYMENT_LIMIT], optional) - List of payment limits.
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002
            
+ Response 200 (application/json)

    + Body
    
            {
                "remainingLimits": [
                    {
                        "authorizationType": "TAC",
                        "channelId": "NET_BANKING",
                        "applicationId": "GEORGE",
                        "remainingAmount": {
                            "value": 99900,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    {
                        "authorizationType": "TAC",
                        "channelId": "MOBILE_BANKING",
                        "applicationId": "GEORGE_GO",
                        "remainingAmount": {
                            "value": 25000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    },
                    {
                        "authorizationType": "TAC",
                        "channelId": "NET_BANKING",
                        "applicationId": "UNKNOWN",
                        "remainingAmount": {
                            "value": 900000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    }
                ]
            }
        
## Authorization Limits [/netbanking/my/authorizationLimits{?channel}]

For **authorization limit** entity description see Authorization Limit in Data Types section.

### Get netbanking authorization limits. [GET]

Paginated - no

Signable - no

Sortable - no


Return all user local specific payment order entry limits for for all user active authorization methods and channels/applications used in country.

| Attribute | General |
| ------ | ------ |
| limits | o |
| limits.id | m |
| limits.authorizationType | m |
| limits.channelId | m |
| limits.applicationId | m |
| limits.dailyLimit | o |
| limits.dailyLimit.value | m |
| limits.dailyLimit.precision | m |
| limits.dailyLimit.currency | m |
| limits.transactionLimit | o |
| limits.transactionLimit.value | m |
| limits.transactionLimit.precision | m |
| limits.transactionLimit.currency | m |
| limits.maxBankLimit | o |
| limits.maxBankLimit.value | m |
| limits.maxBankLimit.precision | m |
| limits.maxBankLimit.currency | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - limits (array[AUTHORIZATION_LIMIT], optional) - List of authorization limits.
-->

+ Parameters

    + channel (optional, text, `George`)...This call delivers all user authorization limits defined for all channels/applications (no channel parameter provided) or limits for specific channel/application (by default George should be used for George application). Channel URI parameter possible values: George, GeorgeGo, Business24. (Functionality is currently not provided in George AT)

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002
            
+ Response 200 (application/json)

    + Body
    
            {
                "limits": [
                    {
                        "id": "934872973982",
                        "authorizationType": "TAC",
                        "channelId": "NET_BANKING",
                        "applicationId": "GEORGE",
                        "dailyLimit": {
                            "value": 400000,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "transactionLimit": {
                            "value": 100000,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "maxBankLimit": {
                            "value": 1700000,
                            "precision": 2,
                            "currency": "EUR"
                        }
                    },
                    {
                        "id": "934872973987",
                        "authorizationType": "TAC",
                        "channelId": "NET_BANKING",
                        "applicationId": "INTERNET_BANKING",
                        "dailyLimit": {
                            "value": 150000,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "transactionLimit": {
                            "value": 90000,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "maxBankLimit": {
                            "value": 900000,
                            "precision": 2,
                            "currency": "EUR"
                        }
                    }
                ]
            }

### Get netbanking authorization limit. [GET /netbanking/my/authorizationLimits/{id}]

For **authorization limit** entity description see Authorization Limit in Data Types section.

Paginated - no

Signable - no

Sortable - no


Return local specific payment order entry limits valid for combination of user, authorization method and used channel/application. For example user could define different limits for TAC authorization via George and mobile applications.

| Attribute | General |
| ------ | ------ |
| id | m |
| authorizationType | m |
| channelId | m |
| applicationId | m |
| dailyLimit | o |
| dailyLimit.value | m |
| dailyLimit.precision | m |
| dailyLimit.currency | m |
| transactionLimit | o |
| transactionLimit.value | m |
| transactionLimit.precision | m |
| transactionLimit.currency | m |
| maxBankLimit | o |
| maxBankLimit.value | m |
| maxBankLimit.precision | m |
| maxBankLimit.currency | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (AUTHORIZATION_LIMIT)
-->

+ Parameters

    + id (required, text, `934872973982`)...ID of the authorization limits valid for particular user, authorization method and channel/application used as part of URI.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg002
            
+ Response 200 (application/json)

    + Body
    
            {
                "id": "934872973982",
                "authorizationType": "TAC",
                "channelId": "NET_BANKING",
                "applicationId": "GEORGE",
                "dailyLimit": {
                    "value": 400000,
                    "precision": 2,
                    "currency": "CZK"
                },
                "transactionLimit": {
                    "value": 100000,
                    "precision": 2,
                    "currency": "CZK"
                },
                "maxBankLimit": {
                    "value": 1700000,
                    "precision": 2,
                    "currency": "CZK"
                }
            }
        
## Building Savings [/netbanking/my/contracts/buildings{?size,page}]

For **building saving** entity description see Building Saving in Data Types section.

### Get list of all building savings [GET]

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o | 
| pageCount | o | 
| pageSize | o |
| nextPage | o |
| buildings | o |
| buildings.id | m |
| buildings.accountno | m |
| buildings.accountno.cz-iban | m |
| buildings.accountno.cz-bic | m |
| buildings.accountno.number | m |
| buildings.accountno.bankCode | m |
| buildings.accountno.countryCode | m |
| buildings.alias | o |
| buildings.type | m |
| buildings.product | m |
| buildings.productI18N | m |
| buildings.balance | m |
| buildings.balance.value | m |
| buildings.balance.precision | m |
| buildings.balance.currency | m |
| buildings.status | m |
| buildings.contractHolders | o |
| buildings.creditInterestRate | o |
| buildings.debitInterestRate | o |
| buildings.saving | o |
| buildings.saving.targetAmount | o |
| buildings.saving.targetAmount.value | m |
| buildings.saving.targetAmount.precision | m |
| buildings.saving.targetAmount.currency | m |
| buildings.saving.agreedMonthlySavings | o |
| buildings.saving.agreedMonthlySavings.value | m |
| buildings.saving.agreedMonthlySavings.precision | m |
| buildings.saving.agreedMonthlySavings.currency | o |
| buildings.saving.expiryDate | o |
| buildings.saving.bonusBearingDepositToPay | o |
| buildings.saving.bonusBearingDepositToPay.value | m |
| buildings.saving.bonusBearingDepositToPay.precision | m |
| buildings.saving.bonusBearingDepositToPay.currency | m |
| buildings.loan | o |
| buildings.loan.loanAmount | o |
| buildings.loan.loanAmount.value | m |
| buildings.loan.loanAmount.precision | m |
| buildings.loan.loanAmount.currency | m |
| buildings.loan.loanInstallment | m |
| buildings.loan.loanInstallment.value | m |
| buildings.loan.loanInstallment.precision | m |
| buildings.loan.loanInstallment.currency | m |
| buildings.loan.additionalSavings | o |
| buildings.loan.additionalSavings.value | m |
| buildings.loan.additionalSavings.precision | m |
| buildings.loan.additionalSavings.currency | m |
| buildings.loan.paymentInsurance | o |
| buildings.loan.paymentInsurance.value | m |
| buildings.loan.paymentInsurance.precision | m |
| buildings.loan.paymentInsurance.currency | m |
| buildings.loan.interestRateFromDate | o |
| buildings.loan.interestRateToDate | o |
| buildings.flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - buildings (array[BUILDING], optional) - List of building savings.
        - Include PAGINATION
-->

+ Parameters

    + size (optional, number, `50`)...Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`)...Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg042

+ Response 200 (application/json)

        {
            "pageNumber": 8,
            "pageCount": 8,
            "pageSize": 50,
            "nextPage": 9,
            "buildings": [
                {
                    "id": "df4fda87fda5f7",
                    "accountno": {
                        "cz-iban": "AT742099900000000019",
                        "cz-bic": "GIBACZPX",
                        "number": "20031692501",
                        "bankCode": "8060",
                        "countryCode": "CZ"
                    },
                    "alias": "test alias",
                    "type": "BUILD_SAVING",
                    "product": "SS",
                    "productI18N": "Stavební spoření",
                    "balance": {
                        "value": 15245200,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "status": "ACTIVE",
                    "creditInterestRate": 2.3,
                    "saving": {
                      "targetAmount": {
                          "value": 20000000,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "agreedMonthlySavings": {
                          "value": 53300,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "bonusBearingDepositToPay": {
                          "value": 1254100,
                          "precision": 2,
                          "currency": "CZK"                    
                      },
                      "expiryDate": "2017-02-14T00:00:00Z"
                    }
                },
                {
                    "id": "kufa89fdal32",
                    "accountno": {
                        "cz-iban": "AT742099900000000019",
                        "cz-bic": "GIBACZPX",
                        "number": "20031692501",
                        "bankCode": "8060",
                        "countryCode": "CZ"
                    },
                    "alias": "test alias",
                    "type": "BUILD_LOAN",
                    "product": "USS",
                    "productI18N": "Úvěr ze stavebního spoření",
                    "balance": {
                        "value": 20656300,
                        "precision": 2,
                        "currency": "CZK"                    
                    },
                    "status": "ACTIVE",
                    "debitInterestRate": 4.3,
                    "accountName": "Úvěr ze staveb. spoření",
                    "contractHolders": [
                        "Jan Křížek"
                    ],
                    "loan": {
                      "loanAmount": {
                          "value": 40696800,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "monthlyRepayments": {
                          "value": 102400,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "additionalSavings": {
                          "value": 30000,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "paymentInsurance": {
                          "value": 20000,
                          "precision": 2,
                          "currency": "CZK"
                      },
                      "interestRateFromDate": "2012-02-14",
                      "interestRateToDate": "2016-02-14"
                    }
                }
            ]
        }

### Get building savings contract [GET /netbanking/my/contracts/buildings/{id}]

For **building saving** entity description see Building Saving in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| accountno.cz-iban | m |
| accountno.cz-bic | m |
| accountno.number | m |
| accountno.bankCode | m |
| accountno.countryCode | m |
| alias | o |
| type | m |
| product | m |
| productI18N | m |
| balance | o |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| status | m |
| contractHolders | o |
| creditInterestRate | o |
| debitInterestRate | o |
| saving | o |
| saving.targetAmount | o |
| saving.targetAmount.value | m |
| saving.targetAmount.precision | m |
| saving.targetAmount.currency | m |
| saving.agreedMonthlySavings | o |
| saving.agreedMonthlySavings.value | m |
| saving.agreedMonthlySavings.precision | m |
| saving.agreedMonthlySavings.currency | o |
| saving.expiryDate | o |
| saving.bonusBearingDepositToPay | o |
| saving.bonusBearingDepositToPay.value | m |
| saving.bonusBearingDepositToPay.precision | m |
| saving.bonusBearingDepositToPay.currency | m |
| loan | o |
| loan.loanAmount | o |
| loan.loanAmount.value | m |
| loan.loanAmount.precision | m |
| loan.loanAmount.currency | m |
| loan.loanInstallment | m |
| loan.loanInstallment.value | m |
| loan.loanInstallment.precision | m |
| loan.loanInstallment.currency | m |
| loan.additionalSavings | o |
| loan.additionalSavings.value | m |
| loan.additionalSavings.precision | m |
| loan.additionalSavings.currency | m |
| loan.paymentInsurance | o |
| loan.paymentInsurance.value | m |
| loan.paymentInsurance.precision | m |
| loan.paymentInsurance.currency | m |
| loan.interestRateFromDate | o |
| loan.interestRateToDate | o |
| flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (BUILDING)
-->

+ Parameters

    + id (required, string, `ST0.3336146`) ... Building savings contract identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg042

+ Response 200 (application/json)

            {
                "id": "df4fda87fda5f7",
                "accountno": {
                    "cz-iban": "AT742099900000000019",
                    "cz-bic": "GIBACZPX",
                    "number": "20031692501",
                    "bankCode": "8060",
                    "countryCode": "CZ"
                },
                "alias": "test alias",
                "type": "BUILD_SAVING",
                "product": "SS",
                "productI18N": "Stavební spoření",
                "balance": {
                    "value": 15245200,
                    "precision": 2,
                    "currency": "CZK"
                },
                "status": "ACTIVE",
                "creditInterestRate": 2.3,
                "saving": {
                  "targetAmount": {
                      "value": 20000000,
                      "precision": 2,
                      "currency": "CZK"
                  },
                  "agreedMonthlySavings": {
                      "value": 53300,
                      "precision": 2,
                      "currency": "CZK"
                  },
                  "bonusBearingDepositToPay": {
                      "value": 1254100,
                      "precision": 2,
                      "currency": "CZK"                    
                  },
                  "expiryDate": "2017-02-14T00:00:00Z"
                }
            }

### Change building savings contract detail [PUT /netbanking/my/contracts/buildings/{id}]

Allows to change a limited set of building savings contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process. Even though other (not editable) fields are not stored they must fulfill the validation-criteria of Building Saving-Object. Id in URL, id field and accountno object in payload: These fields must refer to the same building saving contract, else an error is returned.

Paginated - no

Signable - yes

Sortable - no

Request fields:

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| accountno.cz-iban | m |
| accountno.cz-bic | m |
| accountno.number | m |
| accountno.bankCode | m |
| accountno.countryCode | m |
| alias | o |
| type | m |
| product | m |
| productI18N | m |
| balance | o |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| status | m |
| contractHolders | o |
| creditInterestRate | o |
| debitInterestRate | o |
| saving | o |
| saving.targetAmount | o |
| saving.targetAmount.value | m |
| saving.targetAmount.precision | m |
| saving.targetAmount.currency | m |
| saving.agreedMonthlySavings | o |
| saving.agreedMonthlySavings.value | m |
| saving.agreedMonthlySavings.precision | m |
| saving.agreedMonthlySavings.currency | o |
| saving.expiryDate | o |
| saving.bonusBearingDepositToPay | o |
| saving.bonusBearingDepositToPay.value | m |
| saving.bonusBearingDepositToPay.precision | m |
| saving.bonusBearingDepositToPay.currency | m |
| loan | o |
| loan.loanAmount | o |
| loan.loanAmount.value | m |
| loan.loanAmount.precision | m |
| loan.loanAmount.currency | m |
| loan.loanInstallment | m |
| loan.loanInstallment.value | m |
| loan.loanInstallment.precision | m |
| loan.loanInstallment.currency | m |
| loan.additionalSavings | o |
| loan.additionalSavings.value | m |
| loan.additionalSavings.precision | m |
| loan.additionalSavings.currency | m |
| loan.paymentInsurance | o |
| loan.paymentInsurance.value | m |
| loan.paymentInsurance.precision | m |
| loan.paymentInsurance.currency | m |
| loan.interestRateFromDate | o |
| loan.interestRateToDate | o |
| flags | o |

Response fields:

| Attribute | General |
| ------ | ------ |
| building | o |
| building.id | m |
| building.accountno | m |
| building.accountno.cz-iban | m |
| building.accountno.cz-bic | m |
| building.accountno.number | m |
| building.accountno.bankCode | m |
| building.accountno.countryCode | m |
| building.alias | o |
| building.type | m |
| building.product | m |
| building.productI18N | m |
| building.balance | o |
| building.balance.value | m |
| building.balance.precision | m |
| building.balance.currency | m |
| building.status | m |
| building.contractHolders | o |
| building.creditInterestRate | o |
| building.debitInterestRate | o |
| building.saving | o |
| building.saving.targetAmount | o |
| building.saving.targetAmount.value | m |
| building.saving.targetAmount.precision | m |
| building.saving.targetAmount.currency | m |
| building.saving.agreedMonthlySavings | o |
| building.saving.agreedMonthlySavings.value | m |
| building.saving.agreedMonthlySavings.precision | m |
| building.saving.agreedMonthlySavings.currency | o |
| building.saving.expiryDate | o |
| building.saving.bonusBearingDepositToPay | o |
| building.saving.bonusBearingDepositToPay.value | m |
| building.saving.bonusBearingDepositToPay.precision | m |
| building.saving.bonusBearingDepositToPay.currency | m |
| building.loan | o |
| building.loan.loanAmount | o |
| building.loan.loanAmount.value | m |
| building.loan.loanAmount.precision | m |
| building.loan.loanAmount.currency | m |
| building.loan.loanInstallment | m |
| building.loan.loanInstallment.value | m |
| building.loan.loanInstallment.precision | m |
| building.loan.loanInstallment.currency | m |
| building.loan.additionalSavings | o |
| building.loan.additionalSavings.value | m |
| building.loan.additionalSavings.precision | m |
| building.loan.additionalSavings.currency | m |
| building.loan.paymentInsurance | o |
| building.loan.paymentInsurance.value | m |
| building.loan.paymentInsurance.precision | m |
| building.loan.paymentInsurance.currency | m |
| building.loan.interestRateFromDate | o |
| building.loan.interestRateToDate | o |
| building.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Not permitted character. |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | FIELD\_MISSING | Mandatory field missing. |
| 400 | FIELD\_TOO\_LONG | The field maximum length is exceeded. |
| 400 | ID\_MISMATCH | The ID given in the payload does not match the ID given in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (BUILDING)

+ Response 200 (application/json)
    + Attributes (object)
        - building (BUILDING, required) - Changed building saving object for signing.
        - Include SIGNINFO
-->

+ Parameters

    + id (required, text, `ST0.3336146`)...Requested contract number.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg042

    + Body

                {
                "id": "df4fda87fda5f7",
                "accountno": {
                    "cz-iban": "AT742099900000000019",
                    "cz-bic": "GIBACZPX",
                    "number": "20031692501",
                    "bankCode": "8060",
                    "countryCode": "CZ"
                },
                "alias": "test alias",
                "type": "BUILD_SAVING",
                "product": "SS",
                "productI18N": "Stavební spoření",
                "balance": {
                    "value": 15245200,
                    "precision": 2,
                    "currency": "CZK"
                },
                "status": "ACTIVE",
                "creditInterestRate": 2.3,
                "saving": {
                  "targetAmount": {
                      "value": 20000000,
                      "precision": 2,
                      "currency": "CZK"
                  },
                  "agreedMonthlySavings": {
                      "value": 53300,
                      "precision": 2,
                      "currency": "CZK"
                  },
                  "bonusBearingDepositToPay": {
                      "value": 1254100,
                      "precision": 2,
                      "currency": "CZK"                    
                  },
                  "expiryDate": "2017-02-14T00:00:00Z"
                }
            }

+ Response 200 (application/json)

                {
                    "building": {
                        "id": "df4fda87fda5f7",
                        "accountno": {
                            "cz-iban": "AT742099900000000019",
                            "cz-bic": "GIBACZPX",
                            "number": "20031692501",
                            "bankCode": "8060",
                            "countryCode": "CZ"
                        },
                        "alias": "test alias",
                        "type": "BUILD_SAVING",
                        "product": "SS",
                        "productI18N": "Stavební spoření",
                        "balance": {
                            "value": 15245200,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "status": "ACTIVE",
                        "creditInterestRate": 2.3,
                        "saving": {
                          "targetAmount": {
                              "value": 20000000,
                              "precision": 2,
                              "currency": "CZK"
                          },
                          "agreedMonthlySavings": {
                              "value": 53300,
                              "precision": 2,
                              "currency": "CZK"
                          },
                          "bonusBearingDepositToPay": {
                              "value": 1254100,
                              "precision": 2,
                              "currency": "CZK"                    
                          },
                          "expiryDate": "2017-02-14T00:00:00Z"
                        }
                    },
                    "signInfo": {
                        "state": "OPEN",
                        "signId": "043971701790000016006691"
                    }
                }


### Get all services connecting to building [GET /netbanking/cz/my/contracts/buildings{id}/services{?size,page}]

For **service** entity description see Service in Data Types section.

Paginated - yes

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| services | o |
| services.id | m |
| services.nameI18N | m |
| services.iconGroup | m |


#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - services (array[BUILDING_SERVICE], optional) - List of building services.
        - Include PAGINATION
-->

+ Parameters

    + id (required, string, `SU0.1209269013`) ... buildings ID
    + size (optional, number, `100`) ... Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page (optional, number, `0`) ... Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 5,
                "nextPage": 1,
                "services": [
                    {
                        "id": "s54sdf756dfhm52879sdf23xd8744Fsdf5",
                        "nameI18N": "Uver k stavebnimu sporeni",
                        "iconGroup": "DEFAULT"
                    },
                    {
                        "id": "154dff756dfhm52879sdf23d845sd4f84f",
                        "nameI18N": "Preklenovaci uver",
                        "iconGroup": "DEFAULT"
                    }
                ]
            }

### Add/Change Note and Mark Transaction [PUT /netbanking/cz/my/contracts/buildings/{id}/transactions/{tId}]

Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, transaction is marked as favorite, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction, then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.
For **editable transaction** entity description see Editable Transaction in Data Types section.

Paginated - no

Signable - no

Sortable - no

Request:

| Attribute | General |
| ------ | ------ |
| id | m |
| note | o |
| flags | o |

Response:

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | Unpermitted characters are in attribute value. |
| 400 | ID\_MISMATCH | The provided transaction id in url differs from the transaction id in payload. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |
| 400 | FIELD\_TOO\_LONG | Length of the provided note is too long. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - transaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Product identifier.
    + tId: E5CAB598638E8AD0A (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Body

            {
                "id": "E5CAB598638E8AD0A"
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "transaction": {
                "id": "E5CAB598638E8AD0A",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "OPEN",
                "signId": "045971701790000016001235"
            }
        }

### Get building saving transaction history export [GET /netbanking/cz/my/contracts/buildings/{id}/transactions/export{?dateFrom,dateTo,fields,showAccountName,showAccountNumber,showTimespan,showBalance}]

Resource to export transaction history into signed pdf. Currently only pdf format is supported by this endpoint.

Paginated - no

Signable - no

Sortable - no

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
-->

+ Parameters

    + id: df4fda87fda5f7 (string, required) - Account identifier.
    + dateFrom: `1999-09-27T00:00:00+02:00` (datetime, required) - Date from which transactions should be exported.
    + dateTo: `2000-09-27T00:00:00+02:00` (datetime, required) - Date to which transactions should be exported
    + fields: bookingDate,partner,amount,currency (string, required) - Array of fields which should appear in export. Possible fields are: bookingDate, partner, amount, currency, variableSymbol, constantSymbol, specificSymbol, transactionType, note, paymentReference, senderReference, cardNumber, investmentInstrumentName, marked, valuationDate, referenceId, location
    + showAccountName: true (boolean, optional) - Indication whether account name should be visible in export. Default is false.
    + showAccountNumber: true (boolean, optional) - Indication whether account number should be visible in export. Default is false.
    + showTimespan: true (boolean, optional) - Indication whether timespan of the export should be visible. Default is false.
    + showBalance: true (boolean, optional) - Indication whether balance of the account should be visible in export. Default is false.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/pdf)

## Codetables [/netbanking/my/codetables/{id}]

For **codetable** entity description see Codetable in Data Types section.

### Get codetable content [GET]

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| items | o |
| items.key | m |
| items.values | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - items (array[CODETABLE], optional) - List of codetable values.
-->

+ Parameters

    + id (required, string, `CB_BankCode`) ... Codetable identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "items": [
                    {
                        "key": "0100",
                        "values": [
                            "Komerční banka, a.s.",
                            "Komerční banka, a.s., se sídlem: Na Příkopě 33 čp. 969, Praha 1, PSČ 114 07, IČ 45317054"
                        ]
                    },
                    {
                        "key": "0300",
                        "values": [
                            "Československá obchodní banka, a.s.",
                            "Československá obchodní banka, a.s., se sídlem: Radlická 333/150, Praha 5, PSČ 150 57, IČ 00001350"
                        ]
                    },
                    {
                        "key": "0600",
                        "values": [
                            "GE Money Bank, a.s.",
                            "GE Money Bank, a.s. , se sídlem: Vyskočilova 1422/1a, Praha 4 - Michle, PSČ 140 28, IČ 25672720"
                        ]
                    },
                    {
                        "key": "0710",
                        "values": [
                            "Česká národní banka",
                            "Česká národní banka , se sídlem: Na Příkopě 28, Praha 1, PSČ 115 03"
                        ]
                    }
                ]
            }

## User Settings [/netbanking/my/settings]

For **setting** entity description see Setting in Data Types section.

### Get user settings [GET]

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ | 
| language | m |
| landingAccountId | m |
| tacPhoneNumbers | o |
| authorizationType | m |
| passwordsExpiresInDays | m |
| flags | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (USER_SETTINGS)
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

        {
            "language": "cs",
            "landingAccountId": "CZ3308000000001592286253",
            "tacPhoneNumbers": [ "+420608XXXX77" ],
            "authorizationType": "tac",
            "passwordExpiresInDays": 300,
            "flags": [
                "displayInsurances",
                "displayBuildings",
                "displayCreditCards"
            ]        
        }
        
### Change the product group display settings [PUT]

Paginated - no

Signable - yes

Sortable - no


Change the product group display settings (meaning, the flags of the settings object). Flags can only be removed, not added. 

| Attribute | General |
| ------ | ------ | 
| language | m |
| landingAccountId | m |
| tacPhoneNumbers | o |
| authorizationType | m |
| passwordsExpiresInDays | m |
| flags | m |
| signInfo | m |
| signInfo.state | m |
| signInfosignId | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (USER_SETTINGS)

+ Response 200 (application/json)
    + Attributes (object)
        - settings (USER_SETTINGS, required)
        - Include PAGINATION
-->

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046
            
    + Body
    
            {
                "language": "sk",
                "landingAccountId": "CZ3308000000001592286253",
                "tacPhoneNumbers": [ "+420608XXXX77" ],
                "authorizationType": "tac",
                "passwordExpiresInDays": 300,
                "flags": [
                    "displayInsurances",
                    "displayBuildings",
                    "displayCreditCards"
                ]
            }
            
+ Response 200 (application/json)

            {
                "settings": {
                    "language": "sk",
                    "landingAccountId": "CZ3308000000001592286253",
                    "tacPhoneNumbers": [ "+420608XXXX77" ],
                    "authorizationType": "tac",
                    "passwordExpiresInDays": 300,
                    "flags": [
                        "displayInsurances",
                        "displayBuildings",
                        "displayCreditCards"
                    ]
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "043971701790000016006691"
                }
            }

### Get information for netbanking settings signing [GET /netbanking/my/settings/sign/{signId}]

For sign mechanism description see Resource Sign section in Basic Mechanisms section.

For sign GET mechanism description see Signable GET in Resource Sign section.

Paginated - no

Signable - no

Sortable - no


+ Parameters

    + signId (required, string, `043971701790000016006691`) ... signing identifier

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046
            
+ Response 200 (application/json)

            {
                "mode": "TAC",
                "hash": "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1",
                "phone": [
                    {
                        "id": "fb6cecc85a100197ae3ad68d1f9f2886",   
                        "alias": "SMS 1",                           
                        "number": "+420608XXXX77"                 
                    },
                    {
                        "id": "b17c5cad2c49478b078f80e8a5cb5ea1",   
                        "alias": "SMS 2",                           
                        "number": "+42077xxxx321"                 
                    }
                ]
            }

### Trigger serverside authorization [POST /netbanking/my/settings/sign/{signId}]

For sign POST mechanism description see Signable POST in Resource Sign section.

Paginated - no

Signable - no

Sortable - no


+ Parameters

    + signId (required, string, `043971701790000016006691`) ... signing identifier

+ Request

    + Headers
        
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046
            
    + Body
    
            {
                "phoneId": "fb6cecc85a100197ae3ad68d1f9f2886",
                "hash": "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1"
            }
            
+ Response 200 (application/json)

            {
                "mode": "TAC",
                "hash": "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1"
            }
    
### Confirm authorization by putting authorization code [PUT /netbanking/my/settings/sign/{signId}]

For sign PUT mechanism description see Signable PUT in Resource Sign section.

Paginated - no

Signable - no

Sortable - no


+ Parameters

    + signId (required, string, `043971701790000016006691`) ... signing identifier
    
+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046
            
    + Body
    
            {
                "hash": "d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1",
                "tac": "1234"
            }
            
+ Response 200 (application/json)

            {
                "language": "sk",
                "tacPhoneNumbers": [ "+420608XXXX77" ],
                "authorizationType": "tac",
                "passwordExpiresInDays": 300,
                "flags": [
                    "displayInsurances",
                    "displayBuildings",
                    "displayCreditCards"
                ]
            }
            
## Profile Contacts [/netbanking/my/contacts]

For **contact** entity description see Contact in Data Types section.

### Get user contact information [GET]

Paginated - no

Signable - no

Sortable - no


| Attribute | General |
| ------ | ------ |
| contacts | o |
| contacts.id | m |
| contacts.type | m |
| contacts.flags | o |
| contacts.address | o |
| contacts.address.type | m |
| contacts.address.typeI18N | o |
| contacts.address.description | o |
| contacts.address.street | o |
| contacts.address.streetNumber | o |
| contacts.address.buildingApartment | o |
| contacts.address.postBox | o |
| contacts.address.zipCode | m |
| contacts.address.city | m |
| contacts.address.country | m |
| contacts.phone | o |
| contacts.phone.type | m |
| contacts.phone.typeI18N | o |
| contacts.phone.countryCallingCode | o |
| contacts.phone.phoneNumber | m |
| contacts.email | o |
| contacts.email.email | m |
| contacts.email.type | m |
| contacts.email.typeI18N | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - contacts (array[PROFILE_CONTACT], optional) - List of profile contacts.
-->

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "contacts": [
                    {
                        "id": "postaladdresspermanent",
                        "type": "ADDRESS",
                        "flags": [
                            "mainContact"
                        ],
                        "address": {
                            "type": "PERMANENT_RESIDENCE",
                            "street": "V Celnici",
                            "streetNumber": "1985",
                            "buildingApartment": "85",
                            "zipCode": "15000",
                            "city": "Praha",
                            "country": "CZ"
                        }
                    },
                    {
                        "id": "phonenumberprimary",
                        "type": "PHONE",
                        "flags": [
                            "mainContact"
                        ],
                        "phone": {
                            "type": "PRIVATE",
                            "countryCallingCode": "0420",
                            "phoneNumber": "776123789"
                        }
                    },
                    {
                        "id": "emailprimary",
                        "type": "EMAIL",
                        "flags": [
                            "mainContact"
                        ],
                        "email": {
                            "type": "PRIVATE",
                            "email": "franz@george.cz"
                        }
                    }
                ]
            }

### Get user contact information [GET /netbanking/my/contacts/{id}]

For **contact** entity description see Contact in Data Types section.

Paginated - no

Signable - no

Sortable - no


| Attribute | General | Address | Phone | Email |
| ------ | ------ | ------ | ------ | ------ |
| id | m | m | m | m |
| type | m | m | m | m |
| flags | o | o | o | o |
| address | o | o | - | - |
| address.type | m | m | - | - |
| address.typeI18N | o | o | - | - |
| address.description | o | o | - | - |
| address.street | o | o | - | - |
| address.streetNumber | o | o | - | - |
| address.buildingApartment | o | o | - | - |
| address.postBox | o | o | - | - |
| address.zipCode | m | m | - | -|
| address.city | m | m | - | - |
| address.country | m | m | - | - |
| phone | o | - | o | - |
| phone.type | m | - | m | - |
| phone.typeI18N | o | - | o | - |
| phone.countryCallingCode | o | - | o | - |
| phone.phoneNumber | m | - | m | - |
| email | o | - | - | o |
| email.email | m | - | - | m |
| email.type | m | - | - | m |
| email.typeI18N | o | - | - | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (PROFILE_CONTACT)
-->

+ Parameters

    + id (required, text, `postaladdresspermanent`) ... Contact ID

+ Request Address

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg046

+ Response 200 (application/json)

            {
                "id": "postaladdresspermanent",
                "type": "ADDRESS",
                "flags": [
                    "mainContact"
                ],
                "address": {
                    "type": "PERMANENT_RESIDENCE",
                    "street": "V Celnici",
                    "streetNumber": "1985",
                    "buildingApartment": "85",
                    "zipCode": "15000",
                    "city": "Praha",
                    "country": "CZ"
                }
            }

+ Request Phone

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "id": "phonenumberprimary",
                "type": "PHONE",
                "flags": [
                    "mainContact"
                ],
                "phone": {
                    "type": "PRIVATE",
                    "countryCallingCode": "0420",
                    "phoneNumber": "776123789"
                }
            }

+ Request Email

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "id": "emailprimary",
                "type": "EMAIL",
                "flags": [
                    "mainContact"
                ],
                "email": {
                    "type": "PRIVATE",
                    "email": "franz@george.cz"
                }
            }

## Authorization Token [/netbanking/auth/token/invalidate]

Authorization token (OAuth 2.0 Bearer) is provided by Federated Login solution after succesful login to application (George FE).

### Invalidate Authorization Token [DELETE]

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer vF9dft4qmT

+ Response 204 (application/json)
-->

+ Request

    + Headers
    
            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: bearer vF9dft4qmT

+ Response 204 (application/json)

## iBod - Loyalty [/netbanking/cz/my/contracts/loyalty]

For **ibod account** entity description see iBod in Data Types section.

### Get iBod account detail [GET]

Resource to get data about iBod account of the current client.

Paginated - no

Signable - no

Sortable - no

| attribute | mandatory/optional |
| ------ | ------ | 
| state | m |
| exportDate | m |
| pointsCount | m |
| activationCode | o |

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

            {
                "state": "REGISTERED",
                "exportDate": "2014-09-27T00:00:00+02:00",
                "pointsCount": 34,
            }


## Direct Debit List [/netbanking/cz/my/accounts/{id}/directdebits]

Resource Direct Debit List represents collection of all direct debit approvals entered by 
user for the specified user. This resource consists of paging attributes and array of embedded **Direct Debit** items.

Resource is sortable by alias (default) and by periodCycle.

### Get list of direct debits [GET]

Get all direct debits estabilished for the given account.

Paginated - yes

Signable - no

Sortable - yes

| Attribute | General |
| ------ | ------ |
| directDebits.number | m |
| directDebits.type | m |
| directDebits.receiver | m |
| directDebits.receiver.number | o |
| directDebits.receiver.bankCode | o |
| directDebits.receiver.iban | o |
| directDebits.alias | o |
| directDebits.limit | o |
| directDebits.limit.value | m |
| directDebits.limit.precision | m |
| directDebits.limit.currency | m |
| directDebits.limitSum | o |
| directDebits.limitSum.value | m |
| directDebits.limitSum.precision | m |
| directDebits.limitSum.currency | m |
| directDebits.limitNumber | m |
| directDebits.startDate | m |
| directDebits.endDate | o |
| directDebits.symbols | m |
| directDebits.symbols.variableSymbol | m |
| directDebits.symbols.specificSymbol | o |
| directDebits.symbols.constantSymbol | o |
| directDebits.dueMonth | o |
| directDebits.dayFrom | o |
| directDebits.dayTo | o |
| directDebits.versionId | m |
| directDebits.versionValidityDate | m |
| directDebits.periodicity | m |
| directDebits.periodCycle | m |


#### Error Codes

No additional error codes.

<!-- 
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Attributes (object)
        - Include PAGINATION
        - directDebits (array[DIRECT_DEBITS], optional) - Array of direct debits.
 -->    

+ Parameters

    + id: 1234567890 (string, required) - Account id (encrypted IBAN).

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 1,
                "pageSize": 2,
                "directDebits": [
                    {
                        "number": 2,
                        "type": "DIRECT_DEBIT",
                        "receiver": {
                            "number": "000000-1234567890",
                            "bankCode": "0800"
                        },
                        "alias": "moje inkaso",
                        "periodicity": 1,
                        "periodCycle": "MONTHLY",
                        "limit": {
                            "value": 100000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "limitSum" {
                            "value": 300000,
                            "precision": 2,
                            "currency": "CZK"                
                        },
                        "numberLimit": 5,                        
                        "startDate": "2011-07-14",
                        "endDate": "2013-07-14",
                        "dueMonth": 1,
                        "dayFrom": 1,
                        "dayTo": 10,
                        "symbols": {
                            "variableSymbol": "4567",
                            "constantSymbol": "5",
                            "specificSymbol": "800"
                        },
                        "versionId": 1,
                        "versionValidityDate": "2012-01-08",
                        "periodicity": 1,
                        "periodCycle": "MONTHLY"
                    }
                ]
            }

### Create a direct debit [POST]

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for direct debit create see: 
* [GET /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-create-get)
* [POST /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-create-post)
* [PUT /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-create-put)

Request/Response fields:

| Attribute | General |
| ------ | ------ |
| directDebit.type | m |
| directDebit.receiver | m |
| directDebit.receiver.number | o |
| directDebit.receiver.bankCode | o |
| directDebit.receiver.iban | o |
| directDebit.alias | o |
| directDebit.limit | o |
| directDebit.limit.value | m |
| directDebit.limit.precision | m |
| directDebit.limit.currency | m |
| directDebit.limitSum | o |
| directDebit.limitSum.value | m |
| directDebit.limitSum.precision | m |
| directDebit.limitSum.currency | m |
| directDebit.limitNumber | m |
| directDebit.startDate | m |
| directDebit.endDate | o |
| directDebit.symbols | m |
| directDebit.symbols.variableSymbol | m |
| directDebit.symbols.specificSymbol | o |
| directDebit.symbols.constantSymbol | o |
| directDebit.periodicity | m |
| directDebit.periodCycle | m |

#### Error Codes

No additional error codes.

<!-- 
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (object)
        - directDebit (DIRECT_DEBITS, optional) - Direct debit.

+ Response 200 (application/json)
 --> 

+ Parameters

    + id: 1234567890 (string, required) - Account id (encrypted IBAN).

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

    + Body
    
            {
                "type": "DIRECT_DEBIT",
                "receiver": {
                    "number": "000000-1234567890",
                    "bankCode": "0800"
                },
                "alias": "moje inkaso",
                "periodicity": 1,
                "periodCycle": "MONTHLY",
                "limit": {
                    "value": 100000,
                    "precision": 2,
                    "currency": "CZK"
                },
                "limitSum" {
                    "value": 300000,
                    "precision": 2,
                    "currency": "CZK"                
                },
                "numberLimit": 5,                        
                "startDate": "2011-07-14",
                "endDate": "2013-07-14",
                "symbols": {
                    "variableSymbol": "4567",
                    "constantSymbol": "5",
                    "specificSymbol": "800"
                }
            }

+ Response 200 (application/json)

            {
                "directDebit": {
                    "type": "DIRECT_DEBIT",
                    "receiver": {
                        "number": "000000-1234567890",
                        "bankCode": "0800"
                    },
                    "alias": "moje inkaso",
                    "periodicity": 1,
                    "periodCycle": "MONTHLY",
                    "limit": {
                        "value": 100000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "limitSum" {
                        "value": 300000,
                        "precision": 2,
                        "currency": "CZK"                
                    },
                    "numberLimit": 5,                        
                    "startDate": "2011-07-14",
                    "endDate": "2013-07-14",
                    "symbols": {
                        "variableSymbol": "4567",
                        "constantSymbol": "5",
                        "specificSymbol": "800"
                    }
                },
                "signInfo": {
                    "state": "OPEN",
                    "signId": "043971701790000016006691"
                }                
            }

### Signing - direct debit create - GET [GET /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - direct debit create - POST [POST /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - direct debit create - PUT [PUT /netbanking/cz/my/accounts/{id}/directdebits/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_REFUSED | Direct debit delivery not successful. |
| 400 | CZ-ORDER\_DELIVERATION\_UNCERTAIN | Direct debit delivery not known. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

### Delete direct debit. [DELETE /netbanking/cz/my/accounts/{id}/directdebits/{number}{?cancellationDate}]

Paginated - no

Signable - yes

Sortable - no

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).
For signing resources for direct debit delete see: 
* [GET /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-delete-get)
* [POST /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-delete-post)
* [PUT /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}](#reference/resources/direct-debit-list/signing-direct-debit-delete-put)

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID_NOT_FOUND | The provided ID does not exist. |

<!-- 
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    - Attributes (SIGNINFO)
 --> 

+ Parameters

    + id: 1234567890 (string, required) - Account id (encrypted IBAN).
    + number: 2 (string, required) - Unique direct debit id.
    + cancellationDate: `2013-01-08` (DATE, optional) - Cancellation date.

+ Request

    + Headers

            WEB-API-key: 3b569c12-6519-4ce3-a112-559218fe5051
            Authorization: Bearer vF9dft4qmT

+ Response 200 (application/json)
    
            {
                "signInfo": {
                    "state": "OPEN",
                    "signId": "fde367favcz89fra"
                }
            }

### Signing - direct debit delete - GET [GET /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - number: 2 (string, required) - Unique direct debit id.
    - signId: fde367favcz89fra (string, required) - Provided in response of active call as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_GET_RESPONSE)

### Signing - direct debit delete - POST [POST /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NOT\_SIGNABLE | The requested resource is in a state that can not be signed (either not yet ready, or already signed). |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - number: 2 (string, required) - Unique direct debit id.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)
    
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_POST_REQUEST)

+ Response 200 (application/json)
    
    + Attributes (SIGN_IMMUTABLE_POST_RESPONSE)

### Signing - direct debit delete - PUT [PUT /netbanking/cz/my/accounts/{id}/directdebits/{number}/sign/{signId}]

For description of signing process see section [Signing Immutable orders](#reference/signing-of-resources/signing-immutable-orders).

##### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-ORDER\_REFUSED | Direct debit delivery not successful. |
| 400 | CZ-ORDER\_DELIVERATION\_UNCERTAIN | Direct debit delivery not known. |
| 400 | ONE\_ATTEMPT\_LEFT | The previous OTPs were wrong, only one attempt remains. This code will be provided in addition to TAC_INVALID. |
| 400 | TAC\_INVALID | The provided TAC is not valid for the given signId. |
| 400 | TAC\_EXPIRED | The provided TAC is expired. |
| 400 | TAC\_LIMIT\_SUCCEEDED | This resource can not be signed right now as the limit for TAC orders has been reached. |
| 400 | USER\_LOCKED | All allowed attempts failed. User is now blocked. This code will be provided in addition to TAC_INVALID. |

+ Parameters

    - id: 1234567890 (string, required) - Account id (encrypted IBAN).
    - number: 2 (string, required) - Unique direct debit id.
    - signId: fde367favcz89fra (string, required) - Generated as identificator of particular active order/request. This signId then will be used in signing process steps as reference ID.

+ Request MSON (application/json)

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

    + Attributes (SIGN_IMMUTABLE_PUT_REQUEST)

+ Response 200 (application/json)

    + Attributes (SIGN_IMMUTABLE_PUT_RESPONSE)

## Statements [/netbanking/my/accounts/{id}/statements{?size,page,sort,order}]

Get possibly empty list of statements to identified account. Statement history limitations are local country specific (only the last 24 months in CZ). This call is paginated and can be sorted.

### Get a list of statements for account [GET]

Paginated - yes

Signable - no

Sortable - yes

Response attributes:

| Attribute | General |
| ------ | ------ |
| statements | o |
| statements.id | m |
| statements.number | m |
| statements.statementDate | m |
| statements.periodicity | m |
| statements.format | o |
| statements.language | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[STATEMENTS], optional) - Array of statements.
        - Include PAGINATION
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "statements": [
                    {
                        "id": "201302520130621161819",
                        "number": 25,
                        "statementDate": "2013-06-21T14:18:19Z",
                        "periodicity": "MONTHLY",
                        "format": "PDF_A4",
                        "language": "cs"
                    },
                    {
                        "id": "201302524845621161819",
                        "number": 19,
                        "statementDate": "2014-05-11T14:12:19Z",
                        "periodicity": "DAILY",
                        "format": "PDF_A4",
                        "language": "cs"
                    }
                ]
            } 

### Download statements file for account [POST /netbanking/my/accounts/{accountId}/statements/signed/download{?format,statementId}]

Download statements file. No JSON payload. The binary representation of an account statement file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog. The filename is composed of: account IBAN + _ + statement no. 1 + … _ + statement no. n (maximal length of filename is 100 incl. extension).

Paginated - no

Signable - no

Sortable - no

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)
    + Headers

            Content-Disposition: attachment; filename=filename.ext
-->

+ Parameters

    + accountId: CCA4F9863D686D04 (string, required) - Account identifier.
    + format: PDF_A4 (string, required) - Format of statements file.
    + statementId: 201302520130621161819 (string, required) - Statement identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)

    + Headers

            Content-Disposition: attachment; filename=filename.ext            


## CardAccountStatements [/netbanking/my/cards/{cardId}/mainaccount/{aId}/statements{?size,page,sort,order}]

Get possibly empty list of statements to identified card account. Statement history limitations are local country specific (only the last 24 months in CZ). This call is paginated and can be sorted.

### Get a list of statements for account [GET]

Paginated - yes

Signable - no

Sortable - yes

Response attributes:

| Attribute | General |
| ------ | ------ |
| statements | o |
| statements.id | m |
| statements.number | m |
| statements.statementDate | m |
| statements.periodicity | m |
| statements.format | o |
| statements.language | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[STATEMENTS], optional) - Array of statements.
        - Include PAGINATION
-->

+ Parameters

    + cardId: CCA4F9863D686D04 (string, required) - Card identifier.
    + aId: CCA4F9863D686D04 (string, required) - Identifier of the accosiated card account.
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "statements": [
                    {
                        "id": "201302520130621161819",
                        "number": 25,
                        "statementDate": "2013-06-21T14:18:19Z",
                        "periodicity": "MONTHLY",
                        "format": "PDF_A4",
                        "language": "cs"
                    },
                    {
                        "id": "201302524845621161819",
                        "number": 19,
                        "statementDate": "2014-05-11T14:12:19Z",
                        "periodicity": "DAILY",
                        "format": "PDF_A4",
                        "language": "cs"
                    }
                ]
            } 

### Download statements file for card account [POST /netbanking/my/cards/{id}/mainaccount/{aId}/statements/signed/download{?format,statementId}]

Download statements file. No JSON payload. The binary representation of an account statement file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog. The filename is composed of: account IBAN + _ + statement no. 1 + … _ + statement no. n (maximal length of filename is 100 incl. extension).

Paginated - no

Signable - no

Sortable - no

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)
    + Headers

            Content-Disposition: attachment; filename=filename.ext
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Card identifier.
    + aId: CCA4F9863D686D04 (string, required) - Identifier of the accosiated card account.
    + format: PDF_A4 (string, required) - Format of statements file.
    + statementId: 201302520130621161819 (string, required) - Statement identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)

    + Headers

            Content-Disposition: attachment; filename=filename.ext


## Subaccount Statements [/netbanking/cz/my/accounts/{accountId}/subaccounts/{sId}/statements{?size,page,sort,order}]

Get possibly empty list of statements to identified card account. Statement history limitations are local country specific (only the last 24 months in CZ). This call is paginated and can be sorted.

### Get a list of statements for account [GET]

Paginated - yes

Signable - no

Sortable - yes

Response attributes:

| Attribute | General |
| ------ | ------ |
| statements | o |
| statements.id | m |
| statements.number | m |
| statements.statementDate | m |
| statements.periodicity | m |
| statements.format | o |
| statements.language | m |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[STATEMENTS], optional) - Array of statements.
        - Include PAGINATION
-->

+ Parameters

    + accountId: CCA4F9863D686D04 (string, required) - Identifier of the associated account.
    + sId: CCA4F9863D686D04 (string, required) - Subaccount identifier.
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "statements": [
                    {
                        "id": "201302520130621161819",
                        "number": 25,
                        "statementDate": "2013-06-21T14:18:19Z",
                        "periodicity": "MONTHLY",
                        "format": "PDF_A4",
                        "language": "cs"
                    },
                    {
                        "id": "201302524845621161819",
                        "number": 19,
                        "statementDate": "2014-05-11T14:12:19Z",
                        "periodicity": "DAILY",
                        "format": "PDF_A4",
                        "language": "cs"
                    }
                ]
            } 

### Download statements file for subaccount [POST /netbanking/cz/my/accounts/{accountId}/subaccounts/{sId}/statements/download{?format,statementId}]

Download statements file. No JSON payload. The binary representation of an account statement file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog. The filename is composed of: account IBAN + _ + statement no. 1 + … _ + statement no. n (maximal length of filename is 100 incl. extension).

Paginated - no

Signable - no

Sortable - no

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)
    + Headers

            Content-Disposition: attachment; filename=filename.ext
-->

+ Parameters

    + accountId: CCA4F9863D686D04 (string, required) - Card identifier.
    + sId: CCA4F9863D686D04 (string, required) - Identifier of the accosiated card account.
    + format: PDF_A4 (string, required) - Format of statements file.
    + statementId: 201302520130621161819 (string, required) - Statement identifier.

+ Request

    + Headers

            WEB-API-key: dd3c4d08-6c39-411a-a37d-0fbea365fc1e
            Authorization: Bearer tg048

+ Response 200 (application/octet-stream)

    + Headers

            Content-Disposition: attachment; filename=filename.ext
